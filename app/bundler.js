(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    "use strict";
    
    /*
      This is a generic "ThreeJS Application"
      helper which sets up a renderer and camera
      controls.
     */
    
    var createControls = require("orbit-controls");
    var assign = require("object-assign");
    
    module.exports = createApp;
    function createApp() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
      // Scale for retina
      var dpr = window.devicePixelRatio;
    
      // Our WebGL renderer with alpha and device-scaled
      var renderer = new THREE.WebGLRenderer(assign({
        antialias: true // default enabled
      }, opt));
      renderer.setPixelRatio(dpr);
    
      // Add the <canvas> to DOM body
      var canvas = renderer.domElement;
      document.body.appendChild(canvas);
    
      // perspective camera
      var near = 0.01;
      var far = 10000;
      var fieldOfView = 65;
      var camera = new THREE.PerspectiveCamera(fieldOfView, window.innerWidth / window.innerHeight, near, far);
      var target = new THREE.Vector3();
    
      // 3D scene
      var scene = new THREE.Scene();
    
      // slick 3D orbit controller with damping
      var controls = createControls(assign({
        canvas: canvas,
        distanceBounds: [1, 10],
        distance: 2.5,
        phi: 70 * Math.PI / 180
      }, opt));
    
      // Update renderer size
      window.addEventListener("resize", resize);
    
      // Setup initial size & aspect ratio
      resize();
    
      return {
        updateControls: updateControls,
        camera: camera,
        scene: scene,
        renderer: renderer,
        controls: controls,
        canvas: canvas
      };
    
      function updateControls() {
        var width = window.innerWidth;
        var height = window.innerHeight;
        var aspect = width / height;
    
        // update camera controls
        controls.update();
        camera.position.fromArray(controls.position);
        camera.up.fromArray(controls.up);
        target.fromArray(controls.direction).add(camera.position);
        camera.lookAt(target);
    
        // Update camera matrices
        camera.aspect = aspect;
        camera.updateProjectionMatrix();
      }
    
      function resize() {
        renderer.setSize(window.innerWidth, window.innerHeight);
        updateControls();
      }
    }
    
    },{"object-assign":27,"orbit-controls":28}],2:[function(require,module,exports){
    'use strict';
    
    // Simple 3D geometry
    var data = require('three-buffer-vertex-data');
    var unindex = require('unindex-mesh');
    
    // grab a simplicial complex
    var primitive = require('bunny');
    
    module.exports = function () {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
      // Set up our geometry
      var geometry = new THREE.BufferGeometry();
    
      // Sharing normals gives us a smooth look, splitting
      // them gives us a faceted look
      if (opt.flat) {
        data.attr(geometry, 'position', unindex(primitive));
      } else {
        data.index(geometry, primitive.cells);
        data.attr(geometry, 'position', primitive.positions);
      }
    
      // This is a ThreeJS utility to position the vertices
      // into world center [ 0, 0, 0 ]
      geometry.center();
    
      // Another utility to scale all the vertices
      geometry.scale(0.2, 0.2, 0.2);
    
      // Now compute a normal for each vertex
      // This will add a new attribute called 'normal'
      geometry.computeVertexNormals();
    
      return geometry;
    };
    
    },{"bunny":4,"three-buffer-vertex-data":38,"unindex-mesh":42}],3:[function(require,module,exports){
    (function (global){
    "use strict";
    
    global.THREE = require("three");
    var path = require("path");
    
    var createApp = require("./createApp");
    var createBunnyGeometry = require("./createBunnyGeometry");
    var createLoop = require("raf-loop");
    
    // Create our basic ThreeJS application
    
    var _createApp = createApp(),
        renderer = _createApp.renderer,
        camera = _createApp.camera,
        scene = _createApp.scene,
        updateControls = _createApp.updateControls;
    
    var fftSize = 128;
    var listener = new THREE.AudioListener();
    var sound = new THREE.Audio(listener);
    var audioLoader = new THREE.AudioLoader();
    var duration = void 0;
    
    audioLoader.load("./hoopkoonz.mp3", function (buffer) {
      sound.setBuffer(buffer);
      sound.setLoop(true);
      sound.setVolume(0.5);
      sound.play();
      console.log(audioLoader);
      duration = sound.buffer.duration;
      console.log(duration);
    });
    window.sound = sound;
    // 454.0109297052154
    
    var analyser = new THREE.AudioAnalyser(sound, fftSize);
    
    // Get a nicely prepared geometry
    // const geometry = createBunnyGeometry({ flat: true });
    // var material = new THREE.MeshBasicMaterial({ color: 0xffff00 });
    
    // Create our vertex/fragment shaders
    var panoTexture = new THREE.TextureLoader().load("raptor.png");
    var sphereMaterial = new THREE.ShaderMaterial({
      vertexShader: "//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n\tfloat stripes( float x, float f) {\n\t\tfloat PI = 3.14159265358979323846264;\n\t\tfloat t = .5 + .5 * sin( f * 2.0 * PI * x);\n\t\treturn t * t - .5;\n\t}\n\n\tfloat turbulence( vec3 p ) {\n\t\tfloat w = 100.0;\n\t\tfloat t = -.5;\n\t\tfor (float f = 1.0 ; f <= 10.0 ; f++ ){\n\t\t\tfloat power = pow( 2.0, f );\n\t\t\tt += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );\n\t\t}\n\t\treturn t;\n\t}\n\n\tfloat f( vec3 p ) {\n\t\treturn pnoise( vec3( p ), vec3( 10.0, 10.0, 10.0 ) );\n\t\treturn pnoise( 8.0 * vec3( p ), vec3( 10.0, 10.0, 10.0 ) );\n\t}\n\n\n\n\tvarying vec3 vNormal;\n\tvarying vec3 vReflect;\n\tvarying float ao;\n  varying float newdopacity;\n  varying vec4 cham;\n\tuniform float time;\n  uniform float opacity;\n\tuniform float weight1;\n  uniform float weight2;\n  uniform float weight3;\n  uniform float weight4;\n\n\tfloat fround( float value ) {\n\t\treturn floor( value + 0.5 );\n\t}\n\n\tvec3 v3round( vec3 value ) {\n\t\treturn vec3( fround( value.x ), fround( value.y ), fround( value.z ) );\n\t}\n\n  float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n  }\n\n\tvoid main() {\n\n\t\tvec3 evNormal = normal;\n\t\tvec3 aniNormal = 5.5 * evNormal + time;\n\t\tfloat f0 = weight1 * f( aniNormal );\n\t\tfloat fx = weight2 * f( aniNormal + vec3( .0001, 0.0, 0.0 ) );\n\t\tfloat fy = weight3 * f( aniNormal + vec3( 0.0, .0001, 0.0 ) );\n\t\tfloat fz = weight4 * f( aniNormal + vec3( 0.0, 0.0, .0001 ) );\n\t\tvec3 modifiedNormal = normalize( evNormal - vec3( (fx - f0) / .0001, (fy - f0) / .0001, (fz - f0) / .0001 ) );\n\n\t\tif( weight1 > 0.0 || weight2 > 0.0 || weight3 > 0.0 || weight4 > 0.0) {\n\t\t\tao = f0 / weight1;\n\t\t} else {\n\t\t\tao = 0.0;\n\t\t}\n\n\n    newdopacity = rand(vec2(sin(time),cos(position.y)))+.7;\n\n\n\t\tvNormal = modifiedNormal;\n\t\tvec3 newPosition = position + f0 * evNormal;\n\t\tvec3 nWorld = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * modifiedNormal );\n\t\tvReflect = normalize( reflect( normalize( newPosition.xyz - cameraPosition ), nWorld ) );\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n\n\t}",
      fragmentShader: "    varying vec2 vUv;\n\tvarying vec3 vNormal;\n\tvarying vec3 vReflect;\n\tvarying float ao;\n\tvarying float newdopacity;\n\tvarying vec4 cham;\n\tuniform sampler2D tShine;\n\tuniform float time;\n\tuniform float opacity;\n    uniform float low;\n    uniform float mid;\n    uniform float high;\n    uniform int stage;\n\n\tfloat PI = 3.14159265358979323846264;\n  float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n  }\n\n\tvec3 what(vec3 color) {\n        if (stage ==0){\n            return vec3(0,0,0);\n        }\n\t\telse if (stage==1){\n\t\t\t  return vec3(low/255.,low/255.,low/255.);\n\n\t\t} else if (stage==2) {\n                        float newLow = low /455.;\n\t\t\t  return vec3(newLow,mid/100.,high/50.);\n        }else if (color.x >= .5 && color.y >= .5 && color.z >= .5 && stage==3){\n\t\t                          float newLow = low /455.;\n\t\t\t  return vec3(newLow,mid/100.,high/50.);    \n\n        }\n\n\t\t\n\t}\n\tvoid main() {\n\n\t\tfloat yaw = .5 - atan( vReflect.z, - vReflect.x ) / ( 2.0 * PI );\n\t\tfloat pitch = .5 - asin( vReflect.y ) / PI;\n\t\tvec2 pos = vec2( yaw, pitch );\n\t\tvec3 color = texture2D( tShine, pos ).rgb;\n\n\t\tfloat diffuse_value1 = .0015 * max(dot(vNormal, vec3( -490.0, 29.8, -85.8 ) ), 0.0);\n\t\tfloat diffuse_value2 = .0005 * max(dot(vNormal, vec3( -460.0, 40.27, 187.4 ) ), 0.0);\n\t\tfloat diffuse_value3 = .0010 * max(dot(vNormal, vec3( 175.5, 30.04, 466.4 ) ), 0.0);\n\t\tfloat diffuse_value4 = .0005 * max(dot(vNormal, vec3( 466.0, 45.3, 172.9 ) ), 0.0);\n\n\t\tvec3 cham = what(color);\n\t\tgl_FragColor = vec4( cham - .15 * ao + .5 * vec3( diffuse_value1 + diffuse_value2 + diffuse_value3 + diffuse_value4 ), newdopacity * opacity +.3 );\n\n\n\t}",
      uniforms: {
        tShine: { type: "t", value: panoTexture },
        time: { type: "f", value: 0 },
        mouse: {
          type: "vec2",
          value: new THREE.Vector2()
        },
        stage: {
          type: "i",
          value: 1
        },
        opacity: {
          type: "f",
          value: 0
        },
        low: {
          type: "f",
          value: 0
        },
        mid: {
          type: "f",
          value: 0
        },
        high: {
          type: "f",
          value: 0
        }
      }
    });
    var sphere = new THREE.Mesh(new THREE.SphereBufferGeometry(500, 60, 60), sphereMaterial);
    sphere.geometry.scale(-1, 1, 1);
    sphere.doubleSided = true;
    console.log(sphere);
    scene.add(sphere);
    
    var geometry = new THREE.IcosahedronGeometry(20, 4);
    var material = new THREE.ShaderMaterial({
      transparent: true,
      vertexShader: "//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n\tfloat stripes( float x, float f) {\n\t\tfloat PI = 3.14159265358979323846264;\n\t\tfloat t = .5 + .5 * sin( f * 2.0 * PI * x);\n\t\treturn t * t - .5;\n\t}\n\n\tfloat turbulence( vec3 p ) {\n\t\tfloat w = 100.0;\n\t\tfloat t = -.5;\n\t\tfor (float f = 1.0 ; f <= 10.0 ; f++ ){\n\t\t\tfloat power = pow( 2.0, f );\n\t\t\tt += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );\n\t\t}\n\t\treturn t;\n\t}\n\n\tfloat f( vec3 p ) {\n\t\treturn pnoise( vec3( p ), vec3( 10.0, 10.0, 10.0 ) );\n\t\treturn pnoise( 8.0 * vec3( p ), vec3( 10.0, 10.0, 10.0 ) );\n\t}\n\n\n\n\tvarying vec3 vNormal;\n\tvarying vec3 vReflect;\n\tvarying float ao;\n  varying float newdopacity;\n  varying vec4 cham;\n\tuniform float time;\n  uniform float opacity;\n\tuniform float weight1;\n  uniform float weight2;\n  uniform float weight3;\n  uniform float weight4;\n\n\tfloat fround( float value ) {\n\t\treturn floor( value + 0.5 );\n\t}\n\n\tvec3 v3round( vec3 value ) {\n\t\treturn vec3( fround( value.x ), fround( value.y ), fround( value.z ) );\n\t}\n\n  float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n  }\n\n\tvoid main() {\n\n\t\tvec3 evNormal = normal;\n\t\tvec3 aniNormal = 5.5 * evNormal + time;\n\t\tfloat f0 = weight1 * f( aniNormal );\n\t\tfloat fx = weight2 * f( aniNormal + vec3( .0001, 0.0, 0.0 ) );\n\t\tfloat fy = weight3 * f( aniNormal + vec3( 0.0, .0001, 0.0 ) );\n\t\tfloat fz = weight4 * f( aniNormal + vec3( 0.0, 0.0, .0001 ) );\n\t\tvec3 modifiedNormal = normalize( evNormal - vec3( (fx - f0) / .0001, (fy - f0) / .0001, (fz - f0) / .0001 ) );\n\n\t\tif( weight1 > 0.0 || weight2 > 0.0 || weight3 > 0.0 || weight4 > 0.0) {\n\t\t\tao = f0 / weight1;\n\t\t} else {\n\t\t\tao = 0.0;\n\t\t}\n\n\n    newdopacity = rand(vec2(sin(time),cos(position.y)))+.7;\n\n\n\t\tvNormal = modifiedNormal;\n\t\tvec3 newPosition = position + f0 * evNormal;\n\t\tvec3 nWorld = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * modifiedNormal );\n\t\tvReflect = normalize( reflect( normalize( newPosition.xyz - cameraPosition ), nWorld ) );\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n\n\t}",
      fragmentShader: "varying vec2 vUv;\n\tvarying vec3 vNormal;\n\tvarying vec3 vReflect;\n\tvarying float ao;\n\tvarying float newdopacity;\n\tvarying vec4 cham;\n\tuniform sampler2D tShine;\n\tuniform float time;\n\tuniform float opacity;\n\tuniform vec2 mouse;\n\n\tfloat PI = 3.14159265358979323846264;\n\t  float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n  }\n\tvec3 what(vec3 color, vec2 mouse) {\n\t\tif (color.x >= .5 && color.y >= .5 && color.z >= .5){\n\t\t\t  return vec3(mouse.x,mouse.y,rand(mouse));\n\t\t} else {\n\t\t  return color;\n\n\t\t}\n\t}\n\tvoid main() {\n\n\t\tfloat yaw = .5 - atan( vReflect.z, - vReflect.x ) / ( 2.0 * PI );\n\t\tfloat pitch = .5 - asin( vReflect.y ) / PI;\n\t\tvec2 pos = vec2( yaw, pitch );\n\t\tvec3 color = texture2D( tShine, pos ).rgb;\n\n\t\tfloat diffuse_value1 = .0015 * max(dot(vNormal, vec3( -490.0, 29.8, -85.8 ) ), 0.0);\n\t\tfloat diffuse_value2 = .0005 * max(dot(vNormal, vec3( -460.0, 40.27, 187.4 ) ), 0.0);\n\t\tfloat diffuse_value3 = .0010 * max(dot(vNormal, vec3( 175.5, 30.04, 466.4 ) ), 0.0);\n\t\tfloat diffuse_value4 = .0005 * max(dot(vNormal, vec3( 466.0, 45.3, 172.9 ) ), 0.0);\n\n\t\tvec3 cham = what(color, mouse);\n\t\tgl_FragColor = vec4( cham - .15 * ao + .5 * vec3( diffuse_value1 + diffuse_value2 + diffuse_value3 + diffuse_value4 ), newdopacity * opacity +.3 );\n\n\n\t}",
      uniforms: {
        tShine: { type: "t", value: panoTexture },
        time: { type: "f", value: 0 },
        mouse: {
          type: "vec2",
          value: new THREE.Vector2()
        },
        opacity: {
          type: "f",
          value: 0
        },
        weight1: {
          type: "f",
          value: 0
        },
        weight2: {
          type: "f",
          value: 0
        },
        weight3: {
          type: "f",
          value: 0
        },
        weight4: {
          type: "f",
          value: 0
        }
      }
    });
    var mouse = new THREE.Vector2();
    
    function onMouseMove(event) {
      // calculate mouse position in normalized device coordinates
      // (-1 to +1) for both components
    
      mouse.x = event.clientX / window.innerWidth * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    }
    function playPause() {
      console.log(sound.isPlaying);
      if (!sound.isPlaying) {
        return sound.play();
      }
      sound.pause();
    }
    window.addEventListener("mousemove", onMouseMove, false);
    document.getElementById("playpause").addEventListener("click", playPause, false);
    
    // Setup our mesh
    var mesh = new THREE.Mesh(geometry, material);
    mesh.position.z = -40;
    scene.add(mesh);
    
    var light = new THREE.AmbientLight({ intensity: 2 });
    
    scene.add(light);
    // Time since beginning
    // let time = 0;
    var start = Date.now();
    // Start our render loop
    var average = function average(array) {
      return array.reduce(function (a, b) {
        return a + b;
      }) / array.length;
    };
    var stage = 0;
    createLoop(function (dt) {
      // update time
      // time += dt / 1000;
      material.uniforms["time"].value = 0.00025 * (Date.now() - start);
      sphereMaterial.uniforms["time"].value = 0.00025 * (Date.now() - start);
    
      analyser.getAverageFrequency();
      var low = analyser.data.slice(0, 21);
      var mid = analyser.data.slice(21, 42);
      var high = analyser.data.slice(42);
      console.log(sound.context.currentTime);
      if (stage == 0 && sound.context.currentTime > 13) {
        stage = 1;
      } else if (stage == 1 && sound.context.currentTime > 67) {
        stage = 2;
      }
      var lowAvg = void 0,
          midAvg = void 0,
          highAvg = void 0;
      if (stage === 1) {
        lowAvg = average(low);
        midAvg = average(low);
        highAvg = average(low);
      } else if (stage === 2) {
        lowAvg = average(low);
        midAvg = average(mid);
        highAvg = average(high);
      }
    
      // console.log(sound.context.currentTime);
    
      var divisor = 100;
      var w1 = (analyser.data[0] + 1) / divisor;
      var w2 = (analyser.data[1] + 1) / divisor;
      var w3 = (analyser.data[2] + 1) / divisor;
      var w4 = (analyser.data[28] + 1) / divisor;
      var sinWav = 0.5 + 0.1 * Math.sin(0.00025 * (Date.now() - start)) - 0.5;
      //console.log(w1, w2, w3, w4);
      material.uniforms.weight1.value = 10.0 * sinWav * w2;
      material.uniforms.weight2.value = 10.0 * sinWav * w2;
    
      material.uniforms.weight3.value = 10.0 * sinWav * w2;
    
      material.uniforms.weight4.value = 10.0 * sinWav * w2;
      //console.log(w4);
    
      material.uniforms.opacity.value = w4;
    
      material.uniforms.mouse.value = mouse;
      sphereMaterial.uniforms.low.value = lowAvg;
      sphereMaterial.uniforms.mid.value = midAvg;
      sphereMaterial.uniforms.high.value = highAvg;
      sphereMaterial.uniforms.stage.value = stage;
    
      // material.uniforms["weight"].value =
      // 10.0 * (0.5 + 0.5 * Math.sin(0.00025 * (Date.now() - start)));
    
      // render
      updateControls();
      renderer.render(scene, camera);
    }).start();
    
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{"./createApp":1,"./createBunnyGeometry":2,"path":31,"raf-loop":35,"three":39}],4:[function(require,module,exports){
    exports.positions=[[1.301895,0.122622,2.550061],[1.045326,0.139058,2.835156],[0.569251,0.155925,2.805125],[0.251886,0.144145,2.82928],[0.063033,0.131726,3.01408],[-0.277753,0.135892,3.10716],[-0.441048,0.277064,2.594331],[-1.010956,0.095285,2.668983],[-1.317639,0.069897,2.325448],[-0.751691,0.264681,2.381496],[0.684137,0.31134,2.364574],[1.347931,0.302882,2.201434],[-1.736903,0.029894,1.724111],[-1.319986,0.11998,0.912925],[1.538077,0.157372,0.481711],[1.951975,0.081742,1.1641],[1.834768,0.095832,1.602682],[2.446122,0.091817,1.37558],[2.617615,0.078644,0.742801],[-1.609748,0.04973,-0.238721],[-1.281973,0.230984,-0.180916],[-1.074501,0.248204,0.034007],[-1.201734,0.058499,0.402234],[-1.444454,0.054783,0.149579],[-4.694605,5.075882,1.043427],[-3.95963,7.767394,0.758447],[-4.753339,5.339817,0.665061],[-1.150325,9.133327,-0.368552],[-4.316107,2.893611,0.44399],[-0.809202,9.312575,-0.466061],[0.085626,5.963693,1.685666],[-1.314853,9.00142,-0.1339],[-4.364182,3.072556,1.436712],[-2.022074,7.323396,0.678657],[1.990887,6.13023,0.479643],[-3.295525,7.878917,1.409353],[0.571308,6.197569,0.670657],[0.89661,6.20018,0.337056],[0.331851,6.162372,1.186371],[-4.840066,5.599874,2.296069],[2.138989,6.031291,0.228335],[0.678923,6.026173,1.894052],[-0.781682,5.601573,1.836738],[1.181315,6.239007,0.393293],[-3.606308,7.376476,2.661452],[-0.579059,4.042511,-1.540883],[-3.064069,8.630253,-2.597539],[-2.157271,6.837012,0.300191],[-2.966013,7.821581,-1.13697],[-2.34426,8.122965,0.409043],[-0.951684,5.874251,1.415119],[-2.834853,7.748319,0.182406],[-3.242493,7.820096,0.373674],[-0.208532,5.992846,1.252084],[-3.048085,8.431527,-2.129795],[1.413245,5.806324,2.243906],[-0.051222,6.064901,0.696093],[-4.204306,2.700062,0.713875],[-4.610997,6.343405,0.344272],[-3.291336,9.30531,-3.340445],[-3.27211,7.559239,-2.324016],[-4.23882,6.498344,3.18452],[-3.945317,6.377804,3.38625],[-4.906378,5.472265,1.315193],[-3.580131,7.846717,0.709666],[-1.995504,6.645459,0.688487],[-2.595651,7.86054,0.793351],[-0.008849,0.305871,0.184484],[-0.029011,0.314116,-0.257312],[-2.522424,7.565392,1.804212],[-1.022993,8.650826,-0.855609],[-3.831265,6.595426,3.266783],[-4.042525,6.855724,3.060663],[-4.17126,7.404742,2.391387],[3.904526,3.767693,0.092179],[0.268076,6.086802,1.469223],[-3.320456,8.753222,-2.08969],[1.203048,6.26925,0.612407],[-4.406479,2.985974,0.853691],[-3.226889,6.615215,-0.404243],[0.346326,1.60211,3.509858],[-3.955476,7.253323,2.722392],[-1.23204,0.068935,1.68794],[0.625436,6.196455,1.333156],[4.469132,2.165298,1.70525],[0.950053,6.262899,0.922441],[-2.980404,5.25474,-0.663155],[-4.859043,6.28741,1.537081],[-3.077453,4.641475,-0.892167],[-0.44002,8.222503,-0.771454],[-4.034112,7.639786,0.389935],[-3.696045,6.242042,3.394679],[-1.221806,7.783617,0.196451],[0.71461,6.149895,1.656636],[-4.713539,6.163154,0.495369],[-1.509869,0.913044,-0.832413],[-1.547249,2.066753,-0.852669],[-3.757734,5.793742,3.455794],[-0.831911,0.199296,1.718536],[-3.062763,7.52718,-1.550559],[0.938688,6.103354,1.820958],[-4.037033,2.412311,0.988026],[-4.130746,2.571806,1.101689],[-0.693664,9.174283,-0.952323],[-1.286742,1.079679,-0.751219],[1.543185,1.408925,3.483132],[1.535973,2.047979,3.655029],[0.93844,5.84101,2.195219],[-0.684401,5.918492,1.20109],[1.28844,2.008676,3.710781],[-3.586722,7.435506,-1.454737],[-0.129975,4.384192,2.930593],[-1.030531,0.281374,3.214273],[-3.058751,8.137238,-3.227714],[3.649524,4.592226,1.340021],[-3.354828,7.322425,-1.412086],[0.936449,6.209237,1.512693],[-1.001832,3.590411,-1.545892],[-3.770486,4.593242,2.477056],[-0.971925,0.067797,0.921384],[-4.639832,6.865407,2.311791],[-0.441014,8.093595,-0.595999],[-2.004852,6.37142,1.635383],[4.759591,1.92818,0.328328],[3.748064,1.224074,2.140484],[-0.703601,5.285476,2.251988],[0.59532,6.21893,0.981004],[0.980799,6.257026,1.24223],[1.574697,6.204981,0.381628],[1.149594,6.173608,1.660763],[-3.501963,5.895989,3.456576],[1.071122,5.424198,2.588717],[-0.774693,8.473335,-0.276957],[3.849959,4.15542,0.396742],[-0.801715,4.973149,-1.068582],[-2.927676,0.625112,2.326393],[2.669682,4.045542,2.971184],[-4.391324,4.74086,0.343463],[1.520129,6.270031,0.775471],[1.837586,6.084731,0.109188],[1.271475,5.975024,2.032355],[-3.487968,4.513249,2.605871],[-1.32234,1.517264,-0.691879],[-1.080301,1.648226,-0.805526],[-3.365703,6.910166,-0.454902],[1.36034,0.432238,3.075004],[-3.305013,5.774685,3.39142],[3.88432,0.654141,0.12574],[3.57254,0.377934,0.302501],[4.196136,0.807999,0.212229],[3.932997,0.543123,0.380579],[4.023704,3.286125,0.537597],[1.864455,4.916544,2.691677],[-4.775427,6.499498,1.440153],[-3.464928,3.68234,2.766356],[3.648972,1.751262,2.157485],[1.179111,3.238846,3.774796],[-0.171164,0.299126,-0.592669],[-4.502912,3.316656,0.875188],[-0.948454,9.214025,-0.679508],[1.237665,6.288593,1.046],[1.523423,6.268963,1.139544],[1.436519,6.140608,1.739316],[3.723607,1.504355,2.136762],[2.009495,4.045514,3.22053],[-1.921944,7.249905,0.213973],[1.254068,1.205518,3.474709],[-0.317087,5.996269,0.525872],[-2.996914,3.934607,2.900178],[-3.316873,4.028154,2.785696],[-3.400267,4.280157,2.689268],[-3.134842,4.564875,2.697192],[1.480563,4.692567,2.834068],[0.873682,1.315452,3.541585],[1.599355,0.91622,3.246769],[-3.292102,7.125914,2.768515],[3.74296,4.511299,0.616539],[4.698935,1.55336,0.26921],[-3.274387,3.299421,2.823946],[-2.88809,3.410699,2.955248],[1.171407,1.76905,3.688472],[1.430276,3.92483,3.473666],[3.916941,2.553308,0.018941],[0.701632,2.442372,3.778639],[1.562657,2.302778,3.660957],[4.476622,1.152407,0.182131],[-0.61136,5.761367,1.598838],[-3.102154,3.691687,2.903738],[1.816012,5.546167,2.380308],[3.853928,4.25066,0.750017],[1.234681,3.581665,3.673723],[1.862271,1.361863,3.355209],[1.346844,4.146995,3.327877],[1.70672,4.080043,3.274307],[0.897242,1.908983,3.6969],[-0.587022,9.191132,-0.565301],[-0.217426,5.674606,2.019968],[0.278925,6.120777,0.485403],[1.463328,3.578742,-2.001464],[-3.072985,4.264581,2.789502],[3.62353,4.673843,0.383452],[-3.053491,8.752377,-2.908434],[-2.628687,4.505072,2.755601],[0.891047,5.113781,2.748272],[-2.923732,3.06515,2.866368],[0.848008,4.754252,2.896972],[-3.319184,8.811641,-2.327412],[0.12864,8.814781,-1.334456],[1.549501,4.549331,-1.28243],[1.647161,3.738973,3.507719],[1.250888,0.945599,3.348739],[3.809662,4.038822,0.053142],[1.483166,0.673327,3.09156],[0.829726,3.635921,3.713103],[1.352914,5.226651,2.668113],[2.237352,4.37414,3.016386],[4.507929,0.889447,0.744249],[4.57304,1.010981,0.496588],[3.931422,1.720989,2.088175],[-0.463177,5.989835,0.834346],[-2.811236,3.745023,2.969587],[-2.805135,4.219721,2.841108],[-2.836842,4.802543,2.60826],[1.776716,2.084611,3.568638],[4.046881,1.463478,2.106273],[0.316265,5.944313,1.892785],[-2.86347,2.776049,2.77242],[-2.673644,3.116508,2.907104],[-2.621149,4.018502,2.903409],[-2.573447,5.198013,2.477481],[1.104039,2.278985,3.722469],[-4.602743,4.306413,0.902296],[-2.684878,1.510731,0.535039],[0.092036,8.473269,-0.99413],[-1.280472,5.602393,1.928105],[-1.0279,4.121582,-1.403103],[-2.461081,3.304477,2.957317],[-2.375929,3.659383,2.953233],[1.417579,2.715389,3.718767],[0.819727,2.948823,3.810639],[1.329962,0.761779,3.203724],[1.73952,5.295229,2.537725],[0.952523,3.945016,3.548229],[-2.569498,0.633669,2.84818],[-2.276676,0.757013,2.780717],[-2.013147,7.354429,-0.003202],[0.93143,1.565913,3.600325],[1.249014,1.550556,3.585842],[2.287252,4.072353,3.124544],[-4.7349,7.006244,1.690653],[-3.500602,8.80386,-2.009196],[-0.582629,5.549138,2.000923],[-1.865297,6.356066,1.313593],[-3.212154,2.376143,-0.565593],[2.092889,3.493536,-1.727931],[-2.528501,2.784531,2.833758],[-2.565697,4.893154,2.559605],[-2.153366,5.04584,2.465215],[1.631311,2.568241,3.681445],[2.150193,4.699227,2.807505],[0.507599,5.01813,2.775892],[4.129862,1.863698,2.015101],[3.578279,4.50766,-0.009598],[3.491023,4.806749,1.549265],[0.619485,1.625336,3.605125],[1.107499,2.932557,3.790061],[-2.082292,6.99321,0.742601],[4.839909,1.379279,0.945274],[3.591328,4.322645,-0.259497],[1.055245,0.710686,3.16553],[-3.026494,7.842227,1.624553],[0.146569,6.119214,0.981673],[-2.043687,2.614509,2.785526],[-2.302242,3.047775,2.936355],[-2.245686,4.100424,2.87794],[2.116148,5.063507,2.572204],[-1.448406,7.64559,0.251692],[2.550717,4.9268,2.517526],[-2.955456,7.80293,-1.782407],[1.882995,4.637167,2.895436],[-2.014924,3.398262,2.954896],[-2.273654,4.771227,2.611418],[-2.162723,7.876761,0.702473],[-0.198659,5.823062,1.739272],[-1.280908,2.133189,-0.921241],[2.039932,4.251568,3.136579],[1.477815,4.354333,3.108325],[0.560504,3.744128,3.6913],[-2.234018,1.054373,2.352782],[-3.189156,7.686661,-2.514955],[-3.744736,7.69963,2.116973],[-2.283366,2.878365,2.87882],[-2.153786,4.457481,2.743529],[4.933978,1.677287,0.713773],[3.502146,0.535336,1.752511],[1.825169,4.419253,3.081198],[3.072331,0.280979,0.106534],[-0.508381,1.220392,2.878049],[-3.138824,8.445394,-1.659711],[-2.056425,2.954815,2.897241],[-2.035343,5.398477,2.215842],[-3.239915,7.126798,-0.712547],[-1.867923,7.989805,0.526518],[1.23405,6.248973,1.387189],[-0.216492,8.320933,-0.862495],[-2.079659,3.755709,2.928563],[-1.78595,4.300374,2.805295],[-1.856589,5.10678,2.386572],[-1.714362,5.544778,2.004623],[1.722403,4.200291,-1.408161],[0.195386,0.086928,-1.318006],[1.393693,3.013404,3.710686],[-0.415307,8.508471,-0.996883],[-1.853777,0.755635,2.757275],[-1.724057,3.64533,2.884251],[-1.884511,4.927802,2.530885],[-1.017174,7.783908,-0.227078],[-1.7798,2.342513,2.741749],[-1.841329,3.943996,2.88436],[1.430388,5.468067,2.503467],[-2.030296,0.940028,2.611088],[-1.677028,1.215666,2.607771],[-1.74092,2.832564,2.827295],[4.144673,0.631374,0.503358],[4.238811,0.653992,0.762436],[-1.847016,2.082815,2.642674],[4.045764,3.194073,0.852117],[-1.563989,8.112739,0.303102],[-1.781627,1.794836,2.602338],[-1.493749,2.533799,2.797251],[-1.934496,4.690689,2.658999],[-1.499174,5.777946,1.747498],[-2.387409,0.851291,1.500524],[-1.872211,8.269987,0.392533],[-4.647726,6.765771,0.833653],[-3.157482,0.341958,-0.20671],[-1.725766,3.24703,2.883579],[-1.458199,4.079031,2.836325],[-1.621548,4.515869,2.719266],[-1.607292,4.918914,2.505881],[-1.494661,5.556239,1.991599],[-1.727269,7.423769,0.012337],[-1.382497,1.161322,2.640222],[-1.52129,4.681714,2.615467],[-4.247127,2.792812,1.250843],[-1.576338,0.742947,2.769799],[-1.499257,2.172763,2.743142],[-1.480392,3.103261,2.862262],[1.049137,2.625836,3.775384],[-1.368063,1.791587,2.695516],[-1.307839,2.344534,2.767575],[-1.336758,5.092221,2.355225],[-1.5617,5.301749,2.21625],[-1.483362,8.537704,0.196752],[-1.517348,8.773614,0.074053],[-1.474302,1.492731,2.641433],[2.48718,0.644247,-0.920226],[0.818091,0.422682,3.171218],[-3.623398,6.930094,3.033045],[1.676333,3.531039,3.591591],[1.199939,5.683873,2.365623],[-1.223851,8.841201,0.025414],[-1.286307,3.847643,2.918044],[-1.25857,4.810831,2.543605],[2.603662,5.572146,1.991854],[0.138984,5.779724,2.077834],[-1.267039,3.175169,2.890889],[-1.293616,3.454612,2.911774],[-2.60112,1.277184,0.07724],[2.552779,3.649877,3.163643],[-1.038983,1.248011,2.605933],[-1.288709,4.390967,2.761214],[-1.034218,5.485963,2.011467],[-1.185576,1.464842,2.624335],[-1.045682,2.54896,2.761102],[4.259176,1.660627,2.018096],[-0.961707,1.717183,2.598342],[-1.044603,3.147464,2.855335],[-0.891998,4.685429,2.669696],[-1.027561,5.081672,2.377939],[4.386506,0.832434,0.510074],[-1.014225,9.064991,-0.175352],[-1.218752,2.895443,2.823785],[-0.972075,4.432669,2.788005],[-2.714986,0.52425,1.509798],[-0.699248,1.517219,2.645738],[-1.161581,2.078852,2.722795],[-0.845249,3.286247,2.996471],[1.068329,4.443444,2.993863],[3.98132,3.715557,1.027775],[1.658097,3.982428,-1.651688],[-4.053701,2.449888,0.734746],[-0.910935,2.214149,2.702393],[0.087824,3.96165,3.439344],[-0.779714,3.724134,2.993429],[-1.051093,3.810797,2.941957],[-0.644941,4.3859,2.870863],[-2.98403,8.666895,-3.691888],[-0.754304,2.508325,2.812999],[-4.635524,3.662891,0.913005],[-0.983299,4.125978,2.915378],[4.916497,1.905209,0.621315],[4.874983,1.728429,0.468521],[2.33127,5.181957,2.441697],[-0.653711,2.253387,2.7949],[-3.623744,8.978795,-2.46192],[-4.555927,6.160279,0.215755],[-4.940628,5.806712,1.18383],[3.308506,2.40326,-0.910776],[0.58835,5.251928,-0.992886],[2.152215,5.449733,2.331679],[-0.712755,0.766765,3.280375],[-0.741771,1.9716,2.657235],[-4.828957,5.566946,2.635623],[-3.474788,8.696771,-1.776121],[1.770417,6.205561,1.331627],[-0.620626,4.064721,2.968972],[-1.499187,2.307735,-0.978901],[4.098793,2.330245,1.667951],[1.940444,6.167057,0.935904],[-2.314436,1.104995,1.681277],[-2.733629,7.742793,1.7705],[-0.452248,4.719868,2.740834],[-0.649143,4.951713,2.541296],[-0.479417,9.43959,-0.676324],[-2.251853,6.559275,0.046819],[0.033531,8.316907,-0.789939],[-0.513125,0.995673,3.125462],[-2.637602,1.039747,0.602434],[1.527513,6.230089,1.430903],[4.036124,2.609846,1.506498],[-3.559828,7.877892,1.228076],[-4.570736,4.960193,0.838201],[-0.432121,5.157731,2.467518],[-1.206735,4.562511,-1.237054],[-0.823768,3.788746,-1.567481],[-3.095544,7.353613,-1.024577],[-4.056088,7.631119,2.062001],[-0.289385,5.382261,2.329421],[1.69752,6.136483,1.667037],[-0.168758,5.061138,2.617453],[2.853576,1.605528,-1.229958],[-4.514319,6.586675,0.352756],[-2.558081,7.741151,1.29295],[1.61116,5.92358,2.071534],[3.936921,3.354857,0.091755],[-0.1633,1.119272,3.147975],[0.067551,1.593475,3.38212],[-1.303239,2.328184,-1.011672],[-0.438093,0.73423,3.398384],[-4.62767,3.898187,0.849573],[0.286853,4.165281,3.284834],[-2.968052,8.492812,-3.493693],[-0.111896,3.696111,3.53791],[-3.808245,8.451731,-1.574742],[0.053416,5.558764,2.31107],[3.956269,3.012071,0.11121],[-0.710956,8.106561,-0.665154],[0.234725,2.717326,3.722379],[-0.031594,2.76411,3.657347],[-0.017371,4.700633,2.81911],[0.215064,5.034859,2.721426],[-0.111151,8.480333,-0.649399],[3.97942,3.575478,0.362219],[0.392962,4.735392,2.874321],[4.17015,2.085087,1.865999],[0.169054,1.244786,3.337709],[0.020049,3.165818,3.721736],[0.248212,3.595518,3.698376],[0.130706,5.295541,2.540034],[-4.541357,4.798332,1.026866],[-1.277485,1.289518,-0.667272],[3.892133,3.54263,-0.078056],[4.057379,3.03669,0.997913],[0.287719,0.884758,3.251787],[0.535771,1.144701,3.400096],[0.585303,1.399362,3.505353],[0.191551,2.076246,3.549355],[0.328656,2.394576,3.649623],[0.413124,3.240728,3.771515],[0.630361,4.501549,2.963623],[0.529441,5.854392,2.120225],[3.805796,3.769958,-0.162079],[3.447279,4.344846,-0.467276],[0.377618,5.551116,2.426017],[0.409355,1.821269,3.606333],[0.719959,2.194726,3.703851],[0.495922,3.501519,3.755661],[0.603408,5.354097,2.603088],[-4.605056,7.531978,1.19579],[0.907972,0.973128,3.356513],[0.750134,3.356137,3.765847],[0.4496,3.993244,3.504544],[-3.030738,7.48947,-1.259169],[0.707505,5.602005,2.43476],[0.668944,0.654891,3.213797],[0.593244,2.700978,3.791427],[1.467759,3.30327,3.71035],[3.316249,2.436388,2.581175],[3.26138,1.724425,2.539028],[-1.231292,7.968263,0.281414],[-0.108773,8.712307,-0.790607],[4.445684,1.819442,1.896988],[1.998959,2.281499,3.49447],[2.162269,2.113817,3.365449],[4.363397,1.406731,1.922714],[4.808,2.225842,0.611127],[2.735919,0.771812,-0.701142],[1.897735,2.878428,3.583482],[-3.31616,5.331985,3.212394],[-3.3314,6.018137,3.313018],[-3.503183,6.480103,3.222216],[-1.904453,5.750392,1.913324],[-1.339735,3.559592,-1.421817],[-1.044242,8.22539,0.037414],[1.643492,3.110676,3.647424],[3.992832,3.686244,0.710946],[1.774207,1.71842,3.475768],[-3.438842,5.5713,3.427818],[4.602447,1.2583,1.619528],[-0.925516,7.930042,0.072336],[-1.252093,3.846565,-1.420761],[-3.426857,5.072419,2.97806],[-3.160408,6.152629,3.061869],[3.739931,3.367082,2.041273],[1.027419,4.235891,3.251253],[4.777703,1.887452,1.560409],[-3.318528,6.733796,2.982968],[2.929265,4.962579,2.271079],[3.449761,2.838629,2.474576],[-3.280159,5.029875,2.787514],[4.068939,2.993629,0.741567],[0.303312,8.70927,-1.121972],[0.229852,8.981322,-1.186075],[-0.011045,9.148156,-1.047057],[-2.942683,5.579613,2.929297],[-3.145409,5.698727,3.205778],[-3.019089,6.30887,2.794323],[-3.217135,6.468191,2.970032],[-3.048298,6.993641,2.623378],[-3.07429,6.660982,2.702434],[3.612011,2.5574,2.25349],[2.54516,4.553967,2.75884],[-1.683759,7.400787,0.250868],[-1.756066,7.463557,0.448031],[-3.023761,5.149697,2.673539],[3.112376,2.677218,2.782378],[2.835327,4.581196,2.567146],[-2.973799,7.225458,2.506988],[-0.591645,8.740662,-0.505845],[3.782861,2.04337,2.03066],[3.331604,3.36343,2.605047],[2.966866,1.205497,2.537432],[0.002669,9.654748,-1.355559],[2.632801,0.58497,2.540311],[-2.819398,5.087372,2.521098],[2.616193,5.332961,2.194288],[-3.193973,4.925634,2.607924],[-3.12618,5.27524,2.944544],[-0.426003,8.516354,-0.501528],[2.802717,1.387643,2.751649],[-3.120597,7.889111,-2.75431],[2.636648,1.71702,2.991302],[-2.853151,6.711792,2.430276],[-2.843836,6.962865,2.400842],[1.9696,3.199023,3.504514],[-2.461751,0.386352,3.008994],[1.64127,0.495758,3.02958],[-4.330472,5.409831,0.025287],[-2.912387,5.980416,2.844261],[-2.490069,0.211078,2.985391],[3.581816,4.809118,0.733728],[2.693199,2.647213,3.126709],[-0.182964,8.184108,-0.638459],[-2.226855,0.444711,2.946552],[-0.720175,8.115055,0.017689],[2.645302,4.316212,2.850139],[-0.232764,9.329503,-0.918639],[4.852365,1.471901,0.65275],[2.76229,2.014994,2.957755],[-2.808374,5.354301,2.644695],[-2.790967,6.406963,2.547985],[-1.342684,0.418488,-1.669183],[2.690675,5.593587,-0.041236],[4.660146,1.6318,1.713314],[2.775667,3.007229,3.111332],[-0.396696,8.963432,-0.706202],[2.446707,2.740617,3.321433],[-4.803209,5.884634,2.603672],[-2.652003,1.6541,1.5078],[3.932327,3.972874,0.831924],[2.135906,0.955587,2.986608],[2.486131,2.053802,3.124115],[-0.386706,8.115753,-0.37565],[-2.720727,7.325044,2.224878],[-1.396946,7.638016,-0.16486],[-0.62083,7.989771,-0.144413],[-2.653272,5.729684,2.667679],[3.038188,4.65835,2.364142],[2.381721,0.739472,2.788992],[-2.345829,5.474929,2.380633],[-2.518983,6.080562,2.479383],[-2.615793,6.839622,2.186116],[-2.286566,0.143752,2.766848],[-4.771219,6.508766,1.070797],[3.717308,2.905019,2.097994],[2.50521,3.016743,3.295898],[2.208448,1.56029,3.216806],[3.346783,1.01254,2.119951],[2.653503,3.26122,3.175738],[-2.359636,5.827519,2.402297],[-1.952693,0.558102,2.853307],[-0.321562,9.414885,-1.187501],[3.138923,1.405072,2.520765],[1.493728,1.780051,3.621969],[3.01817,0.907291,2.336909],[3.183548,1.185297,2.352175],[1.608619,5.006753,2.695131],[-4.723919,6.836107,1.095288],[-1.017586,8.865429,-0.149328],[4.730762,1.214014,0.64008],[-2.135182,6.647907,1.495471],[-2.420382,6.546114,2.108209],[-2.458053,7.186346,1.896623],[3.437124,0.275798,1.138203],[0.095925,8.725832,-0.926481],[2.417376,2.429869,3.287659],[2.279951,1.200317,3.049994],[2.674753,2.326926,3.044059],[-2.328123,6.849164,1.75751],[-3.418616,7.853407,0.126248],[-3.151587,7.77543,-0.110889],[2.349144,5.653242,2.05869],[-2.273236,6.085631,2.242888],[-4.560601,4.525342,1.261241],[2.866334,3.796067,2.934717],[-2.17493,6.505518,1.791367],[3.12059,3.283157,2.818869],[3.037703,3.562356,2.866653],[0.066233,9.488418,-1.248237],[2.749941,0.975018,2.573371],[-2.155749,5.801033,2.204009],[-2.162778,6.261889,2.028596],[1.936874,0.459142,2.956718],[3.176249,4.335541,2.440447],[4.356599,1.029423,1.700589],[3.873502,3.082678,1.80431],[2.895489,4.243034,2.735259],[-0.095774,9.468195,-1.07451],[-1.124982,7.886808,-0.480851],[3.032304,3.065454,2.897927],[3.692687,4.5961,0.957858],[-3.013045,3.807235,-1.098381],[-0.790012,8.92912,-0.367572],[1.905793,0.73179,2.996728],[3.530396,3.426233,2.356583],[2.12299,0.624933,2.929167],[-2.069196,6.039284,2.01251],[-3.565623,7.182525,2.850039],[2.959264,2.376337,2.829242],[2.949071,1.822483,2.793933],[4.036142,0.763803,1.703744],[-1.993527,6.180318,1.804936],[-0.030987,0.766389,3.344766],[-0.549683,8.225193,-0.189341],[-0.765469,8.272246,-0.127174],[-2.947047,7.541648,-0.414113],[-3.050327,9.10114,-3.435619],[3.488566,2.231807,2.399836],[3.352283,4.727851,1.946438],[4.741011,2.162773,1.499574],[-1.815093,6.072079,1.580722],[-3.720969,8.267927,-0.984713],[1.932826,3.714052,3.427488],[3.323617,4.438961,2.20732],[0.254111,9.26364,-1.373244],[-1.493384,7.868585,-0.450051],[-0.841901,0.776135,-1.619467],[0.243537,6.027668,0.091687],[0.303057,0.313022,-0.531105],[-0.435273,0.474098,3.481552],[2.121507,2.622389,3.486293],[1.96194,1.101753,3.159584],[3.937991,3.407551,1.551392],[0.070906,0.295753,1.377185],[-1.93588,7.631764,0.651674],[-2.523531,0.744818,-0.30985],[2.891496,3.319875,2.983079],[4.781765,1.547061,1.523129],[-2.256064,7.571251,0.973716],[3.244861,3.058249,2.724392],[-0.145855,0.437775,3.433662],[1.586296,5.658538,2.358487],[3.658336,3.774921,2.071837],[2.840463,4.817098,2.46376],[-1.219464,8.122542,-0.672808],[-2.520906,2.664486,-1.034346],[-1.315417,8.471365,-0.709557],[3.429165,3.74686,2.446169],[3.074579,3.840758,2.767409],[3.569443,3.166337,2.333647],[2.294337,3.280051,3.359346],[2.21816,3.66578,3.269222],[2.158662,4.151444,-1.357919],[1.13862,4.380986,-1.404565],[3.388382,2.749931,-0.840949],[3.059892,5.084848,2.026066],[3.204739,2.075145,2.640706],[3.387065,1.42617,2.305275],[3.910398,2.670742,1.750179],[3.471512,1.945821,2.395881],[4.08082,1.070654,1.960171],[-1.057861,0.133036,2.146707],[-0.151749,5.53551,-0.624323],[3.233099,4.003778,2.571172],[2.611726,5.319199,-0.499388],[2.682909,1.094499,-1.206247],[-1.22823,7.656887,0.041409],[-2.293247,7.259189,0.013844],[0.081315,0.202174,3.286381],[-1.002038,5.794454,-0.187194],[3.448856,4.08091,2.258325],[0.287883,9.006888,-1.550641],[-3.851019,4.059839,-0.646922],[3.610966,4.205438,1.913129],[2.239042,2.950872,3.449959],[0.216305,0.442843,3.328052],[1.87141,2.470745,3.574559],[3.811378,2.768718,-0.228364],[2.511081,1.362724,2.969349],[-1.59813,7.866506,0.440184],[-3.307975,2.851072,-0.894978],[-0.107011,8.90573,-0.884399],[-3.855315,2.842597,-0.434541],[2.517853,1.090768,2.799687],[3.791709,2.36685,2.002703],[4.06294,2.773922,0.452723],[-2.973289,7.61703,-0.623653],[-2.95509,8.924462,-3.446319],[2.861402,0.562592,2.184397],[-1.109725,8.594206,-0.076812],[-0.725722,7.924485,-0.381133],[-1.485587,1.329994,-0.654405],[-4.342113,3.233735,1.752922],[-2.968049,7.955519,-2.09405],[-3.130948,0.446196,0.85287],[-4.958475,5.757329,1.447055],[-3.086547,7.615193,-1.953168],[-3.751923,5.412821,3.373373],[-4.599645,7.480953,1.677134],[1.133992,0.274871,0.032249],[-2.956512,8.126905,-1.785461],[-0.960645,4.73065,-1.191786],[-2.871064,0.875559,0.424881],[-4.932114,5.99614,1.483845],[-2.981761,8.124612,-1.387276],[0.362298,8.978545,-1.368024],[-4.408375,3.046271,0.602373],[2.865841,2.322263,-1.344625],[-4.7848,5.620895,0.594432],[-2.88322,0.338931,1.67231],[-4.688101,6.772931,1.872318],[-4.903948,6.164698,1.27135],[2.85663,1.005647,-0.906843],[2.691286,0.209811,0.050512],[-4.693636,6.477556,0.665796],[-4.472331,6.861067,0.477318],[0.883065,0.204907,3.073933],[-0.995867,8.048729,-0.653897],[-0.794663,5.670397,-0.390119],[3.313153,1.638006,-0.722289],[-4.856459,5.394758,1.032591],[-3.005448,7.783023,-0.819641],[3.11891,2.036974,-1.08689],[-2.364319,2.408419,2.63419],[-2.927132,8.75435,-3.537159],[-3.296222,7.964629,-3.134625],[-1.642041,4.13417,-1.301665],[2.030759,0.176372,-1.030923],[-4.559069,3.751053,0.548453],[3.438385,4.59454,-0.243215],[-2.561769,7.93935,0.177696],[2.990593,1.335314,-0.943177],[1.2808,0.276396,-0.49072],[-0.318889,0.290684,0.211143],[3.54614,3.342635,-0.767878],[-3.073372,7.780018,-2.357807],[-4.455388,4.387245,0.361038],[-4.659393,6.276064,2.767014],[0.636799,4.482223,-1.426284],[-2.987681,8.072969,-2.45245],[-2.610445,0.763554,1.792054],[3.358241,2.006707,-0.802973],[-0.498347,0.251594,0.962885],[3.1322,0.683312,2.038777],[-4.389801,7.493776,0.690247],[0.431467,4.22119,-1.614215],[-4.376181,3.213141,0.273255],[-4.872319,5.715645,0.829714],[-4.826893,6.195334,0.849912],[3.516562,2.23732,-0.677597],[3.131656,1.698841,-0.975761],[-4.754925,5.411666,1.989303],[-2.987299,7.320765,-0.629479],[-3.757635,3.274862,-0.744022],[3.487044,2.541999,-0.699933],[-4.53274,4.649505,0.77093],[-1.424192,0.099423,2.633327],[3.090867,2.476975,-1.146957],[-2.713256,0.815622,2.17311],[3.348121,3.254167,-0.984896],[-3.031379,0.16453,-0.309937],[-0.949757,4.518137,-1.309172],[-0.889509,0.095256,1.288803],[3.539594,1.966105,-0.553965],[-4.60612,7.127749,0.811958],[-2.332953,1.444713,1.624548],[3.136293,2.95805,-1.138272],[3.540808,3.069058,-0.735285],[3.678852,2.362375,-0.452543],[-4.648898,7.37438,0.954791],[-0.646871,0.19037,3.344746],[2.2825,0.29343,-0.826273],[-4.422291,7.183959,0.557517],[-4.694668,5.246103,2.541768],[-4.583691,4.145486,0.600207],[-2.934854,7.912513,-1.539269],[-3.067861,7.817472,-0.546501],[3.825095,3.229512,-0.237547],[2.532494,0.323059,2.387105],[-2.514583,0.692857,1.23597],[-4.736805,7.214384,1.259421],[-2.98071,8.409903,-2.468199],[2.621468,1.385844,-1.406355],[3.811447,3.560855,1.847828],[3.432925,1.497205,-0.489784],[3.746609,3.631538,-0.39067],[3.594909,2.832257,-0.576012],[-0.404192,5.300188,-0.856561],[-4.762996,6.483774,1.702648],[-4.756612,6.786223,1.43682],[-2.965309,8.437217,-2.785495],[2.863867,0.74087,-0.429684],[4.02503,2.968753,1.392419],[3.669036,1.833858,-0.304971],[-2.888864,0.720537,0.778057],[-2.36982,0.979443,1.054447],[-2.959259,8.222303,-2.659724],[-3.467825,7.545739,-2.333445],[2.153426,0.446256,-1.20523],[-3.229807,9.189699,-3.596609],[-3.72486,8.773707,-2.046671],[3.687218,3.297751,-0.523746],[1.381025,0.08815,-1.185668],[-2.796828,7.205622,-0.208783],[3.647194,4.066232,-0.291507],[-4.578376,3.885556,1.52546],[-2.840262,0.63094,1.89499],[-2.429514,0.922118,1.820781],[-4.675079,6.573925,2.423363],[2.806207,4.320188,-1.027372],[-1.289608,0.097241,1.321661],[-3.010731,8.141334,-2.866148],[3.202291,1.235617,-0.549025],[4.094792,2.477519,0.304581],[2.948403,0.966873,-0.664857],[-4.83297,5.920587,2.095461],[-2.169693,7.257277,0.946184],[-1.335807,3.057597,-1.303166],[-1.037877,0.64151,-1.685271],[2.627919,0.089814,0.439074],[3.815794,3.808102,1.730493],[-2.973455,8.433141,-3.08872],[-2.391558,7.331428,1.658264],[-4.333107,4.529978,1.850516],[-4.640293,3.767107,1.168841],[3.600716,4.46931,1.734024],[3.880803,1.730158,-0.172736],[3.814183,4.262372,1.167042],[4.37325,0.829542,1.413729],[2.490447,5.75111,0.011492],[3.460003,4.962436,1.188971],[3.918419,3.814234,1.358271],[-0.807595,8.840504,-0.953711],[3.752855,4.20577,1.57177],[-2.991085,8.816501,-3.244595],[-2.333196,7.128889,1.551985],[3.977718,3.570941,1.25937],[4.360071,0.755579,1.079916],[4.637579,1.027973,1.032567],[-2.317,7.421066,1.329589],[-1.013404,8.293662,-0.7823],[4.548023,1.020644,1.420462],[4.763258,1.266798,1.296203],[4.896,2.073084,1.255213],[4.015005,3.325226,1.093879],[4.94885,1.860936,0.894463],[-2.189645,6.954634,1.270077],[4.887442,1.720992,1.288526],[-3.184068,7.871802,0.956189],[-1.274318,0.839887,-1.224389],[-2.919521,7.84432,0.541629],[-2.994586,7.766102,1.96867],[-3.417504,9.241714,-3.093201],[-3.174563,7.466456,2.473617],[-3.263067,9.069412,-3.003459],[-2.841592,0.529833,2.693434],[-3.611069,9.158804,-2.829871],[-4.642828,5.927526,0.320549],[-3.809308,9.051035,-2.692749],[-2.837582,7.487987,-0.106206],[4.773025,2.330442,1.213899],[4.897435,2.209906,0.966657],[-3.067637,8.164062,-1.12661],[-3.122129,8.08074,-0.899194],[4.571019,2.358113,1.462054],[4.584884,2.454418,0.709466],[-3.661093,7.146581,-0.475948],[4.735131,2.415859,0.933939],[4.207556,2.540018,1.218293],[-3.607595,7.89161,-0.121172],[-1.527952,0.775564,-1.061903],[4.53874,2.503273,1.099583],[-3.938837,7.587988,0.082449],[-4.853582,6.152409,1.787943],[-4.752214,6.247234,2.296873],[4.602935,2.363955,0.488901],[-1.81638,6.365879,0.868272],[0.595467,4.744074,-1.32483],[1.87635,3.511986,-1.842924],[4.330947,2.534326,0.720503],[4.108736,2.750805,0.904552],[-1.890939,8.492628,-0.290768],[-3.504309,6.173058,-0.422804],[-1.611992,6.196732,0.648736],[-3.899149,7.826123,1.088845],[-3.078303,3.008813,-1.035784],[-2.798999,7.844899,1.340061],[-1.248839,5.959105,0.041761],[0.767779,4.337318,3.090817],[-3.831177,7.515605,2.432261],[-1.667528,6.156208,0.365267],[-1.726078,6.237384,1.100059],[-3.972037,4.520832,-0.370756],[-4.40449,7.636357,1.520425],[-1.34506,6.004054,1.293159],[-1.233556,6.049933,0.500651],[-3.696869,7.79732,0.37979],[-3.307798,8.949964,-2.698113],[-1.997295,6.615056,1.103691],[-3.219222,8.336394,-1.150614],[-3.452623,8.31866,-0.9417],[-3.94641,2.990494,2.212592],[-3.250025,8.030414,-0.596097],[-2.02375,1.571333,2.397939],[-3.190358,7.665013,2.268183],[-2.811918,7.618526,2.145587],[-1.005265,5.892303,0.072158],[-0.93721,5.974148,0.906669],[-4.646072,7.492193,1.45312],[-0.252931,1.797654,3.140638],[-1.076064,5.738433,1.695953],[-3.980534,7.744391,1.735791],[-0.721187,5.939396,0.526032],[-0.42818,5.919755,0.229001],[-1.43429,6.11622,0.93863],[-0.985638,5.939683,0.290636],[-4.433836,7.461372,1.966437],[-3.696398,7.844859,1.547325],[-3.390772,7.820186,1.812204],[-2.916787,7.864019,0.804341],[-3.715952,8.037269,-0.591341],[-4.204634,7.72919,1.119866],[-4.592233,5.592883,0.246264],[3.307299,5.061701,1.622917],[-3.515159,7.601467,2.368914],[-3.435742,8.533457,-1.37916],[-0.269421,4.545635,-1.366445],[-2.542124,3.768736,-1.258512],[-3.034003,7.873773,1.256854],[-2.801399,7.856028,1.080137],[3.29354,5.220894,1.081767],[-2.35109,1.299486,1.01206],[-3.232213,7.768136,2.047563],[3.290415,5.217525,0.68019],[-3.415109,7.731034,2.144326],[3.440357,4.962463,0.373387],[3.147346,5.352121,1.386923],[2.847252,5.469051,1.831981],[3.137682,5.410222,1.050188],[3.102694,5.310456,1.676434],[-3.044601,0.39515,1.994084],[2.903647,5.561338,1.518598],[-3.810148,8.093598,-0.889131],[4.234835,0.803054,1.593271],[3.240165,5.228747,0.325955],[3.037452,5.509825,0.817137],[2.635031,5.795187,1.439724],[3.071607,5.318303,0.080142],[2.909167,5.611751,1.155874],[3.044889,5.465928,0.486566],[2.502256,5.770673,1.740054],[-0.067497,0.086416,-1.190239],[2.33326,5.906051,0.138295],[0.65096,4.205423,3.308767],[-2.671137,7.936535,0.432731],[2.14463,5.879214,1.866047],[-4.776469,5.890689,0.561986],[2.72432,5.655145,0.211951],[2.730488,5.751455,0.695894],[2.572682,5.869295,1.152663],[1.906776,5.739123,2.196551],[2.344414,5.999961,0.772922],[-3.377905,7.448708,-1.863251],[2.285149,5.968156,1.459258],[2.385989,5.928974,0.3689],[2.192111,6.087516,0.959901],[2.36372,6.001101,1.074346],[1.972022,6.079603,1.591175],[1.87615,5.976698,1.91554],[-3.824761,9.05372,-2.928615],[2.044704,6.129704,1.263111],[-2.583046,0.849537,2.497344],[-0.078825,2.342205,3.520322],[-0.704686,0.537165,3.397194],[-0.257449,3.235334,3.647545],[-0.332064,1.448284,3.022583],[-2.200146,0.898284,-0.447212],[-2.497508,1.745446,1.829167],[0.30702,4.416315,2.978956],[-3.205197,3.479307,-1.040582],[0.110069,9.347725,-1.563686],[-0.82754,0.883886,3.065838],[-2.017103,1.244785,2.42512],[-0.421091,2.309929,3.153898],[-0.491604,3.796072,3.16245],[2.786955,3.501241,-1.340214],[-3.229055,4.380713,-0.899241],[3.730768,0.76845,1.90312],[-0.561079,2.652382,3.152463],[-3.461471,3.086496,2.662505],[-0.661405,3.446009,3.179939],[-0.915351,0.636755,3.243708],[-2.992964,8.915628,-3.729833],[-0.439627,3.502104,3.42665],[-1.154217,0.883181,2.800835],[-1.736193,1.465474,2.595489],[-0.423928,3.24435,3.548277],[-0.511153,2.871046,3.379749],[-0.675722,2.991756,3.143262],[-1.092602,0.599103,3.090639],[-0.89821,2.836952,2.840023],[-2.658412,0.781376,0.960575],[-2.271455,1.222857,1.330478],[-0.877861,1.111222,2.72263],[-0.306959,2.876987,3.556044],[-3.839274,7.84138,-0.918404],[-0.172094,4.083799,3.141708],[-1.548332,0.2529,2.864655],[-0.217353,4.873911,-1.223104],[-3.384242,3.181056,-0.95579],[-2.731704,0.382421,2.895502],[-1.285037,0.551267,2.947675],[0.077224,4.246579,3.066738],[-0.479979,1.77955,2.860011],[-0.716375,1.224694,2.666751],[-0.54622,3.138255,3.393457],[-2.33413,1.821222,2.124883],[-0.50653,2.037147,2.897465],[2.451291,1.211389,-1.466589],[-3.160047,2.894081,2.724286],[-4.137258,5.433431,3.21201],[0.462896,0.320456,-0.174837],[-0.37458,2.609447,3.379253],[-3.095244,0.256205,2.196446],[-4.197985,5.732991,3.262924],[-0.729747,0.246036,0.497036],[-2.356189,5.062,-0.965619],[-1.609036,0.25962,-1.487367],[-4.074381,6.074061,3.409459],[-3.619304,4.0022,2.65705],[-0.543393,8.742896,-1.056622],[-4.30356,6.858934,2.879642],[-0.716688,2.901831,-2.11202],[1.547362,0.083189,1.138764],[-0.250916,0.275268,1.201344],[-3.778035,3.13624,2.466177],[-4.594316,5.771342,3.01694],[-3.717706,3.442887,2.603344],[-4.311163,5.224669,3.019373],[-0.610389,2.095161,-1.923515],[-3.040086,6.196918,-0.429149],[-3.802695,3.768247,2.545523],[-0.159541,2.043362,3.328549],[-3.744329,4.31785,2.491889],[-3.047939,0.214155,1.873639],[-4.41685,6.113058,3.166774],[-1.165133,0.460692,-1.742134],[-1.371289,4.249996,-1.317935],[-3.447883,0.3521,0.466205],[-4.495555,6.465548,2.944147],[-3.455335,0.171653,0.390816],[-3.964028,4.017196,2.376009],[-1.323595,1.763126,-0.750772],[-3.971142,5.277524,-0.19496],[-3.222052,0.237723,0.872229],[-4.403784,3.89107,1.872077],[-3.333311,0.342997,0.661016],[-4.495871,4.29606,1.63608],[-3.636081,2.760711,2.361949],[-4.487235,3.559608,1.66737],[-4.719787,7.26888,1.658722],[-1.086143,9.035741,-0.707144],[-2.339693,1.600485,-0.404817],[-4.642011,7.123829,1.990987],[-1.498077,3.854035,-1.369787],[-4.188372,4.729363,2.02983],[-3.116344,5.882284,-0.468884],[-4.305236,4.246417,1.976991],[-3.022509,0.22819,1.065688],[-2.799916,0.52022,1.128319],[-4.262823,3.534409,2.020383],[-4.221533,3.947676,2.11735],[-3.744353,4.391712,-0.6193],[-1.272905,0.156694,-1.741753],[-3.62491,2.669825,-0.549664],[-4.180756,3.096179,1.987215],[-4.059276,4.305313,2.232924],[-2.812753,0.183226,1.370267],[-4.032437,3.512234,2.309985],[-0.03787,0.28188,0.530391],[-4.711562,5.468653,2.822838],[-4.500636,6.953314,2.564445],[-4.479433,7.216991,2.270682],[3.990562,0.50522,0.716309],[-2.512229,6.863447,-0.100658],[-2.968058,6.956639,-0.37061],[2.550375,3.142683,-1.54068],[-2.320059,3.521605,-1.279397],[-4.556319,6.64662,2.745363],[-4.281091,7.108116,2.667598],[-2.050095,8.411689,0.121353],[-2.44854,1.135487,0.851875],[3.121815,0.699943,-0.277167],[-4.69877,6.00376,2.843035],[-1.360599,8.824742,-0.595597],[1.128437,0.171611,0.301691],[-4.360146,6.289423,0.042233],[1.400795,4.088829,-1.620409],[-3.193462,8.460137,-3.559446],[-3.168771,8.878431,-3.635795],[-3.434275,9.304302,-3.460878],[-3.349993,8.808093,-3.38179],[-3.304823,8.323865,-3.325905],[-3.572607,9.308843,-3.207672],[-3.166393,8.201215,-3.43014],[-3.451638,9.05331,-3.351345],[-3.309591,8.549758,-3.375055],[-3.527992,8.793926,-3.100376],[-3.6287,8.981677,-3.076319],[-3.445505,8.001887,-2.8273],[-3.408011,8.221014,-3.039237],[-3.65928,8.740382,-2.808856],[-3.878019,8.797295,-2.462866],[-3.515132,8.232341,-2.747739],[-3.460331,8.51524,-3.06818],[-3.403703,7.658628,-2.648789],[-3.507113,8.00159,-2.582275],[-3.607373,8.174737,-2.401723],[-3.749043,8.378084,-2.226959],[-3.648514,8.502213,-2.6138],[-2.534199,0.904753,2.021148],[1.4083,5.744252,-0.571402],[-3.852536,8.571009,-2.352358],[2.868255,5.373126,-0.163705],[2.224363,4.669891,-1.061586],[-4.528281,4.885838,1.340274],[1.30817,4.609629,-1.28762],[-4.519698,3.422501,1.354826],[-3.549955,7.783228,-2.332859],[1.12313,6.120856,0.045115],[-3.620324,7.57716,-2.033423],[-0.798833,2.624133,-1.992682],[-3.617587,7.783148,-2.051383],[-3.669293,8.103776,-2.10227],[-3.892417,8.667436,-2.167288],[-0.537435,0.285345,-0.176267],[-0.841522,3.299866,-1.887861],[-0.761547,3.647082,-1.798953],[-3.661544,7.85708,-1.867924],[-3.886763,8.551783,-1.889171],[-0.591244,1.549749,-1.714784],[-0.775276,1.908218,-1.597609],[-0.961458,2.573273,-1.695549],[-2.215672,1.335009,2.143031],[-4.622674,4.130242,1.220683],[1.07344,0.290099,1.584734],[-0.976906,2.92171,-1.76667],[-1.13696,3.194401,-1.513455],[-3.743262,7.99949,-1.629286],[-2.876359,4.900986,-0.879556],[0.550835,3.905557,-2.031372],[0.777647,4.992314,-1.215703],[1.445881,4.266201,-1.414663],[1.274222,5.510543,-0.824495],[-0.864685,2.318581,-1.702389],[-0.627458,3.820722,-1.743153],[-3.867699,8.30866,-1.850066],[1.635287,5.45587,-0.83844],[-1.037876,2.538589,-1.513504],[-4.38993,4.73926,1.699639],[0.048709,4.765232,-1.279506],[-0.626548,1.339887,-1.595114],[-3.682827,7.643453,-1.723398],[-3.868783,8.180191,-1.511743],[-0.76988,1.508373,-1.419599],[-1.138374,2.766765,-1.448163],[1.699883,5.780752,-0.475361],[1.214305,0.308517,1.866405],[-1.713642,0.373461,-1.265204],[-1.582388,0.58294,-1.267977],[-0.879549,1.821581,-1.313787],[0.519057,5.858757,-0.381397],[-3.770989,2.449208,-0.132655],[0.087576,0.156713,-1.53616],[-0.942622,2.146534,-1.421494],[-1.026192,1.022164,-1.145423],[-0.964079,1.645473,-1.067631],[-1.109128,2.458789,-1.29106],[-1.037478,0.209489,-1.805424],[-3.724391,7.599686,-1.273458],[-3.787898,7.951792,-1.304794],[3.821677,2.165581,-0.181535],[-2.39467,0.304606,-0.570375],[-2.352928,1.0439,2.079369],[-0.288899,9.640684,-1.006079],[-3.472118,7.263001,-1.080326],[-1.240769,0.972352,-0.976446],[-1.845253,0.356801,-0.995574],[-2.32279,7.915361,-0.057477],[-1.08092,2.179315,-1.168821],[4.598833,2.156768,0.280264],[-4.725417,6.442373,2.056809],[-0.490347,9.46429,-0.981092],[-1.99652,0.09737,-0.765828],[-1.137793,1.888846,-0.894165],[-0.37247,4.29661,-1.465199],[-0.184631,5.692946,-0.421398],[-3.751694,7.742231,-1.086908],[-1.001416,1.298225,-0.904674],[-3.536884,7.190777,-0.788609],[-3.737597,7.511281,-0.940052],[-1.766651,0.669388,-0.873054],[3.112245,3.474345,-1.129672],[-0.175504,3.81298,-2.0479],[-3.766762,7.412514,-0.681569],[-0.63375,9.439424,-0.785128],[-0.518199,4.768982,-1.258625],[0.790619,4.212759,-1.610218],[-3.761951,3.742528,-0.756283],[0.897483,5.679808,-0.612423],[2.221126,4.427468,-1.252155],[-0.728577,5.846457,0.062702],[0.194451,9.503908,-1.482461],[-0.099243,9.385459,-1.39564],[0.643185,3.636855,-2.180247],[0.894522,5.900601,-0.356935],[2.595516,4.75731,-0.893245],[1.108497,3.936893,-1.905098],[1.989894,5.789726,-0.343268],[-3.802345,7.655508,-0.613817],[2.339353,4.96257,-0.90308],[0.12564,4.013324,-1.879236],[-4.078965,3.683254,-0.445439],[2.092899,5.256128,-0.831607],[0.427571,0.291769,1.272964],[2.335549,3.480056,-1.581949],[-0.15687,0.324827,-1.648922],[-0.536522,5.760786,-0.203535],[1.507082,0.078251,-0.923109],[-1.854742,0.134826,2.698774],[-3.939827,3.168498,-0.526144],[-3.98461,3.39869,-0.533212],[-3.961738,4.217132,-0.489147],[4.273789,2.181164,0.153786],[-0.470498,5.645664,-0.439079],[-0.414539,5.488017,-0.673379],[-0.097462,5.062739,-1.114863],[1.198092,5.882232,-0.391699],[2.855834,5.085022,-0.498678],[1.037998,4.129757,-1.701811],[1.728091,5.068444,-1.063761],[-3.832258,2.625141,-0.311384],[-4.078526,3.070256,-0.284362],[-4.080365,3.954243,-0.440471],[-0.152578,5.276267,-0.929815],[-1.489635,8.928082,-0.295891],[0.759294,5.15585,-1.087374],[-4.000338,2.801647,-0.235135],[-4.290801,3.823209,-0.19374],[-4.221493,4.25618,-0.189894],[-4.066195,4.71916,-0.201724],[-0.155386,4.076396,-1.662865],[3.054571,4.414305,-0.825985],[-1.652919,8.726499,-0.388504],[-3.042753,0.560068,-0.126425],[-2.434456,1.118088,-0.213563],[-2.623502,1.845062,-0.283697],[-4.233371,3.43941,-0.202918],[2.726702,3.82071,-1.280097],[0.184199,4.14639,-1.673653],[-1.289203,0.624562,-1.560929],[-3.823676,7.382458,-0.407223],[0.476667,5.064419,-1.143742],[-3.873651,4.955112,-0.269389],[1.349666,5.312227,-1.000274],[-2.043776,8.434488,-0.108891],[-2.763964,0.733395,-0.129294],[-4.380505,3.664409,-0.024546],[-0.71211,5.341811,-0.803281],[-3.960858,7.183112,-0.118407],[-3.822277,7.712853,-0.263221],[-2.346808,8.108588,0.063244],[-1.841731,8.642999,-0.142496],[-2.600055,0.985604,-0.043595],[-3.513057,2.213243,-0.044151],[-3.963492,2.603055,-0.080898],[-4.258066,3.14537,-0.027046],[-4.261572,5.00334,0.13004],[0.795464,3.99873,-1.905688],[-3.300873,0.384761,0.013271],[-2.770244,0.881942,0.077313],[-3.456227,1.993871,0.301054],[-4.441987,3.914144,0.177867],[-4.367075,6.611414,0.165312],[-3.201767,0.576292,0.105769],[-3.174354,0.645009,0.440373],[-2.996576,0.74262,0.161325],[-2.724979,1.656497,0.092983],[-3.261757,2.017742,-0.070763],[-4.280173,4.518235,-0.002999],[-4.471073,5.945358,0.05202],[-3.877137,2.40743,0.274928],[-4.371219,4.252758,0.078039],[-3.400914,0.40983,0.238599],[-4.44293,3.523242,0.146339],[-4.574528,5.279761,0.353923],[-4.226643,7.191282,0.269256],[-4.16361,2.843204,0.097727],[-4.528506,5.011661,0.536625],[0.35514,5.664802,-0.572814],[2.508711,5.580976,-0.266636],[2.556226,3.633779,-1.426362],[1.878456,4.533714,-1.223744],[2.460709,4.440241,-1.1395],[2.218589,5.514603,-0.560066],[2.263712,5.737023,-0.250694],[2.964981,3.814858,-1.139927],[0.991384,5.304131,-0.999867],[2.81187,4.547292,-0.916025],[2.918089,4.768382,-0.702808],[3.262403,4.414286,-0.657935],[0.652136,6.089113,0.069089],[3.361389,3.5052,-0.946123],[2.613042,5.037192,-0.697153],[0.094339,4.36858,-1.451238],[3.290862,4.155716,-0.732318],[2.658063,4.073614,-1.217455],[3.260349,3.753257,-0.946819],[1.124268,4.862463,-1.207855],[3.35158,4.899247,-0.027586],[3.194057,4.691257,-0.524566],[3.090119,5.116085,-0.23255],[2.418965,3.811753,-1.419399],[2.191789,3.877038,-1.47023],[4.043166,2.034188,0.015477],[-1.026966,0.86766,-1.410912],[1.937563,3.860005,-1.617465],[2.98904,4.101806,-0.998132],[-0.142611,5.865305,-0.100872],[3.972673,2.292069,0.089463],[3.23349,3.959925,-0.849829],[0.16304,5.857276,-0.216704],[4.122964,1.770061,-0.114906],[2.099057,4.978374,-0.98449],[3.502411,3.76181,-0.667502],[2.079484,5.939614,-0.036205],[-0.084568,3.525193,-2.253506],[0.423859,4.06095,-1.845327],[1.6013,6.006466,-0.153429],[0.271701,3.844964,-2.078748],[0.273577,5.218904,-0.994711],[-0.410578,3.92165,-1.773635],[1.941954,5.60041,-0.621569],[0.100825,5.462131,-0.774256],[-0.53016,3.619892,-2.027451],[-0.822371,5.517453,-0.605747],[-2.474925,7.670892,-0.020174],[4.01571,0.830194,-0.013793],[-0.400092,5.094112,-1.041992],[-2.887284,5.581246,-0.525324],[-1.559841,6.050972,0.079301],[-0.469317,3.291673,-2.235211],[0.337397,3.467926,-2.295458],[-2.632074,5.573701,-0.582717],[-0.030318,6.011395,0.276616],[-0.934373,0.388987,-1.780523],[-2.661263,5.844838,-0.425966],[0.549353,5.489646,-0.807268],[-2.194355,6.197491,-0.109322],[-2.289618,5.664813,-0.581098],[1.583583,3.796366,-1.844498],[0.855295,0.215979,-1.425557],[-2.627569,5.300236,-0.767174],[4.333347,2.384332,0.399129],[-1.880401,5.583843,-0.696561],[-2.172346,5.324859,-0.846246],[-2.27058,5.906265,-0.388373],[-1.960049,5.889346,-0.397593],[0.965756,3.67547,-2.105671],[-2.014066,6.431125,0.287254],[-1.776173,5.287097,-0.89091],[-2.025852,5.089562,-0.980218],[-1.886418,6.108358,-0.000667],[-1.600803,5.785347,-0.491069],[-1.66188,4.968053,-1.042535],[-1.600621,5.962818,-0.188044],[-1.588831,5.615418,-0.665456],[4.46901,1.880138,0.057248],[-1.978845,0.927399,-0.554856],[-1.408074,5.325266,-0.83967],[1.923123,4.843955,-1.101389],[-2.87378,0.117106,-0.412735],[-1.222193,5.62638,-0.539981],[-2.632537,0.166349,-0.489218],[-1.370865,5.838832,-0.341026],[-1.067742,5.448874,-0.692701],[-1.073798,5.220878,-0.908779],[-1.147562,4.950417,-1.079727],[-2.789115,4.531047,-1.042713],[-3.550826,4.170487,-0.806058],[-3.331694,4.798177,-0.69568],[-3.689404,4.688543,-0.534317],[-3.511509,5.106246,-0.483632],[1.796344,0.076137,0.080455],[-3.306354,5.473605,-0.478764],[-2.692503,3.346604,-1.20959],[-3.963056,5.187462,3.113156],[-3.901231,6.391477,-0.246984],[4.484234,1.518638,-0.001617],[4.308829,1.657716,-0.119275],[4.290045,1.339528,-0.110626],[-3.514938,3.524974,-0.909109],[-2.1943,2.12163,-0.71966],[4.108206,1.091087,-0.11416],[3.785312,1.392435,-0.28588],[4.092886,1.480476,-0.210655],[-2.965937,6.469006,-0.379085],[-3.708581,2.962974,-0.63979],[-3.297971,2.218917,-0.299872],[3.806949,0.804703,-0.11438],[3.747957,1.059258,-0.273069],[-3.101827,4.111444,-1.006255],[-1.536445,4.658913,-1.195049],[-3.549826,2.450555,-0.375694],[-3.676495,2.108366,0.534323],[-3.674738,5.925075,-0.400011],[-2.250115,2.848335,-1.121174],[-3.698062,5.667567,-0.381396],[3.468966,0.734643,-0.190624],[-3.97972,5.670078,-0.26874],[-3.002087,4.337837,-1.033421],[-3.356392,2.608308,-0.713323],[-1.833016,3.359983,-1.28775],[-1.989069,3.632416,-1.305607],[3.591254,0.542371,0.026146],[3.364927,1.082572,-0.342613],[-3.393759,3.866801,-0.937266],[-4.124865,5.549529,-0.161729],[-4.423423,5.687223,0.000103],[-1.496881,2.601785,-1.114328],[-2.642297,6.496932,-0.264175],[-3.684236,6.819423,-0.320233],[-2.286996,3.167067,-1.246651],[-1.624896,8.44848,-0.530014],[-3.666787,2.159266,0.268149],[-2.402625,2.011243,-0.56446],[-2.736166,2.259839,-0.6943],[-2.168611,3.89078,-1.292206],[-2.065956,3.345708,-1.281346],[-2.778147,2.675605,-0.995706],[-3.507431,4.513272,-0.71829],[-2.301184,4.293911,-1.238182],[3.205808,0.211078,0.394349],[-2.129936,4.870577,-1.080781],[-2.287977,2.496593,-0.934069],[-2.701833,2.931814,-1.114509],[3.294795,0.50631,-0.081062],[-2.552829,7.468771,-0.021541],[3.06721,0.944066,-0.43074],[-2.86086,1.973622,-0.303132],[-3.598818,5.419613,-0.401645],[-1.524381,0.080156,-1.61662],[-1.907291,2.646274,-1.039438],[2.950783,0.407562,-0.105407],[-1.663048,1.655038,-0.689787],[-1.728102,1.110064,-0.635963],[-2.085823,7.686296,-0.159745],[2.883518,3.157009,-1.30858],[-2.724116,0.417169,-0.389719],[-1.788636,7.862672,-0.346413],[-2.186418,1.249609,-0.434583],[-3.092434,2.606657,-0.860002],[-1.737314,3.874201,-1.330986],[2.564522,0.422967,-0.390903],[1.670782,3.538432,-1.924753],[-2.338131,4.02578,-1.286673],[-1.916516,4.054121,-1.301788],[2.87159,2.034949,-1.267139],[-1.931518,3.062883,-1.197227],[-0.816602,0.135682,3.104104],[0.469392,0.213916,-1.489608],[2.574055,1.950091,-1.514427],[2.733595,2.682546,-1.461213],[-1.915407,4.693647,-1.151721],[-3.412883,5.867094,-0.450528],[2.28822,0.120432,-0.04102],[2.244477,0.14424,-0.376933],[-1.676198,3.570698,-1.328031],[-1.821193,4.366982,-1.266271],[-1.552208,8.099221,-0.53262],[-1.727419,2.39097,-0.989456],[-2.468226,4.711663,-1.069766],[-2.451669,6.113319,-0.273788],[2.635447,2.295842,-1.518361],[-2.020809,8.150253,-0.246714],[2.292455,0.805596,-1.3042],[2.641556,1.65665,-1.466962],[2.409062,2.842538,-1.635025],[2.456682,1.459484,-1.57543],[-1.691047,3.173582,-1.247082],[-1.865642,1.957608,-0.768683],[-3.401579,0.20407,0.100932],[2.301981,1.7102,-1.650461],[2.342929,2.611944,-1.690713],[-1.676111,2.923894,-1.17835],[-2.992039,3.547631,-1.118945],[-3.571677,6.504634,-0.375455],[2.141764,1.460869,-1.702464],[-3.221958,5.146049,-0.615632],[2.19238,2.949367,-1.747242],[2.320791,2.232971,-1.706842],[2.088678,2.585235,-1.813159],[-2.196404,0.592218,-0.569709],[-2.120811,1.836483,-0.62338],[-1.949935,2.271249,-0.874128],[2.235901,1.110183,-1.510719],[2.020157,3.241128,-1.803917],[2.054336,1.949394,-1.792332],[-3.094117,4.996595,-0.740238],[2.038063,0.635949,-1.402041],[1.980644,1.684408,-1.76778],[1.587432,3.306542,-1.991131],[1.935322,0.976267,-1.602208],[1.922621,1.235522,-1.698813],[1.712495,1.911874,-1.903234],[1.912802,2.259273,-1.888698],[1.884367,0.355453,-1.312633],[1.676427,0.76283,-1.539455],[1.78453,2.83662,-1.943035],[1.697312,0.120281,-1.150324],[1.648318,2.484973,-1.999505],[-4.051804,5.958472,-0.231731],[-1.964823,1.464607,-0.58115],[1.55996,2.183486,-1.971378],[1.628125,1.045912,-1.707832],[1.701684,1.540428,-1.827156],[1.567475,4.869481,-1.184665],[1.432492,0.843779,-1.648083],[1.173837,2.978983,-2.156687],[1.235287,3.37975,-2.09515],[1.252589,1.525293,-1.949205],[1.159334,2.336379,-2.105361],[1.49061,2.695263,-2.083216],[-4.122486,6.782604,-0.02545],[1.173388,0.279193,-1.423418],[1.505684,0.380815,-1.414395],[1.391423,1.343031,-1.843557],[1.263449,2.73225,-2.144961],[1.295858,0.597122,-1.515628],[1.245851,3.729126,-1.993015],[-2.761439,6.23717,-0.365856],[0.978887,1.664888,-2.046633],[1.219542,0.982729,-1.785486],[1.315915,1.91748,-2.02788],[-3.052746,2.127222,-0.369082],[0.977656,1.36223,-1.944119],[0.936122,3.39447,-2.203007],[-2.740036,4.184702,-1.122849],[0.853581,2.864694,-2.260847],[0.719569,0.818762,-1.763618],[0.839115,1.159359,-1.907943],[0.932069,1.94559,-2.117962],[0.579321,3.326747,-2.299369],[0.86324,0.597822,-1.565106],[0.574567,1.158452,-1.943123],[0.525138,2.137252,-2.213867],[0.779941,2.342019,-2.206157],[0.915255,2.618102,-2.209041],[0.526426,3.02241,-2.321826],[0.495431,2.521396,-2.295905],[0.80799,3.156817,-2.286432],[0.273556,1.304936,-2.012509],[0.664326,1.530024,-2.048722],[0.219173,2.32907,-2.323212],[0.405324,0.695359,-1.704884],[0.398827,0.946649,-1.843899],[0.345109,1.608829,-2.100174],[-2.356743,0.062032,-0.4947],[-3.001084,0.27146,2.560034],[-2.064663,0.303055,-0.697324],[0.221271,3.174023,-2.374399],[0.195842,0.437865,-1.621473],[-0.385613,0.297763,1.960096],[1.999609,0.108928,-0.79125],[0.351698,9.227494,-1.57565],[0.021477,2.191913,-2.309353],[0.246381,2.836575,-2.356365],[1.543281,0.237539,1.901906],[0.031881,9.147022,-1.454203],[-0.001881,1.648503,-2.108044],[0.333423,1.907088,-2.204533],[0.044063,2.634032,-2.368412],[-0.028148,3.053684,-2.390082],[0.02413,3.34297,-2.36544],[-0.272645,9.02879,-1.238685],[-0.006348,0.832044,-1.758222],[-0.321105,1.458754,-1.886313],[-0.153948,8.618809,-1.105353],[-0.409303,1.137783,-1.720556],[-0.410054,1.742789,-1.957989],[-0.287905,2.380404,-2.294509],[-0.261375,2.646629,-2.356322],[-0.221986,3.215303,-2.345844],[-0.31608,0.687581,-1.71901],[-0.537705,0.855802,-1.648585],[-0.142834,1.193053,-1.87371],[-0.24371,2.044435,-2.176958],[-0.437999,2.959748,-2.299698],[-0.78895,0.176226,-1.729046],[-0.608509,0.546932,-1.734032],[-0.693698,4.478782,-1.369372],[-0.669153,8.469645,-0.911149],[-0.741857,1.082705,-1.458474],[-0.554059,2.440325,-2.141785],[2.09261,0.153182,2.57581],[1.792547,0.111794,2.563777],[1.855787,0.189541,2.835089],[1.492601,0.232246,2.987681],[-0.284918,0.236687,3.429738],[2.604841,0.11997,1.01506],[0.331271,0.168113,3.124031],[0.280606,0.308368,2.495937],[0.544591,0.325711,2.081274],[0.193145,0.19154,-0.977556],[3.810099,0.42324,1.032202],[3.54622,0.379245,1.392814],[0.61402,0.276328,0.849356],[-1.198628,0.144953,2.911457],[4.17199,0.68037,1.391526],[0.88279,0.321339,2.059129],[1.93035,0.109992,2.054154],[1.620331,0.121986,2.37203],[2.374812,0.10921,1.734876],[-0.031227,0.294412,2.593687],[4.075018,0.561914,1.038065],[-0.570366,0.126583,2.975558],[0.950052,0.318463,1.804012],[1.130034,0.117125,0.98385],[2.123049,0.08946,1.665911],[2.087572,0.068621,0.335013],[2.927337,0.167117,0.289611],[0.528876,0.313434,3.205969],[1.174911,0.162744,1.328262],[-4.88844,5.59535,1.661134],[-4.709607,5.165338,1.324082],[0.871199,0.277021,1.263831],[-3.910877,2.349318,1.272269],[1.56824,0.118605,2.768112],[1.179176,0.152617,-0.858003],[1.634629,0.247872,2.128625],[-4.627425,5.126935,1.617836],[3.845542,0.54907,1.45601],[2.654006,0.165508,1.637169],[-0.678324,0.26488,1.974741],[2.451139,0.100377,0.213768],[0.633199,0.286719,0.403357],[-0.533042,0.2524,1.373267],[0.99317,0.171106,0.624966],[-0.100063,0.306466,2.170225],[1.245943,0.092351,0.661031],[1.390414,0.198996,-0.0864],[-4.457265,5.030531,2.138242],[2.89776,0.146575,1.297468],[1.802703,0.088824,-0.490405],[1.055447,0.309261,2.392437],[2.300436,0.142429,2.104254],[2.33399,0.187756,2.416935],[2.325183,0.134349,0.574063],[2.410924,0.370971,2.637115],[1.132924,0.290511,3.061],[1.764028,0.070212,-0.80535],[2.156994,0.397657,2.844061],[0.920711,0.225527,-0.882456],[-4.552135,5.24096,2.85514],[0.210016,0.309396,2.064296],[0.612067,0.136815,-1.086002],[3.150236,0.426757,1.802703],[-0.24824,0.282258,1.470997],[0.974269,0.301311,-0.640898],[-4.401413,5.03966,2.535553],[0.644319,0.274006,-0.817806],[0.332922,0.309077,0.108474],[3.610001,0.317447,0.689353],[3.335681,0.358195,0.118477],[0.623544,0.318983,-0.4193],[-0.11012,0.307747,1.831331],[-0.407528,0.291044,2.282935],[0.069783,0.285095,0.950289],[0.970135,0.310392,-0.283742],[0.840564,0.306898,0.098854],[-0.541827,0.267753,1.683795],[-3.956082,4.55713,2.297164],[-4.161036,2.834481,1.64183],[-4.093952,4.977551,2.747747],[2.661819,0.261867,1.926145],[-3.749926,2.161875,0.895238],[-2.497776,1.3629,0.791855],[0.691482,0.304968,1.582939],[-4.013193,4.830963,2.4769],[-3.639585,2.091265,1.304415],[-3.9767,2.563053,1.6284],[-3.979915,2.788616,1.977977],[0.388782,0.312656,1.709168],[-3.40873,1.877324,0.851652],[-3.671637,5.136974,3.170734],[-3.12964,1.852012,0.157682],[-3.629687,4.852698,2.686837],[-3.196164,1.793459,0.452804],[-3.746338,2.31357,1.648551],[2.992192,0.125251,0.575976],[-3.254051,0.054431,0.314152],[-3.474644,1.925288,1.134116],[-3.418372,2.022882,1.578901],[-2.920955,1.705403,0.29842],[-3.57229,2.152022,1.607572],[-3.251259,0.09013,-0.106174],[-3.299952,1.877781,1.348623],[-3.666819,2.441459,2.004838],[-2.912646,1.824748,-0.045348],[-3.399511,2.479484,2.340393],[-3.009754,0.015286,0.075567],[-3.381443,2.316937,2.156923],[-3.352801,2.133341,1.857366],[-3.01788,1.687685,0.645867],[-2.931857,1.678712,1.158472],[-3.301008,0.08836,0.591001],[1.358025,0.19795,1.599144],[-2.999565,1.845016,1.618396],[-2.767957,0.028397,-0.196436],[-2.93962,2.078779,2.140593],[-3.346648,2.674056,2.518097],[3.324322,0.20822,0.628605],[3.091677,0.137202,0.9345],[-2.881807,0.009952,0.318439],[-2.764946,1.786619,1.693439],[-2.905542,1.932343,1.900002],[-3.140854,2.271384,2.274946],[-2.88995,2.487856,2.574759],[-2.367194,-0.000943,-0.15576],[-3.050738,0.068703,0.742988],[-2.759525,1.55679,0.877782],[-3.151775,2.48054,2.482749],[-2.578618,-0.002885,0.165716],[-2.651618,1.877246,1.981189],[-2.933973,0.133731,1.631023],[1.047628,0.100284,-1.085248],[-1.585123,0.062083,-1.394896],[-2.287917,-0.002671,0.214434],[-2.524899,0.007481,0.471788],[-2.815492,2.188198,2.343294],[-2.095142,-0.003149,-0.094574],[-2.172686,-0.000133,0.47963],[-2.732704,0.074306,1.742079],[-2.49653,2.145668,2.42691],[-1.343683,0.047721,-1.506391],[-2.581185,0.048703,0.975528],[-2.905101,0.083158,2.010052],[-2.601514,2.007801,2.223089],[-2.339464,0.02634,1.484304],[-2.907873,0.10367,2.378149],[-1.368796,0.062516,-1.049125],[-1.93244,0.02443,-0.427603],[-2.705081,0.060513,2.303802],[3.372155,0.206274,0.892293],[-1.761827,0.093202,-1.037404],[-1.700667,0.0397,-0.614221],[-1.872291,0.011979,-0.135753],[-1.929257,0.074005,0.728999],[-2.520128,0.049665,1.99054],[-2.699411,0.10092,2.603116],[3.211701,0.27302,1.423357],[-1.445362,0.1371,-0.626491],[2.921332,0.259112,1.645525],[-0.993242,0.058686,-1.408916],[-0.944986,0.157541,-1.097665],[-2.154301,0.032749,1.882001],[-2.108789,1.988557,2.442673],[-1.015659,0.25497,-0.416665],[-1.898411,0.015872,0.16715],[-1.585517,0.027121,0.453445],[-2.311105,0.061264,2.327061],[-2.637042,0.152224,2.832201],[-2.087515,2.292972,2.617585],[-0.750611,0.056697,-1.504516],[-0.472029,0.075654,-1.360203],[-0.710798,0.139244,-1.183863],[-0.97755,0.26052,-0.831167],[-0.655814,0.260843,-0.880068],[-0.897513,0.275537,-0.133042],[-2.049194,0.084947,2.455422],[-0.177837,0.076362,-1.449009],[-0.553393,0.279083,-0.59573],[-1.788636,0.06163,2.231198],[-0.34761,0.255578,-0.999614],[-1.398589,0.036482,0.65871],[-1.133918,0.05617,0.69473],[-1.43369,0.058226,1.977865],[-2.505459,1.492266,1.19295]]
    exports.cells=[[2,1661,3],[1676,7,6],[712,1694,9],[3,1674,1662],[11,1672,0],[1705,0,1],[5,6,1674],[4,5,1674],[7,8,712],[2,1662,10],[1,10,1705],[11,1690,1672],[1705,11,0],[5,1676,6],[7,9,6],[7,712,9],[2,3,1662],[3,4,1674],[1,2,10],[12,82,1837],[1808,12,1799],[1808,1799,1796],[12,861,82],[861,1808,13],[1808,861,12],[1799,12,1816],[1680,14,1444],[15,17,16],[14,1678,1700],[16,17,1679],[15,1660,17],[14,1084,1678],[15,1708,18],[15,18,1660],[1680,1084,14],[1680,15,1084],[15,1680,1708],[793,813,119],[1076,793,119],[1076,1836,22],[23,19,20],[21,1076,22],[21,22,23],[23,20,21],[1076,119,1836],[806,634,470],[432,1349,806],[251,42,125],[809,1171,791],[953,631,827],[634,1210,1176],[157,1832,1834],[56,219,53],[126,38,83],[37,85,43],[59,1151,1154],[83,75,41],[77,85,138],[201,948,46],[1362,36,37],[452,775,885],[1237,95,104],[966,963,1262],[85,77,43],[36,85,37],[1018,439,1019],[41,225,481],[85,83,127],[93,83,41],[935,972,962],[116,93,100],[98,82,813],[41,75,225],[298,751,54],[1021,415,1018],[77,138,128],[766,823,1347],[593,121,573],[905,885,667],[786,744,747],[100,41,107],[604,334,765],[779,450,825],[968,962,969],[225,365,481],[365,283,196],[161,160,303],[875,399,158],[328,1817,954],[62,61,1079],[358,81,72],[74,211,133],[160,161,138],[91,62,1079],[167,56,1405],[56,167,219],[913,914,48],[344,57,102],[43,77,128],[1075,97,1079],[389,882,887],[219,108,53],[1242,859,120],[604,840,618],[754,87,762],[197,36,1362],[1439,88,1200],[1652,304,89],[81,44,940],[445,463,151],[717,520,92],[129,116,100],[1666,1811,624],[1079,97,91],[62,91,71],[688,898,526],[463,74,133],[278,826,99],[961,372,42],[799,94,1007],[100,93,41],[1314,943,1301],[184,230,109],[875,1195,231],[133,176,189],[751,755,826],[101,102,57],[1198,513,117],[748,518,97],[1145,1484,1304],[358,658,81],[971,672,993],[445,151,456],[252,621,122],[36,271,126],[85,36,126],[116,83,93],[141,171,1747],[1081,883,103],[1398,1454,149],[457,121,593],[127,116,303],[697,70,891],[457,891,1652],[1058,1668,112],[518,130,97],[214,319,131],[185,1451,1449],[463,133,516],[1428,123,177],[113,862,561],[215,248,136],[186,42,251],[127,83,116],[160,85,127],[162,129,140],[154,169,1080],[169,170,1080],[210,174,166],[1529,1492,1524],[450,875,231],[399,875,450],[171,141,170],[113,1155,452],[131,319,360],[44,175,904],[452,872,113],[746,754,407],[147,149,150],[309,390,1148],[53,186,283],[757,158,797],[303,129,162],[429,303,162],[154,168,169],[673,164,193],[38,271,75],[320,288,1022],[246,476,173],[175,548,904],[182,728,456],[199,170,169],[168,199,169],[199,171,170],[184,238,230],[246,247,180],[1496,1483,1467],[147,150,148],[828,472,445],[53,108,186],[56,53,271],[186,961,42],[1342,391,57],[1664,157,1834],[1070,204,178],[178,204,179],[285,215,295],[692,55,360],[192,193,286],[359,673,209],[586,195,653],[121,89,573],[202,171,199],[238,515,311],[174,210,240],[174,105,166],[717,276,595],[1155,1149,452],[1405,56,197],[53,283,30],[75,53,30],[45,235,1651],[210,166,490],[181,193,192],[185,620,217],[26,798,759],[1070,226,204],[220,187,179],[220,168,187],[202,222,171],[359,209,181],[182,456,736],[964,167,1405],[76,250,414],[807,1280,1833],[70,883,1652],[227,179,204],[221,199,168],[221,202,199],[360,494,131],[214,241,319],[105,247,166],[205,203,260],[388,480,939],[482,855,211],[8,807,1833],[226,255,204],[228,221,168],[166,173,490],[701,369,702],[211,855,262],[631,920,630],[1448,1147,1584],[255,227,204],[237,220,179],[228,168,220],[222,256,555],[215,259,279],[126,271,38],[108,50,186],[227,236,179],[236,237,179],[220,237,228],[228,202,221],[256,222,202],[555,256,229],[259,152,279],[27,1296,31],[186,50,961],[961,234,372],[1651,235,812],[1572,1147,1448],[255,226,1778],[255,236,227],[256,257,229],[106,184,109],[241,410,188],[177,578,620],[209,673,181],[1136,1457,79],[1507,245,718],[255,273,236],[275,410,241],[206,851,250],[1459,253,1595],[1406,677,1650],[228,274,202],[202,281,256],[348,239,496],[205,172,203],[369,248,702],[261,550,218],[261,465,550],[574,243,566],[921,900,1220],[291,273,255],[348,238,265],[109,230,194],[149,380,323],[443,270,421],[272,291,255],[274,228,237],[274,292,202],[281,257,256],[276,543,341],[152,259,275],[1111,831,249],[632,556,364],[299,273,291],[299,236,273],[280,237,236],[202,292,281],[247,246,173],[282,49,66],[1620,1233,1553],[299,280,236],[280,305,237],[237,305,274],[306,292,274],[330,257,281],[246,194,264],[166,247,173],[912,894,896],[611,320,244],[1154,1020,907],[969,962,290],[272,299,291],[305,318,274],[145,212,240],[164,248,285],[259,277,275],[193,164,295],[269,240,210],[1033,288,320],[46,948,206],[336,280,299],[330,281,292],[257,307,300],[369,136,248],[145,240,269],[502,84,465],[193,295,286],[164,285,295],[282,302,49],[161,303,429],[318,306,274],[306,330,292],[315,257,330],[315,307,257],[307,352,300],[300,352,308],[275,277,403],[353,1141,333],[1420,425,47],[611,313,320],[85,126,83],[128,1180,43],[303,116,129],[280,314,305],[314,318,305],[190,181,242],[203,214,131],[820,795,815],[322,299,272],[322,336,299],[315,339,307],[172,152,617],[172,214,203],[321,1033,320],[1401,941,946],[85,160,138],[976,454,951],[747,60,786],[317,322,272],[339,352,307],[266,33,867],[163,224,218],[247,614,180],[648,639,553],[388,172,205],[611,345,313],[313,345,320],[160,127,303],[454,672,951],[317,329,322],[314,280,336],[306,338,330],[330,339,315],[1236,115,436],[342,321,320],[1046,355,328],[328,346,325],[325,346,317],[367,314,336],[314,337,318],[337,306,318],[338,343,330],[342,320,345],[355,349,328],[346,329,317],[347,336,322],[314,362,337],[330,343,339],[340,308,352],[135,906,1022],[239,156,491],[194,230,486],[40,1015,1003],[321,355,1046],[329,382,322],[382,347,322],[347,367,336],[337,371,306],[306,371,338],[1681,296,1493],[286,172,388],[230,348,486],[348,183,486],[384,332,830],[328,349,346],[367,362,314],[371,343,338],[339,351,352],[57,344,78],[342,355,321],[386,346,349],[386,350,346],[346,350,329],[347,366,367],[343,363,339],[323,380,324],[152,275,241],[345,1045,342],[350,374,329],[339,363,351],[234,340,352],[353,361,354],[40,34,1015],[373,355,342],[373,349,355],[374,382,329],[366,347,382],[371,363,343],[351,379,352],[379,372,352],[372,234,352],[156,190,491],[319,241,692],[354,361,31],[366,377,367],[363,379,351],[133,590,516],[197,56,271],[1045,370,342],[370,373,342],[374,350,386],[377,366,382],[367,395,362],[400,337,362],[400,371,337],[378,363,371],[106,109,614],[181,673,193],[953,920,631],[376,349,373],[376,386,349],[378,379,363],[224,375,218],[279,152,172],[361,619,381],[1347,823,795],[760,857,384],[392,374,386],[394,395,367],[383,371,400],[383,378,371],[218,375,261],[197,271,36],[414,454,976],[385,376,373],[1051,382,374],[387,394,367],[377,387,367],[395,400,362],[279,172,295],[30,365,225],[450,231,825],[385,373,370],[398,374,392],[1051,377,382],[396,378,383],[348,496,183],[295,172,286],[357,269,495],[1148,390,1411],[75,30,225],[206,76,54],[412,386,376],[412,392,386],[396,383,400],[651,114,878],[123,1241,506],[238,311,265],[381,653,29],[618,815,334],[427,1032,411],[298,414,976],[791,332,384],[129,100,140],[412,404,392],[392,404,398],[140,107,360],[395,394,400],[423,379,378],[385,412,376],[406,94,58],[419,415,1021],[422,423,378],[423,125,379],[258,508,238],[311,156,265],[213,287,491],[449,411,1024],[412,1068,404],[55,140,360],[76,414,54],[394,416,400],[400,416,396],[422,378,396],[1258,796,789],[427,411,449],[427,297,1032],[1385,1366,483],[417,448,284],[1507,341,245],[162,140,444],[658,44,81],[433,125,423],[438,251,125],[429,162,439],[1342,57,1348],[765,766,442],[697,891,695],[1057,396,416],[440,423,422],[440,433,423],[433,438,125],[438,196,251],[74,482,211],[1136,79,144],[29,195,424],[242,1004,492],[57,757,28],[414,298,54],[238,348,230],[224,163,124],[295,215,279],[495,269,490],[449,446,427],[446,297,427],[1020,1163,909],[128,138,419],[66,980,443],[415,439,1018],[111,396,1057],[111,422,396],[840,249,831],[593,664,596],[218,550,155],[109,194,180],[483,268,855],[161,415,419],[1737,232,428],[360,107,494],[1006,1011,410],[444,140,55],[919,843,430],[190,242,213],[275,403,410],[131,494,488],[449,663,446],[138,161,419],[128,419,34],[439,162,444],[460,440,422],[440,438,433],[472,74,445],[491,190,213],[238,508,515],[46,206,54],[972,944,962],[1241,1428,1284],[111,460,422],[470,432,806],[248,164,702],[1025,467,453],[553,1235,648],[263,114,881],[267,293,896],[469,438,440],[455,196,438],[287,242,492],[239,265,156],[213,242,287],[1684,746,63],[663,474,446],[415,161,429],[140,100,107],[1055,459,467],[469,455,438],[259,542,277],[446,474,466],[446,466,447],[439,444,1019],[614,109,180],[190,359,181],[156,497,190],[726,474,663],[1023,458,459],[461,440,460],[269,210,490],[246,180,194],[590,133,189],[163,218,155],[467,468,453],[1063,1029,111],[111,1029,460],[1029,464,460],[461,469,440],[150,149,323],[828,445,456],[375,502,261],[474,475,466],[573,426,462],[478,1023,477],[478,458,1023],[458,479,467],[459,458,467],[468,393,453],[464,461,460],[484,365,455],[1232,182,1380],[172,617,214],[547,694,277],[542,547,277],[184,258,238],[261,502,465],[467,479,468],[484,455,469],[1380,182,864],[475,476,466],[80,447,476],[466,476,447],[415,429,439],[479,487,468],[487,287,468],[492,393,468],[260,469,461],[481,365,484],[531,473,931],[692,360,319],[726,495,474],[468,287,492],[480,464,1029],[260,461,464],[494,481,484],[74,472,482],[174,240,212],[223,106,614],[486,477,485],[478,496,458],[491,487,479],[123,402,177],[488,469,260],[488,484,469],[265,239,348],[248,215,285],[474,490,475],[477,486,478],[458,496,479],[239,491,479],[1584,1147,1334],[488,494,484],[401,123,506],[495,490,474],[490,173,475],[80,476,264],[491,287,487],[480,1029,1004],[480,205,464],[173,476,475],[485,194,486],[486,183,478],[478,183,496],[496,239,479],[848,1166,60],[268,262,855],[205,260,464],[260,203,488],[203,131,488],[246,264,476],[194,485,264],[1002,310,1664],[311,515,497],[515,359,497],[565,359,515],[1250,1236,301],[736,456,151],[654,174,567],[577,534,648],[519,505,645],[725,565,508],[150,1723,148],[584,502,505],[584,526,502],[502,526,84],[607,191,682],[560,499,660],[607,517,191],[1038,711,124],[951,672,971],[716,507,356],[868,513,1198],[615,794,608],[682,191,174],[1313,928,1211],[617,241,214],[511,71,91],[408,800,792],[192,286,525],[80,485,447],[91,97,130],[1675,324,888],[207,756,532],[582,1097,1124],[311,497,156],[510,130,146],[523,511,510],[608,708,616],[546,690,650],[511,527,358],[536,146,518],[465,418,550],[418,709,735],[520,514,500],[584,505,519],[536,518,509],[146,536,510],[538,527,511],[876,263,669],[646,524,605],[510,536,523],[527,175,358],[724,876,669],[721,724,674],[524,683,834],[558,509,522],[558,536,509],[523,538,511],[611,243,574],[528,706,556],[668,541,498],[523,537,538],[527,540,175],[532,756,533],[1013,60,747],[551,698,699],[92,520,500],[535,536,558],[536,569,523],[538,540,527],[539,548,175],[567,212,145],[401,896,293],[534,675,639],[1510,595,1507],[557,545,530],[569,536,535],[537,540,538],[540,539,175],[569,537,523],[1135,718,47],[587,681,626],[580,535,558],[99,747,278],[701,565,725],[665,132,514],[665,514,575],[132,549,653],[176,651,189],[65,47,266],[597,569,535],[569,581,537],[537,581,540],[563,539,540],[539,564,548],[1509,1233,1434],[132,653,740],[550,710,155],[714,721,644],[410,1011,188],[732,534,586],[560,562,729],[555,557,222],[580,558,545],[597,535,580],[581,563,540],[5,821,1676],[576,215,136],[649,457,741],[564,539,563],[124,711,224],[550,668,710],[550,541,668],[565,701,673],[560,613,499],[233,532,625],[545,555,580],[601,581,569],[594,904,548],[1463,1425,434],[185,149,1454],[721,674,644],[185,380,149],[577,424,586],[462,586,559],[597,601,569],[594,548,564],[566,603,574],[165,543,544],[457,89,121],[586,424,195],[725,587,606],[1078,582,1124],[588,925,866],[462,559,593],[189,878,590],[555,229,580],[602,563,581],[904,594,956],[434,1425,1438],[1024,112,821],[572,587,626],[600,597,580],[599,591,656],[600,580,229],[601,622,581],[581,622,602],[602,564,563],[602,594,564],[603,611,574],[498,529,546],[697,1145,70],[592,628,626],[610,597,600],[597,610,601],[222,557,171],[604,765,799],[573,462,593],[133,200,176],[729,607,627],[1011,692,188],[518,146,130],[585,687,609],[682,627,607],[1712,599,656],[562,592,607],[643,656,654],[257,600,229],[601,633,622],[623,594,602],[174,212,567],[725,606,701],[609,701,606],[610,633,601],[633,642,622],[380,216,324],[142,143,1249],[501,732,586],[534,577,586],[648,1235,577],[610,641,633],[310,1002,1831],[618,334,604],[1710,145,269],[707,498,659],[501,586,462],[625,501,462],[726,663,691],[300,600,257],[641,610,600],[622,629,602],[602,629,623],[55,692,444],[518,748,509],[929,1515,1411],[620,578,267],[71,511,358],[707,668,498],[650,687,585],[600,300,641],[641,657,633],[1675,888,1669],[622,636,629],[505,502,375],[541,529,498],[332,420,1053],[637,551,638],[534,639,648],[69,623,873],[300,512,641],[633,657,642],[562,660,579],[687,637,638],[709,646,605],[775,738,885],[559,549,132],[646,683,524],[641,512,657],[266,897,949],[1712,643,1657],[184,727,258],[674,724,669],[699,714,647],[628,659,572],[657,662,642],[571,881,651],[517,607,504],[598,706,528],[598,694,547],[640,552,560],[655,693,698],[698,693,721],[91,510,511],[144,301,1136],[324,216,888],[870,764,1681],[575,514,520],[276,544,543],[658,175,44],[645,505,711],[659,546,572],[700,524,655],[605,700,529],[266,867,897],[1695,1526,764],[579,659,628],[654,591,682],[586,549,559],[698,721,714],[896,401,506],[640,734,599],[664,665,575],[621,629,636],[1712,656,643],[547,644,598],[710,668,707],[640,560,734],[655,698,551],[694,528,277],[512,662,657],[504,592,626],[688,584,519],[152,241,617],[587,725,681],[598,669,706],[526,670,84],[598,528,694],[710,707,499],[579,592,562],[660,659,579],[323,324,1134],[326,895,473],[195,29,653],[84,670,915],[560,660,562],[504,626,681],[711,505,224],[651,881,114],[216,620,889],[1362,678,197],[493,99,48],[1659,691,680],[529,690,546],[430,843,709],[655,524,693],[174,191,105],[674,669,598],[98,712,82],[572,546,585],[72,61,71],[912,911,894],[106,223,184],[664,132,665],[843,646,709],[635,699,136],[699,698,714],[593,132,664],[688,526,584],[185,177,620],[533,675,534],[687,638,635],[1652,89,457],[896,506,912],[132,740,514],[689,685,282],[691,449,680],[48,436,493],[136,699,647],[739,640,554],[549,586,653],[532,533,625],[1530,695,649],[653,381,619],[736,151,531],[188,692,241],[177,402,578],[33,689,867],[689,33,685],[593,559,132],[949,65,266],[711,1038,661],[939,480,1004],[609,369,701],[616,552,615],[619,361,740],[151,463,516],[513,521,117],[691,663,449],[186,251,196],[333,302,327],[613,560,552],[616,613,552],[690,551,637],[660,707,659],[704,208,1203],[418,735,550],[163,708,124],[524,834,693],[554,640,599],[245,341,165],[565,673,359],[155,710,708],[105,191,517],[1515,198,1411],[1709,554,599],[60,289,786],[838,1295,1399],[533,534,625],[710,499,708],[556,632,410],[217,620,216],[591,627,682],[504,503,223],[643,654,567],[690,637,650],[545,557,555],[174,654,682],[719,691,1659],[727,681,508],[645,711,661],[794,615,739],[565,515,508],[282,685,302],[1150,397,1149],[638,699,635],[544,685,33],[719,726,691],[1742,1126,1733],[1724,1475,148],[556,410,403],[185,217,380],[503,504,681],[277,556,403],[32,1178,158],[1712,1709,599],[605,529,541],[635,136,369],[687,635,369],[529,700,690],[700,551,690],[89,304,573],[625,534,732],[730,302,685],[503,681,727],[702,673,701],[730,327,302],[327,353,333],[596,664,575],[660,499,707],[585,546,650],[560,729,734],[700,655,551],[176,571,651],[517,504,223],[730,685,544],[1661,1682,726],[1682,495,726],[1250,301,917],[605,524,700],[609,687,369],[516,389,895],[1553,686,1027],[673,702,164],[656,591,654],[520,596,575],[402,123,401],[828,456,728],[1645,677,1653],[528,556,277],[638,551,699],[190,497,359],[276,730,544],[1117,1525,933],[1027,686,1306],[155,708,163],[709,605,541],[647,644,547],[650,637,687],[599,734,591],[578,293,267],[1682,357,495],[510,91,130],[734,729,627],[576,542,215],[709,541,735],[735,541,550],[276,500,730],[500,327,730],[653,619,740],[414,851,454],[734,627,591],[729,562,607],[615,552,640],[525,181,192],[308,512,300],[223,503,727],[266,165,33],[92,500,276],[321,1046,1033],[585,609,606],[1200,1559,86],[628,572,626],[301,436,803],[714,644,647],[708,499,613],[721,693,724],[514,353,327],[353,740,361],[344,158,78],[708,613,616],[615,640,739],[500,514,327],[514,740,353],[1449,177,185],[462,233,625],[851,405,1163],[608,616,615],[647,542,576],[625,732,501],[1097,582,1311],[1235,424,577],[579,628,592],[607,592,504],[24,432,470],[105,614,247],[104,742,471],[542,259,215],[365,196,455],[1420,47,65],[223,727,184],[547,542,647],[572,585,606],[587,572,606],[262,780,1370],[647,576,136],[644,674,598],[271,53,75],[727,508,258],[471,742,142],[505,375,224],[357,1710,269],[725,508,681],[659,498,546],[743,1178,32],[1195,634,231],[1176,24,470],[743,1110,1178],[135,809,857],[63,746,407],[634,1176,470],[159,1112,27],[1176,1685,24],[399,450,779],[1178,856,875],[751,744,54],[436,48,772],[634,1108,1210],[769,1285,1286],[751,298,755],[746,1684,754],[754,924,87],[722,1625,756],[87,839,153],[489,795,820],[758,808,1518],[839,840,153],[831,1111,959],[1111,749,959],[810,1253,1363],[1247,1394,713],[1388,1329,1201],[1242,120,761],[857,791,384],[758,1523,808],[296,764,1504],[70,1652,891],[207,233,1638],[1348,57,28],[858,420,332],[964,1379,1278],[420,1194,816],[784,1076,1186],[1076,21,1186],[1710,767,1],[849,822,778],[806,137,787],[786,790,744],[790,54,744],[771,63,407],[785,852,818],[774,1823,272],[895,151,516],[135,1022,809],[99,826,48],[48,826,755],[808,705,408],[833,441,716],[1733,743,32],[1385,836,852],[772,827,737],[1005,49,781],[793,1697,813],[1518,441,1537],[1139,1132,859],[782,801,770],[1510,1530,676],[770,814,835],[231,787,825],[207,722,756],[26,771,798],[782,863,865],[832,54,790],[865,842,507],[799,765,94],[1175,1261,1353],[800,408,805],[262,986,200],[792,800,814],[801,792,770],[704,1203,1148],[356,1514,822],[165,544,33],[561,776,113],[1043,738,775],[815,831,820],[773,792,801],[772,48,914],[772,737,803],[436,772,803],[808,817,705],[1624,822,1527],[588,1144,788],[799,762,604],[821,1520,1676],[854,803,666],[828,482,472],[445,74,463],[831,489,820],[828,836,482],[716,782,763],[334,815,766],[815,823,766],[334,766,765],[819,805,837],[1716,1521,1412],[1684,924,754],[800,805,819],[1709,829,554],[806,1349,137],[99,1013,747],[341,595,276],[817,810,818],[1176,1691,1685],[763,782,865],[830,846,1052],[865,1499,842],[982,846,1053],[847,832,790],[1178,875,158],[817,818,705],[1302,1392,45],[96,417,284],[223,614,517],[356,507,1514],[1166,848,1179],[1349,432,26],[717,92,276],[770,835,863],[522,509,1745],[847,841,832],[832,841,46],[829,739,554],[802,824,39],[397,1043,775],[1567,849,778],[1385,483,855],[1349,26,1346],[441,801,782],[402,401,293],[1043,667,738],[759,798,1007],[819,837,728],[728,837,828],[837,852,828],[1537,441,833],[148,1475,147],[805,705,837],[716,441,782],[483,1371,780],[814,819,844],[845,753,1336],[1661,719,4],[862,847,790],[737,827,666],[201,46,841],[810,785,818],[408,705,805],[1560,1536,849],[1585,853,1786],[7,1668,807],[7,807,8],[822,1514,1527],[800,819,814],[847,862,841],[991,857,760],[705,818,837],[808,408,773],[402,293,578],[791,858,332],[1480,1228,1240],[814,844,835],[785,1385,852],[1132,120,859],[1743,1726,684],[1704,783,1279],[1623,1694,1731],[959,489,831],[1518,808,773],[862,872,841],[441,773,801],[331,512,308],[380,217,216],[841,872,201],[818,852,837],[448,1480,1240],[856,1108,1195],[1527,1514,1526],[819,182,1232],[871,724,693],[852,836,828],[770,792,814],[803,737,666],[751,826,278],[1674,1727,1699],[849,356,822],[871,693,834],[507,842,1514],[1406,1097,869],[1328,1349,1346],[823,815,795],[744,751,278],[1110,856,1178],[520,717,316],[871,834,683],[884,876,724],[165,266,47],[716,763,507],[216,889,888],[853,1585,1570],[1536,716,356],[886,873,623],[782,770,863],[432,24,26],[683,882,871],[884,724,871],[114,876,884],[516,590,389],[11,1218,1628],[862,113,872],[886,623,629],[830,1052,1120],[762,153,604],[773,408,792],[763,865,507],[153,840,604],[882,884,871],[531,151,326],[886,890,873],[133,262,200],[819,1232,844],[621,636,122],[645,892,519],[1130,1076,784],[114,263,876],[1670,10,1663],[911,670,894],[452,885,872],[872,885,201],[887,882,683],[878,884,882],[590,878,882],[890,867,689],[897,629,621],[897,886,629],[819,728,182],[519,893,688],[894,670,526],[898,894,526],[1536,356,849],[810,1363,785],[878,114,884],[879,888,892],[892,889,893],[893,898,688],[895,683,843],[895,887,683],[889,620,267],[590,882,389],[418,465,84],[949,897,621],[897,890,886],[889,267,893],[898,267,896],[531,326,473],[189,651,878],[843,683,646],[897,867,890],[888,889,892],[893,267,898],[896,894,898],[473,895,843],[895,389,887],[974,706,669],[513,1115,521],[326,151,895],[809,791,857],[211,262,133],[920,923,947],[923,90,947],[90,25,947],[25,972,935],[64,431,899],[52,899,901],[903,905,59],[437,967,73],[839,1242,761],[904,975,44],[917,301,144],[915,670,911],[905,201,885],[1684,63,1685],[1033,1194,288],[950,913,755],[912,918,911],[950,914,913],[506,918,912],[922,919,915],[911,922,915],[1004,451,492],[1263,553,639],[922,911,918],[630,920,947],[916,506,926],[916,918,506],[521,1115,1098],[916,922,918],[919,418,915],[83,38,75],[24,1685,771],[110,1230,1213],[712,8,1837],[922,930,919],[919,430,418],[1395,1402,1187],[930,922,916],[594,623,69],[35,431,968],[35,968,969],[866,924,1684],[1625,1263,675],[631,630,52],[930,931,919],[430,709,418],[302,333,49],[1446,978,1138],[799,1007,798],[931,843,919],[947,25,64],[885,738,667],[1262,963,964],[899,970,901],[1401,946,938],[1117,933,1091],[1685,63,771],[905,948,201],[979,937,980],[951,953,950],[937,270,443],[1154,903,59],[1194,954,1067],[909,405,907],[850,1151,59],[1769,811,1432],[76,206,250],[938,946,966],[965,927,942],[938,966,957],[955,975,904],[927,965,934],[52,51,631],[59,905,667],[431,935,968],[786,289,561],[252,122,671],[481,494,107],[954,1817,1067],[795,25,90],[958,965,945],[795,972,25],[902,983,955],[972,489,944],[1256,29,424],[671,331,945],[946,958,963],[956,955,904],[902,955,956],[671,512,331],[945,331,961],[662,671,122],[671,662,512],[934,65,927],[630,947,52],[666,631,910],[850,59,667],[961,331,234],[1024,411,1042],[890,69,873],[252,671,945],[975,290,940],[283,186,196],[30,283,365],[950,755,298],[946,965,958],[985,290,975],[969,290,985],[405,851,206],[935,431,64],[941,1423,1420],[964,963,167],[942,252,945],[78,757,57],[49,1005,66],[937,979,270],[631,666,827],[980,937,443],[66,689,282],[421,902,956],[947,64,52],[35,979,899],[951,971,953],[762,87,153],[27,31,381],[924,839,87],[946,963,966],[331,308,340],[957,966,1262],[473,843,931],[953,971,920],[270,969,902],[935,962,968],[51,1005,781],[969,983,902],[437,73,940],[69,421,956],[761,249,840],[263,974,669],[962,944,967],[962,437,290],[985,975,955],[907,405,948],[720,957,1262],[25,935,64],[176,200,571],[108,945,50],[250,851,414],[200,986,571],[881,974,263],[827,772,953],[970,899,980],[29,159,27],[234,331,340],[948,405,206],[980,899,979],[986,984,571],[571,984,881],[990,706,974],[946,934,965],[970,980,66],[1113,1486,1554],[984,981,881],[881,987,974],[689,66,443],[1005,901,66],[983,985,955],[165,47,718],[987,990,974],[1370,986,262],[901,970,66],[51,901,1005],[981,987,881],[988,706,990],[942,945,965],[290,437,940],[64,899,52],[988,556,706],[941,934,946],[431,35,899],[996,989,984],[984,989,981],[981,989,987],[35,969,270],[1370,995,986],[986,995,984],[989,999,987],[987,992,990],[992,988,990],[962,967,437],[951,950,976],[979,35,270],[421,270,902],[998,995,1370],[987,999,992],[988,364,556],[969,985,983],[689,443,890],[995,1000,984],[219,958,108],[998,1000,995],[999,997,992],[914,953,772],[845,1336,745],[806,787,231],[1000,996,984],[989,996,999],[50,945,961],[443,421,69],[797,158,779],[1098,1463,434],[996,1009,999],[1001,988,992],[1001,364,988],[903,907,905],[26,759,973],[997,1001,992],[632,364,1001],[1346,26,973],[998,1008,1000],[1000,1009,996],[531,931,736],[252,949,621],[286,388,525],[1174,1008,998],[1009,1010,999],[999,1010,997],[1014,1001,997],[614,105,517],[958,945,108],[525,1004,242],[963,958,219],[233,426,304],[1000,1008,1009],[1010,1014,997],[1001,1006,632],[824,413,39],[642,636,622],[480,388,205],[28,757,797],[1014,1006,1001],[1006,410,632],[975,940,44],[1234,420,858],[54,832,46],[1009,1012,1010],[167,963,219],[41,481,107],[1017,1010,1012],[122,636,662],[939,525,388],[525,939,1004],[950,953,914],[829,1735,739],[1008,880,1015],[1008,1015,1009],[1263,639,675],[956,594,69],[795,90,1347],[1179,848,1013],[759,1007,973],[1009,1015,1012],[1012,1016,1017],[1017,1014,1010],[1019,1011,1006],[927,65,949],[649,316,595],[913,48,755],[976,950,298],[1003,1015,880],[1018,1006,1014],[1021,1018,1014],[444,692,1011],[451,1029,1063],[1185,851,1163],[29,27,381],[181,525,242],[1021,1014,1017],[1016,1021,1017],[1018,1019,1006],[1019,444,1011],[927,949,942],[451,393,492],[903,1154,907],[391,101,57],[94,765,58],[419,1016,1012],[949,252,942],[907,1020,909],[765,442,58],[94,406,908],[1007,94,908],[34,1012,1015],[34,419,1012],[419,1021,1016],[451,1057,393],[907,948,905],[1034,1073,1039],[1061,906,1619],[1068,960,1034],[471,1249,104],[112,1024,1042],[372,379,125],[341,543,165],[141,1094,170],[566,243,1061],[398,1034,1039],[325,317,1823],[1493,296,1724],[850,667,1043],[1054,297,1065],[1619,135,1074],[1061,243,906],[680,1024,821],[1103,96,1245],[1440,1123,1491],[1047,1025,1044],[672,454,1231],[1484,697,1530],[993,672,1231],[178,154,1088],[1044,1041,1066],[112,1062,1058],[1530,649,676],[178,1088,1040],[1046,328,954],[243,244,1022],[954,1194,1033],[1042,411,1032],[971,993,1056],[960,1093,1034],[1754,1338,232],[385,1064,412],[1057,1063,111],[748,1071,1447],[1530,697,695],[971,1056,1270],[977,1059,1211],[649,741,316],[1060,1452,1030],[353,354,1323],[695,768,649],[398,404,1034],[596,316,741],[1836,119,13],[1513,1115,1528],[883,1081,1652],[1039,1073,1048],[462,426,233],[31,1296,354],[1055,1047,1066],[1032,1054,1045],[1521,310,1224],[119,861,13],[1194,1234,288],[1109,1771,1070],[1166,1160,776],[1044,1035,1041],[1026,960,1064],[1050,1032,1045],[1049,1041,387],[115,1013,99],[1046,954,1033],[1321,920,971],[611,1058,345],[1048,1066,1049],[1023,1055,1073],[1029,451,1004],[118,1094,141],[1094,1080,170],[1042,1032,1050],[1026,1064,385],[15,16,1084],[1096,1079,61],[1075,1071,748],[325,1817,328],[909,1163,405],[1022,1234,809],[374,398,1051],[1082,72,81],[1023,1034,1093],[1817,1794,1067],[86,1445,1400],[1507,1535,1510],[1079,1096,1075],[568,1478,1104],[1070,178,1040],[1034,1023,1073],[776,1155,113],[1103,143,142],[1140,81,73],[1082,81,1140],[1060,1030,936],[1040,1086,1109],[370,1065,385],[61,72,1082],[1087,1096,1144],[1040,1088,1086],[1651,812,752],[1062,1050,1045],[187,154,178],[179,187,178],[1099,1344,1101],[1668,1058,807],[1073,1055,1048],[1099,1336,1344],[1283,943,1123],[1049,387,1051],[1024,680,449],[61,1082,1100],[967,749,1111],[1439,1037,88],[742,1505,142],[398,1039,1051],[1107,1336,1099],[1344,1542,1101],[142,1505,1103],[477,1093,447],[477,1023,1093],[471,142,1249],[1041,1035,394],[1328,568,1104],[61,1100,1096],[154,1092,1088],[112,1042,1050],[154,187,168],[435,235,45],[1075,1096,1087],[97,1075,748],[1049,1066,1041],[816,1067,1028],[846,982,1142],[1245,96,284],[1092,154,1080],[1057,451,1063],[387,377,1051],[1055,1025,1047],[1075,1087,1089],[1106,1108,856],[1068,1034,404],[1480,1545,868],[906,135,1619],[1074,991,1095],[570,566,1061],[1025,453,1044],[745,1336,1107],[1035,1057,416],[1092,1102,1129],[1074,135,991],[1105,745,1107],[447,1026,446],[394,387,1041],[73,81,940],[1118,1108,1106],[1210,1108,874],[243,1022,906],[412,1064,1068],[1280,611,603],[960,447,1093],[1051,1039,1049],[1040,1109,1070],[1471,1037,1439],[69,890,443],[1377,703,1374],[1092,1080,1102],[1096,1100,788],[1096,788,1144],[1114,967,1111],[446,1026,297],[70,1112,883],[453,393,1057],[1118,874,1108],[1054,370,1045],[1080,1094,1102],[1039,1048,1049],[428,753,845],[1047,1044,1066],[1044,453,1035],[1472,731,1512],[1126,1121,743],[743,1121,1110],[1032,297,1054],[1480,868,1216],[71,358,72],[1133,967,1114],[1105,1119,745],[1035,453,1057],[1026,447,960],[454,851,1190],[1030,1477,652],[589,816,1028],[1110,1121,1106],[1122,1118,1106],[1116,874,1118],[1048,1055,1066],[1194,1067,816],[744,278,747],[745,1120,845],[845,1052,428],[1105,1780,1119],[1065,297,385],[1098,1529,1463],[731,1060,936],[235,434,812],[1445,1525,1117],[1106,1121,1122],[1122,1127,1118],[1127,1116,1118],[1094,118,1732],[1119,1120,745],[1406,1124,1097],[435,117,235],[1462,1440,1037],[1126,1129,1121],[1088,1092,1129],[1133,73,967],[1120,1052,845],[812,434,752],[1441,1559,1200],[1131,588,413],[1054,1065,370],[235,1098,434],[1052,1142,428],[1737,428,1142],[1496,1446,1483],[1182,1083,1654],[1121,1129,1122],[1732,1116,1127],[768,457,649],[761,1114,249],[1064,960,1068],[1135,1481,1136],[1126,952,1129],[1087,588,1131],[1087,1144,588],[859,788,1139],[1140,1133,1132],[1133,1140,73],[1822,570,1061],[394,1035,416],[1055,1023,459],[80,264,485],[1119,1128,1120],[145,1658,567],[695,891,768],[1129,1102,1122],[1122,1102,1127],[1416,1077,1413],[297,1026,385],[1052,846,1142],[1445,1117,1400],[952,1086,1129],[1714,1089,1131],[1131,1089,1087],[1100,1139,788],[112,1050,1062],[1323,354,1296],[49,333,1141],[1142,982,1737],[79,1457,1091],[1088,1129,1086],[1102,1094,1127],[1127,1094,1732],[1100,1082,1139],[1082,1132,1139],[1082,1140,1132],[1150,1043,397],[60,1166,289],[1696,1146,1698],[1297,1202,1313],[409,1297,1313],[1234,1194,420],[1408,1391,1394],[424,1235,1243],[1203,309,1148],[485,477,447],[1152,1156,850],[1153,1149,1155],[1153,1157,1149],[1149,1152,1150],[1156,1154,1151],[776,1153,1155],[1157,1152,1149],[1217,1393,1208],[1156,1159,1154],[1153,1165,1157],[1165,1152,1157],[1159,1020,1154],[1161,1153,776],[1161,1165,1153],[1165,1158,1152],[1152,1158,1156],[1158,1159,1156],[1166,776,561],[1160,1161,776],[1161,1164,1165],[1161,1160,1164],[1158,1162,1159],[1159,1162,1020],[1270,1321,971],[1164,1170,1165],[1165,1162,1158],[1162,1163,1020],[588,788,925],[1166,1167,1160],[1165,1170,1162],[1160,1167,1164],[1162,1170,1163],[1179,1167,1166],[1167,1168,1164],[1164,1168,1170],[1168,1169,1170],[1234,1022,288],[802,39,866],[1179,1168,1167],[1169,1173,1170],[1170,1173,1163],[1173,1185,1163],[1360,1267,1364],[1169,1185,1173],[611,244,243],[900,1226,1376],[1260,1408,1350],[618,840,831],[1181,1183,1179],[1179,1184,1168],[1208,1274,1291],[1183,1184,1179],[1168,1184,1169],[1387,1395,1254],[1208,1204,1172],[1182,1197,1083],[1187,1083,1197],[1213,1183,1181],[1169,1207,1185],[135,857,991],[1013,1213,1181],[1189,1183,1213],[1183,1189,1184],[1169,1184,1207],[1207,1190,1185],[1180,1389,1288],[1191,1192,1640],[1640,1192,1090],[1090,1205,1654],[1654,1205,1182],[1188,1395,1187],[1126,743,1733],[788,859,925],[809,1234,1171],[1193,1197,1182],[1189,1199,1184],[1639,1191,1637],[1639,1212,1191],[1205,1193,1182],[1198,1187,1197],[1199,1207,1184],[332,1053,846],[1090,1192,1205],[117,1188,1187],[435,1188,117],[435,1206,1188],[1199,1189,1213],[420,816,1053],[1212,1215,1191],[117,1187,1198],[45,1206,435],[120,1132,1133],[874,1116,1210],[1191,1215,1192],[1193,1216,1197],[1216,1198,1197],[1199,1214,1207],[117,521,235],[1220,1311,1078],[1220,900,1311],[1653,1215,1212],[1192,1225,1205],[1205,1209,1193],[1209,1216,1193],[1389,1217,1172],[1207,1214,454],[171,557,1747],[1805,1078,1787],[1805,1219,1078],[1198,1216,868],[666,910,854],[1230,1231,1213],[1213,1231,1199],[1199,1231,1214],[1219,1220,1078],[1215,1221,1192],[1192,1221,1225],[1225,1228,1205],[1205,1228,1209],[1209,1228,1216],[1464,1325,1223],[1215,1227,1221],[1228,1480,1216],[1226,1653,1376],[1653,1249,1215],[1221,1240,1225],[1225,1240,1228],[839,761,840],[1238,1219,1805],[1238,1220,1219],[1232,1380,1375],[1226,1249,1653],[1221,1227,1240],[233,207,532],[110,1236,1230],[1248,1231,1230],[1231,454,1214],[1249,1227,1215],[1248,1056,1231],[489,959,944],[448,1240,284],[925,859,1242],[1805,1244,1238],[1252,1220,1238],[1252,921,1220],[1236,1251,1230],[1230,1251,1248],[1056,993,1231],[1031,1264,1263],[68,1186,157],[1227,1245,1240],[1103,1245,143],[1243,1235,612],[1252,95,921],[1249,1226,1237],[1390,1387,1254],[1120,384,830],[830,332,846],[1227,143,1245],[1315,1369,1358],[1356,1269,1386],[972,795,489],[1831,1224,310],[1250,1255,1251],[1251,1056,1248],[1256,1243,103],[658,358,175],[1620,1238,1244],[1620,1252,1238],[1506,95,1252],[104,1249,1237],[1249,143,1227],[1268,1419,1329],[634,806,231],[618,831,815],[924,1242,839],[1255,1270,1251],[1251,1270,1056],[866,925,1242],[103,29,1256],[424,1243,1256],[134,1651,752],[1250,917,1255],[1172,1204,1260],[1352,1036,1276],[1265,1201,1329],[804,1282,1259],[1259,1294,723],[335,1330,1305],[407,762,799],[875,856,1195],[32,158,344],[967,944,749],[372,125,42],[1175,1354,1261],[553,612,1235],[1259,1273,1294],[1294,1283,723],[757,78,158],[407,799,798],[901,51,52],[139,1386,1389],[1386,1269,1389],[1389,1269,1217],[1148,1590,1268],[1428,1449,1450],[804,1281,1282],[1273,1259,1282],[158,399,779],[771,407,798],[521,1098,235],[917,1312,1255],[1312,1270,1255],[1217,1269,1393],[1195,1108,634],[1110,1106,856],[1210,1691,1176],[27,1112,1145],[1296,27,1145],[1171,858,791],[704,1148,1290],[1430,1436,1437],[1282,1308,1273],[1300,943,1283],[1393,1355,1274],[720,1278,769],[1287,1059,1399],[1310,1388,1272],[1312,1321,1270],[851,1185,1190],[1296,1145,1304],[26,24,771],[51,910,631],[1329,1290,1268],[1290,1148,1268],[1298,1293,733],[1281,1293,1282],[1282,1293,1308],[1308,1299,1273],[1300,1283,1294],[1340,943,1300],[1340,1301,943],[407,754,762],[1287,1399,1295],[34,139,128],[1288,1172,1260],[120,1133,1114],[1306,1113,1511],[1464,1223,1292],[1299,1294,1273],[1299,1300,1294],[1286,1295,838],[1285,1247,1286],[1247,713,1286],[1201,1265,1390],[1378,1368,1357],[1482,1320,917],[917,1320,1312],[850,1156,1151],[588,39,413],[1324,1306,686],[789,1365,928],[1223,1326,1292],[1292,1326,1298],[869,1097,1311],[790,786,561],[1323,1304,932],[1323,1296,1304],[1317,1324,686],[1306,368,1113],[1325,1342,1223],[1326,1348,1298],[1293,1327,1308],[1308,1318,1299],[704,1290,1258],[1320,1321,1312],[761,120,1114],[1684,802,866],[1674,6,1727],[1316,1323,932],[1335,1337,1305],[1348,1327,1293],[1298,1348,1293],[1333,1300,1299],[1333,1343,1300],[1328,1301,1340],[1328,1314,1301],[838,1399,1319],[921,1237,900],[409,1391,1408],[1376,1653,677],[1281,804,1458],[1331,1324,1317],[1324,368,1306],[368,1338,1307],[1327,797,1308],[797,1345,1308],[1308,1345,1318],[1318,1333,1299],[1341,1147,1572],[923,1321,1320],[923,920,1321],[39,588,866],[1141,1323,1316],[1330,1335,1305],[1337,1335,1336],[1339,1332,1325],[1223,1342,1326],[1342,1348,1326],[1348,797,1327],[1345,1333,1318],[1343,1340,1300],[1419,1265,1329],[1347,1320,1584],[1535,1141,1316],[1078,1311,582],[1344,1335,1330],[753,1331,1337],[368,1324,1331],[753,368,1331],[1332,1485,1325],[1325,1485,1342],[787,1343,1333],[137,1328,1340],[973,1341,1479],[406,1147,1341],[1171,1234,858],[1141,1535,1322],[49,1141,1322],[1344,1336,1335],[973,908,1341],[766,1347,1584],[1347,923,1320],[781,49,1322],[368,232,1338],[787,1340,1343],[787,137,1340],[568,1346,973],[58,1147,406],[442,1334,1147],[58,442,1147],[442,766,1334],[90,923,1347],[428,368,753],[779,1333,1345],[825,787,1333],[137,1349,1328],[1328,1346,568],[908,406,1341],[924,866,1242],[1336,753,1337],[428,232,368],[1115,777,1098],[1348,28,797],[797,779,1345],[779,825,1333],[1007,908,973],[583,1351,880],[1365,1246,977],[1658,145,1710],[1310,796,1388],[718,245,165],[1302,1272,1254],[1174,1351,583],[1174,715,1351],[1358,1260,1204],[1374,1373,1276],[1377,1374,1276],[678,1362,1382],[1377,1276,254],[139,34,40],[1008,1174,583],[1396,1286,1319],[768,891,457],[1316,932,1535],[1289,1371,1360],[182,736,864],[1355,1364,1274],[860,1367,1354],[1362,1222,1382],[1376,869,1311],[1590,1411,198],[1232,1375,877],[1394,1295,1286],[880,1356,1386],[880,1351,1356],[1211,1059,1287],[197,678,1405],[880,1386,1003],[1368,1253,1357],[1357,1253,1036],[715,1289,1364],[1354,1367,703],[1383,877,1375],[1266,1288,1260],[1373,1374,703],[1372,1289,1174],[1303,1366,1378],[1351,715,1355],[1665,1666,624],[1309,1357,1036],[900,1237,1226],[1174,1289,715],[1337,1331,1317],[1360,1303,1359],[1267,1354,1175],[1241,1284,1414],[1377,254,929],[1385,855,836],[1396,1319,1436],[1361,1366,1303],[1381,1368,1378],[1313,1211,1391],[1368,1385,1363],[813,82,861],[1058,1280,807],[893,519,892],[1359,1303,860],[1382,1350,1247],[1371,1303,1360],[1267,1175,1271],[769,1286,1396],[712,1837,82],[1366,1385,1381],[1365,796,1310],[1003,1386,40],[780,1371,1370],[561,862,790],[1284,1380,864],[1449,1428,177],[611,1280,1058],[1284,1375,1380],[926,506,1241],[1305,1337,1317],[309,1203,208],[1388,1201,1390],[1309,1036,1352],[1377,929,1411],[1399,1059,1257],[1112,70,1145],[289,1166,561],[1288,1389,1172],[1362,37,1180],[713,1394,1286],[1355,1393,1269],[1401,1423,941],[1274,1271,1384],[860,1378,1367],[715,1364,1355],[677,1406,869],[1297,1358,1202],[1388,1258,1329],[1180,1288,1266],[1008,583,880],[1524,1425,1463],[1390,1403,1387],[1278,1379,1247],[1278,1247,1285],[964,1278,1262],[1358,1369,1202],[1715,1699,1726],[926,1241,1414],[1341,1572,1479],[926,930,916],[1397,51,781],[409,1358,1297],[1236,436,301],[1376,677,869],[1351,1355,1356],[758,1534,1523],[1378,1357,1367],[977,1211,1365],[1135,1136,854],[1394,1391,1295],[1266,1260,1222],[1365,1302,1246],[1232,877,844],[736,930,864],[1408,1358,409],[1508,817,1523],[1381,1385,1368],[718,854,910],[854,718,1135],[1382,1222,1350],[1391,1211,1287],[1391,1287,1295],[1257,1651,134],[1414,1284,864],[1291,1369,1315],[1202,928,1313],[86,1400,1413],[1413,1200,86],[1263,1625,1031],[1413,1400,1404],[1002,1664,1834],[930,926,1414],[1399,1257,134],[520,316,596],[1393,1274,1208],[1657,1655,1712],[1407,1404,1400],[1404,1410,1413],[1649,1229,1406],[1362,1266,1222],[1384,1271,1175],[900,1376,1311],[1274,1384,1291],[1291,1384,1431],[1433,1396,1436],[1267,1359,1354],[309,1353,703],[838,1319,1286],[1407,1410,1404],[441,1518,773],[1241,123,1428],[1622,1521,1224],[1217,1208,1172],[1130,793,1076],[425,1409,1481],[1481,1409,1533],[1303,1378,860],[1350,1408,1394],[1246,1651,977],[1289,1360,1364],[1727,1694,1623],[1417,1407,1533],[1417,1410,1407],[1406,1650,1649],[1319,134,1437],[1414,864,930],[1406,1229,1124],[1354,1359,860],[1433,769,1396],[1417,1533,1409],[1416,1413,1410],[1415,1416,1410],[95,1237,921],[1392,1254,1395],[1360,1359,1267],[1258,1290,1329],[1180,128,1389],[1420,1409,425],[1417,1418,1410],[1418,1415,1410],[1422,1077,1416],[1247,1350,1394],[37,43,1180],[1204,1315,1358],[1428,1383,1375],[1356,1355,1269],[1409,1418,1417],[1302,45,1246],[1421,1416,1415],[1421,1422,1416],[1422,1494,1077],[957,720,938],[1423,1409,1420],[1423,1418,1409],[752,434,1438],[1260,1358,1408],[1363,1385,785],[1423,1426,1418],[1426,1424,1418],[1229,1649,1124],[1222,1260,1350],[1508,1523,1137],[1278,1285,769],[1482,917,144],[1418,1424,1415],[1425,1422,1421],[1425,1524,1422],[1272,1388,1390],[1391,409,1313],[1378,1366,1381],[1371,483,1361],[720,1262,1278],[29,103,159],[1271,1364,1267],[1424,1427,1415],[1537,1522,1518],[134,752,1438],[1420,934,941],[1428,1375,1284],[1277,1224,1831],[1362,1180,1266],[1401,1426,1423],[1577,1369,1291],[268,483,262],[1383,1450,1456],[1384,1175,1431],[1430,1415,1427],[1430,1421,1415],[1430,1425,1421],[1379,1382,1247],[1252,1553,1429],[1206,1392,1395],[1433,1430,1427],[309,208,1353],[1272,1390,1254],[1361,483,1366],[1523,817,808],[1302,1254,1392],[1371,1361,1303],[1426,1435,1424],[1435,1433,1424],[1433,1427,1424],[720,769,1433],[796,1258,1388],[1590,1419,1268],[1289,1372,1371],[1305,1317,1509],[998,1372,1174],[40,1386,139],[1261,1354,703],[1364,1271,1274],[134,1438,1437],[1436,1319,1437],[1317,686,1509],[1484,932,1304],[1434,1432,1509],[1420,65,934],[931,930,736],[1367,1357,1309],[1372,1370,1371],[1204,1208,1315],[1426,938,1435],[1368,1363,1253],[1207,454,1190],[1302,1310,1272],[309,1377,390],[390,1377,1411],[1370,1372,998],[1411,1590,1148],[720,1433,1435],[1450,1383,1428],[1379,678,1382],[1405,678,1379],[1208,1291,1315],[1399,134,1319],[1367,1309,1373],[1373,1352,1276],[596,741,593],[553,1264,612],[1433,1436,1430],[1437,1438,1430],[964,1405,1379],[1373,1309,1352],[1265,1403,1390],[1233,1618,1434],[1365,1310,1302],[789,796,1365],[720,1435,938],[128,139,1389],[1466,933,1525],[1191,1640,1637],[1314,1442,943],[1141,353,1323],[1489,1138,1474],[1462,1477,1440],[1474,1138,1488],[1442,1314,1443],[1446,1030,1546],[1484,1145,697],[1549,1443,1445],[1470,1572,1468],[1397,1239,1507],[1649,1825,1824],[1259,1440,1477],[1451,1450,1449],[978,1446,652],[1454,1456,1451],[1451,1456,1450],[341,1507,595],[933,1547,79],[804,1452,1060],[1454,1455,1456],[1398,1460,1454],[1455,877,1456],[1277,1831,1825],[804,1060,1458],[1339,1459,1595],[1314,1104,1443],[933,1448,1547],[147,1460,1398],[1460,1461,1454],[1454,1461,1455],[1292,1125,1464],[417,1531,1480],[1459,1339,1325],[811,1756,335],[1512,936,1490],[777,1529,1098],[147,1475,1460],[1464,253,1459],[836,855,482],[1487,1486,1307],[1104,1501,1443],[1439,1200,1532],[1475,1469,1460],[1460,1469,1461],[1325,1464,1459],[1277,1825,1649],[1532,1200,1077],[844,877,1455],[1572,933,1466],[1479,568,973],[1509,335,1305],[1339,1595,1759],[1469,1476,1461],[1461,1476,1455],[1104,1470,1468],[1464,1472,253],[1117,1091,1407],[1756,1542,335],[1206,1395,1188],[335,1542,1330],[835,844,1455],[1471,1598,1462],[1491,1442,1441],[835,1455,1476],[1441,1442,1443],[1489,1474,1473],[1251,1236,1250],[1030,1452,1477],[1598,1439,1532],[978,1598,1492],[1426,1401,938],[1448,1584,1482],[1724,1497,1475],[1475,1497,1469],[1484,1535,932],[1307,1486,1113],[1487,696,1495],[1037,1491,1441],[1030,1446,936],[1453,1487,1495],[696,1467,1495],[1138,1489,1483],[1497,1143,1469],[1469,1143,1476],[652,1598,978],[850,1043,1150],[1482,1584,1320],[1731,98,1697],[1113,1554,1573],[1524,1532,1494],[1496,1467,696],[1452,1259,1477],[296,1504,1497],[1504,1143,1497],[1143,1499,1476],[718,910,1498],[868,1540,1528],[817,1253,810],[1490,696,1487],[1440,1491,1037],[1510,676,595],[1488,1492,1517],[781,1239,1397],[1467,1519,1503],[1500,1307,1759],[1149,397,452],[1504,1514,1143],[1514,842,1143],[1125,733,1458],[1503,1531,1555],[1276,1036,1137],[1440,723,1123],[1036,1508,1137],[817,1508,1253],[103,883,1112],[1458,731,1472],[1512,1490,1487],[1487,1453,1486],[1138,978,1488],[1036,1253,1508],[1398,149,147],[1474,1517,1513],[1125,1458,1472],[1486,1453,1554],[1518,1534,758],[345,1058,1062],[928,1202,1369],[1554,1541,1505],[1464,1125,1472],[1504,764,1514],[304,426,573],[1505,742,1506],[1479,1572,1478],[1519,1483,1489],[833,716,1069],[1522,1534,1518],[1115,1513,777],[811,335,1432],[1591,1533,1407],[777,1517,1529],[1513,1517,777],[1498,910,1397],[1069,1539,833],[833,1539,1537],[1522,1551,1534],[1534,1551,1523],[1538,1137,1523],[910,51,1397],[1367,1373,703],[1466,1525,1468],[157,1186,1832],[1429,1511,1506],[1573,1505,1506],[1259,1452,804],[1503,1495,1467],[262,483,780],[1572,1466,1468],[1536,1556,716],[716,1556,1069],[1544,1523,1551],[1544,1538,1523],[1511,1573,1506],[933,1572,1448],[1543,1537,1539],[1537,1543,1522],[1091,933,79],[1519,1540,1545],[1549,1445,86],[1069,1548,1539],[1548,1543,1539],[1543,1551,1522],[1500,1487,1307],[68,784,1186],[1552,1544,1551],[1550,1538,1544],[1538,1550,1137],[1519,1473,1540],[1547,1448,1482],[1560,1563,1536],[1536,1563,1556],[1556,1548,1069],[1543,1558,1551],[1137,1550,1276],[1453,1495,1555],[1561,1543,1548],[1543,1561,1558],[1558,1566,1551],[1552,1550,1544],[1569,1557,1550],[1557,1276,1550],[1276,1557,254],[1531,1503,1480],[1535,1530,1510],[1545,1503,1519],[1547,1482,79],[1566,1552,1551],[1552,1569,1550],[1503,1545,1480],[703,1377,309],[1625,675,756],[1037,1441,88],[929,254,1557],[849,1567,1560],[1556,1564,1548],[1492,1529,1517],[1252,1429,1506],[1553,1027,1429],[1453,1555,1541],[1554,1453,1541],[1233,686,1553],[1328,1104,1314],[1564,1576,1548],[1548,1576,1561],[1557,1562,929],[1520,112,1668],[1483,1446,1138],[778,1570,1567],[1563,1564,1556],[1561,1565,1558],[1565,1566,1558],[1569,1552,1566],[1562,1557,1569],[1530,1535,1484],[1387,1402,1395],[1621,1634,1387],[1567,1568,1560],[1560,1568,1563],[1571,1569,1566],[1344,1330,1542],[1577,1431,1353],[1638,233,304],[1524,1463,1529],[1353,1431,1175],[1077,1200,1413],[1478,1470,1104],[1568,1575,1563],[1563,1575,1564],[1575,1576,1564],[1561,1576,1565],[1565,1574,1566],[1562,1515,929],[1555,96,1541],[1531,417,96],[1555,1531,96],[1246,45,1651],[208,1577,1353],[1586,1568,1567],[1574,1571,1566],[1571,1583,1569],[1474,1513,1528],[1239,1322,1535],[1478,1572,1470],[1570,1586,1567],[1488,1517,1474],[8,1833,1837],[1123,1442,1491],[1589,1568,1586],[1576,1594,1565],[1565,1594,1574],[1562,198,1515],[1559,1441,1549],[1441,1443,1549],[1135,425,1481],[1239,1535,1507],[1595,1487,1500],[1570,1585,1586],[1589,1578,1568],[1568,1578,1575],[1579,1569,1583],[1177,1577,208],[115,1236,110],[1578,1593,1575],[1587,1576,1575],[1576,1581,1594],[1571,1582,1583],[1588,1579,1583],[1579,1580,1562],[1569,1579,1562],[1562,1580,198],[1027,1511,1429],[1589,1593,1578],[1587,1581,1576],[1582,1574,1594],[1574,1582,1571],[1575,1593,1587],[1583,1582,1588],[1580,1590,198],[1587,1593,1581],[1505,1541,96],[1369,1577,1177],[1573,1554,1505],[1479,1478,568],[1585,1589,1586],[1369,1177,704],[766,1584,1334],[977,1257,1059],[1091,1591,1407],[1591,1091,1457],[1585,1604,1589],[1581,1592,1594],[1602,1582,1594],[1582,1608,1588],[1608,1579,1588],[1579,1597,1580],[1419,1590,1580],[1597,1419,1580],[1431,1577,1291],[1589,1604,1593],[1601,1596,1593],[1593,1596,1581],[1306,1511,1027],[1511,1113,1573],[1786,1412,1585],[1412,1604,1585],[1581,1596,1592],[1592,1602,1594],[1608,1599,1579],[1599,1611,1579],[1579,1611,1597],[1512,1487,253],[1519,1489,1473],[1545,1540,868],[1083,1187,1402],[1117,1407,1400],[1292,733,1125],[284,1240,1245],[1604,1600,1593],[1600,1601,1593],[1582,1607,1608],[789,1369,704],[1467,1483,1519],[1601,1613,1596],[1596,1613,1592],[1602,1607,1582],[1620,1553,1252],[1601,1605,1613],[1592,1613,1602],[1602,1606,1607],[1608,1609,1599],[1599,1609,1611],[1603,1597,1611],[1265,1419,1597],[1603,1265,1597],[1392,1206,45],[928,1369,789],[1474,1528,1473],[1104,1468,1501],[1412,1521,1604],[1613,1631,1602],[1607,1610,1608],[1608,1610,1609],[1476,863,835],[1495,1503,1555],[1498,1397,718],[1520,1668,7],[1604,1615,1600],[1605,1601,1600],[1602,1631,1606],[1606,1610,1607],[1759,1595,1500],[1292,1298,733],[1615,1604,1521],[1609,1603,1611],[652,1462,1598],[1468,1525,1445],[1443,1501,1445],[1134,1723,150],[1521,1622,1615],[1615,1616,1600],[1616,1605,1600],[1605,1616,1612],[1605,1612,1613],[1612,1617,1613],[1613,1617,1631],[1606,1614,1610],[1265,1603,1403],[448,417,1480],[1595,253,1487],[1501,1468,1445],[1383,1456,877],[1490,1496,696],[1610,1627,1609],[1627,1621,1609],[1591,1481,1533],[1598,1471,1439],[1353,1261,703],[1606,1631,1614],[1609,1621,1403],[1532,1077,1494],[1528,1115,513],[1546,652,1446],[1211,928,1365],[1540,1473,1528],[1078,1502,1787],[1425,1430,1438],[1617,1630,1631],[959,749,944],[566,570,603],[1716,310,1521],[775,452,397],[1615,1636,1616],[1616,1636,1612],[1610,1632,1627],[789,704,1258],[1457,1481,1591],[1769,1756,811],[207,1629,722],[1629,1625,722],[1224,1277,1622],[1622,1636,1615],[1636,1646,1612],[1612,1630,1617],[1631,1626,1614],[1614,1632,1610],[1506,104,95],[1481,1457,1136],[1123,943,1442],[936,1446,1496],[1499,863,1476],[1629,1031,1625],[1233,1509,686],[1633,1634,1621],[1621,1387,1403],[1472,1512,253],[1177,208,704],[1277,1636,1622],[1626,1632,1614],[1627,1633,1621],[936,1496,1490],[185,1454,1451],[731,936,1512],[1638,1635,207],[553,1263,1264],[1653,1212,1639],[1633,1627,1632],[1633,1387,1634],[1458,1060,731],[368,1307,1113],[1264,1031,1629],[1152,850,1150],[1277,1644,1636],[1646,1637,1612],[1637,1630,1612],[1647,1631,1630],[1647,1626,1631],[1422,1524,1494],[1030,652,1546],[1635,1629,207],[1635,1264,1629],[1639,1646,1636],[1637,1640,1630],[1641,1632,1626],[1632,1642,1633],[1633,1643,1387],[842,1499,1143],[865,863,1499],[1516,978,1492],[67,1130,784],[1103,1505,96],[88,1441,1200],[1644,1639,1636],[1640,1647,1630],[1647,1641,1626],[1633,1648,1643],[1492,1532,1524],[1488,1516,1492],[1037,1471,1462],[612,1264,1635],[1502,1078,1124],[1641,1642,1632],[1648,1633,1642],[1528,513,868],[1492,1598,1532],[1095,991,760],[679,157,1664],[760,1128,1785],[1277,1650,1644],[320,1022,244],[1559,1549,86],[1676,1520,7],[1488,978,1516],[1095,760,1785],[1128,384,1120],[304,312,1638],[1081,1638,312],[1081,1635,1638],[103,612,1635],[652,1477,1462],[1650,1645,1644],[1645,1639,1644],[1639,1637,1646],[1640,1090,1647],[1654,1641,1647],[1654,1642,1641],[1654,1648,1642],[1643,1402,1387],[1432,335,1509],[384,1128,760],[1652,312,304],[103,1243,612],[1277,1649,1650],[1090,1654,1647],[1643,1648,1402],[1134,324,1675],[679,68,157],[1652,1081,312],[1136,301,803],[1653,1639,1645],[723,1440,1259],[803,854,1136],[104,1506,742],[1112,159,103],[1654,1083,1648],[977,1651,1257],[1397,1507,718],[1081,103,1635],[1650,677,1645],[1083,1402,1648],[1706,1655,1671],[1624,1704,1711],[767,2,1],[608,794,294],[1678,1683,1686],[767,1682,2],[1669,1692,1675],[296,1681,764],[1671,1656,1672],[17,1673,1679],[1706,1671,1673],[1662,1674,1699],[1655,1657,1656],[418,84,915],[1526,1514,764],[1658,1657,567],[870,1695,764],[813,1697,98],[1659,821,5],[60,1013,848],[1013,110,1213],[661,1038,1692],[1660,1703,17],[1693,1673,17],[1663,1715,1743],[1013,115,110],[344,1733,32],[1670,1663,1743],[1670,1743,1738],[1677,1670,1738],[1661,4,3],[1084,1683,1678],[1728,793,1130],[1683,1767,1196],[1677,1738,1196],[1279,1786,853],[294,1038,608],[1279,1689,1786],[870,18,1708],[870,1680,1695],[1705,10,1670],[1084,1767,1683],[1196,1738,1686],[1750,870,1681],[1750,18,870],[1773,1703,1660],[1135,47,425],[150,323,1134],[1707,1655,1706],[1741,344,1687],[1685,1691,1684],[1684,1691,802],[1672,1656,0],[1038,124,608],[1671,1672,1690],[1628,1218,1767],[1686,1275,1667],[1493,1750,1681],[1773,18,1750],[1773,1660,18],[1679,1671,16],[1735,1706,1673],[1667,1678,1686],[1688,1658,1],[1656,1688,0],[1293,1281,1458],[1698,1678,1667],[1696,1130,1722],[1698,1667,1696],[1715,1662,1699],[1692,1038,294],[1682,767,357],[1669,661,1692],[802,1702,824],[1028,1067,1784],[822,1624,778],[119,813,861],[1218,1670,1677],[1703,1693,17],[1658,1710,1],[750,1730,1729],[1701,750,1729],[1693,1735,1673],[1731,1694,98],[1691,1702,802],[783,1729,1719],[1680,870,1708],[1707,1709,1655],[533,756,675],[1691,1210,1702],[11,1705,1670],[1767,1218,1196],[1218,1677,1196],[1664,1716,1721],[1729,1725,1719],[1729,1072,1725],[1210,1116,1702],[1702,1720,824],[1682,1661,2],[1713,1719,1721],[1716,1786,1713],[1730,1722,1072],[294,1717,1811],[1692,294,1666],[1659,680,821],[824,1720,1714],[1726,1731,1718],[345,1062,1045],[1738,1743,1275],[1075,1089,1071],[783,1719,1689],[1275,684,1728],[1692,1666,1665],[1675,1692,1665],[294,1811,1666],[1716,1664,310],[1678,1698,1700],[6,9,1727],[676,649,595],[381,31,361],[1723,1804,1772],[1727,9,1694],[1720,1089,1714],[1786,1716,1412],[1683,1196,1686],[1718,1697,1085],[1116,1739,1702],[1739,1734,1720],[1702,1739,1720],[1089,1720,1734],[509,748,1745],[1743,1715,1726],[1717,294,794],[1116,1732,1739],[1718,1731,1697],[1696,1667,1130],[1134,1665,1723],[1694,712,98],[101,1687,102],[391,1736,101],[662,636,642],[1734,1447,1089],[1089,1447,1071],[436,99,493],[1689,1279,783],[1485,1465,1342],[1736,1687,101],[344,1741,1733],[1741,1742,1733],[1735,829,1706],[829,1707,1706],[1485,1332,1465],[952,1126,1742],[1747,1447,1734],[879,892,645],[1730,1146,1696],[829,1709,1707],[1709,1712,1655],[118,1739,1732],[1332,1744,1465],[1687,1749,1741],[1741,1758,1742],[679,1072,68],[1072,1722,68],[118,1747,1739],[1747,1734,1739],[1465,1744,1736],[1736,1740,1687],[1704,1701,783],[1665,624,1723],[1722,1130,67],[1025,1055,467],[1444,14,1701],[558,522,530],[1657,1658,1688],[1339,1746,1332],[1332,1748,1744],[1687,1740,1749],[1741,1749,1758],[1109,952,1742],[1747,118,141],[1671,1690,1628],[1671,1628,16],[1657,1688,1656],[1745,748,1447],[357,767,1710],[1746,1748,1332],[1146,1700,1698],[1759,1307,1338],[1239,781,1322],[1745,1447,1747],[522,1745,1747],[316,717,595],[148,1493,1724],[1758,1109,1742],[1725,1072,679],[726,719,1661],[1695,1680,1526],[1772,1750,1493],[148,1772,1493],[1542,1751,1101],[952,1109,1086],[1744,1752,1736],[1736,1752,1740],[1753,1755,1740],[391,1342,1736],[821,112,1520],[557,530,1747],[530,522,1747],[994,879,645],[1542,1756,1751],[1813,1693,1703],[1746,1754,1748],[1748,1764,1744],[1752,1757,1740],[1740,1757,1753],[1749,1740,1755],[1755,1763,1749],[1763,1758,1749],[1275,1743,684],[1813,1735,1693],[1107,1099,1101],[1723,624,1804],[1403,1603,1609],[1748,1754,1764],[1744,1757,1752],[1760,1109,1758],[1465,1736,1342],[436,115,99],[1686,1738,1275],[1751,1766,1101],[1759,1754,1746],[1755,1753,1763],[1570,1279,853],[1701,1146,750],[1655,1656,1671],[11,1670,1218],[1761,1751,1756],[1766,1107,1101],[1726,1623,1731],[1711,1704,1279],[67,784,68],[558,530,545],[1620,1618,1233],[1769,1761,1756],[102,1687,344],[1338,1754,1759],[1754,232,1764],[1744,1765,1757],[1757,1763,1753],[1762,1760,1758],[1760,1771,1109],[1339,1759,1746],[1675,1665,1134],[1730,1696,1722],[1774,1751,1761],[1766,1780,1107],[1780,1105,1107],[1764,1765,1744],[1763,1762,1758],[1772,1773,1750],[1811,1813,1703],[1434,1769,1432],[1780,1766,1751],[232,1781,1764],[1711,1279,1570],[1688,1,0],[1774,1780,1751],[1764,1781,1765],[1765,1768,1757],[1757,1768,1763],[1777,1782,1760],[1762,1777,1760],[1769,1774,1761],[1763,1777,1762],[1760,1782,1771],[232,1737,1781],[1768,1776,1763],[272,255,774],[1669,994,661],[1618,1769,1434],[1765,589,1768],[1770,1777,1763],[1701,1729,783],[1783,1774,1769],[1789,1780,1774],[589,1775,1768],[1776,1770,1763],[1782,1778,1771],[1771,1778,1070],[624,1703,1773],[624,1811,1703],[1620,1244,1618],[1779,1769,1618],[1779,1783,1769],[739,1735,1813],[1775,1776,1768],[1790,1777,1770],[1777,1778,1782],[1725,679,1721],[733,1293,1458],[1802,1618,1244],[1802,1779,1618],[1788,1783,1779],[1789,1774,1783],[1796,1780,1789],[1796,1119,1780],[1823,1817,325],[1699,1727,1623],[750,1146,1730],[1497,1724,296],[1128,1119,1796],[61,62,71],[1131,413,824],[1114,1111,249],[1784,1776,1775],[1123,723,1283],[1791,1788,1779],[1788,1789,1783],[1095,1797,1074],[1028,1784,1775],[1784,1770,1776],[1777,1790,1778],[1793,1797,1095],[1797,1800,1074],[1798,1790,1770],[1805,1802,1244],[1802,1791,1779],[1792,1789,1788],[1793,1785,1128],[1793,1095,1785],[1074,1800,1619],[741,457,593],[1798,1770,1784],[1798,1794,1790],[1786,1689,1713],[684,1726,1718],[1728,1085,793],[1795,1787,1502],[1806,1802,1805],[1819,1788,1791],[1067,1798,1784],[1790,1794,1778],[1795,1502,1124],[1801,1805,1787],[1807,1791,1802],[1807,1819,1791],[1819,1792,1788],[1799,1128,1796],[994,645,661],[684,1085,1728],[684,1718,1085],[1699,1623,1726],[1801,1787,1795],[1808,1789,1792],[1808,1796,1789],[1799,1793,1128],[1809,1797,1793],[1809,1803,1797],[1803,1800,1797],[1067,1794,1798],[774,255,1778],[1673,1671,1679],[879,1669,888],[19,1807,1802],[1810,1619,1800],[879,994,1669],[1794,774,1778],[1723,1772,148],[1804,1773,1772],[1814,1795,1124],[1649,1814,1124],[1814,1801,1795],[1812,1806,1805],[19,1802,1806],[19,1819,1807],[1810,1800,1803],[1804,624,1773],[1714,1131,824],[1801,1812,1805],[1812,19,1806],[1808,1792,1819],[1799,1809,1793],[1821,1810,1803],[1717,739,1813],[1061,1619,1822],[1794,1817,774],[79,1482,144],[1815,1801,1814],[23,1819,19],[589,1028,1775],[1817,1823,774],[1689,1719,1713],[1824,1814,1649],[1827,1818,1801],[1818,1812,1801],[1818,19,1812],[1818,20,19],[1816,1809,1799],[1821,1803,1809],[1822,1619,1810],[124,708,608],[1663,10,1715],[1815,1827,1801],[1820,1808,1819],[23,1820,1819],[603,1810,1821],[603,1822,1810],[1085,1697,793],[1628,1690,11],[1527,1704,1624],[1730,1072,1729],[1526,1444,1704],[1526,1680,1444],[1704,1444,1701],[1816,1821,1809],[1722,67,68],[317,272,1823],[1716,1713,1721],[16,1628,1767],[1527,1526,1704],[1824,1826,1814],[1814,1826,1815],[1818,21,20],[1835,1808,1820],[603,570,1822],[226,1070,1778],[1013,1181,1179],[1721,679,1664],[1717,1813,1811],[1828,1827,1815],[22,1820,23],[22,1835,1820],[1830,603,1821],[719,1659,5],[643,567,1657],[1717,794,739],[1825,1826,1824],[1828,1815,1826],[1829,21,1818],[1808,1835,13],[4,719,5],[10,1662,1715],[1828,1832,1827],[1832,1818,1827],[12,1833,1816],[1833,1821,1816],[1833,1830,1821],[14,1146,1701],[1186,1829,1818],[1280,603,1830],[14,1700,1146],[1667,1728,1130],[1825,1834,1826],[1834,1828,1826],[1832,1186,1818],[1836,13,1835],[1624,1711,1570],[778,1624,1570],[1719,1725,1721],[1002,1825,1831],[1002,1834,1825],[1834,1832,1828],[1186,21,1829],[1836,1835,22],[1837,1833,12],[1280,1830,1833],[1667,1275,1728],[16,1767,1084],[589,1765,1838],[1765,1781,1838],[1781,1737,1838],[1737,982,1838],[982,1053,1838],[1053,816,1838],[816,589,1838]]
    
    },{}],5:[function(require,module,exports){
    module.exports = clamp
    
    function clamp(value, min, max) {
      return min < max
        ? (value < min ? min : value > max ? max : value)
        : (value < max ? max : value > min ? min : value)
    }
    
    },{}],6:[function(require,module,exports){
    module.exports = function () {
        for (var i = 0; i < arguments.length; i++) {
            if (arguments[i] !== undefined) return arguments[i];
        }
    };
    
    },{}],7:[function(require,module,exports){
    module.exports = defaultProperty
    
    function defaultProperty (get, set) {
      return {
        configurable: true,
        enumerable: true,
        get: get,
        set: set
      }
    }
    
    },{}],8:[function(require,module,exports){
    module.exports = function(dtype) {
      switch (dtype) {
        case 'int8':
          return Int8Array
        case 'int16':
          return Int16Array
        case 'int32':
          return Int32Array
        case 'uint8':
          return Uint8Array
        case 'uint16':
          return Uint16Array
        case 'uint32':
          return Uint32Array
        case 'float32':
          return Float32Array
        case 'float64':
          return Float64Array
        case 'array':
          return Array
        case 'uint8_clamped':
          return Uint8ClampedArray
      }
    }
    
    },{}],9:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    function EventEmitter() {
      this._events = this._events || {};
      this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;
    
    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;
    
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;
    
    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;
    
    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function(n) {
      if (!isNumber(n) || n < 0 || isNaN(n))
        throw TypeError('n must be a positive number');
      this._maxListeners = n;
      return this;
    };
    
    EventEmitter.prototype.emit = function(type) {
      var er, handler, len, args, i, listeners;
    
      if (!this._events)
        this._events = {};
    
      // If there is no 'error' event listener then throw.
      if (type === 'error') {
        if (!this._events.error ||
            (isObject(this._events.error) && !this._events.error.length)) {
          er = arguments[1];
          if (er instanceof Error) {
            throw er; // Unhandled 'error' event
          } else {
            // At least give some kind of context to the user
            var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
            err.context = er;
            throw err;
          }
        }
      }
    
      handler = this._events[type];
    
      if (isUndefined(handler))
        return false;
    
      if (isFunction(handler)) {
        switch (arguments.length) {
          // fast cases
          case 1:
            handler.call(this);
            break;
          case 2:
            handler.call(this, arguments[1]);
            break;
          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          // slower
          default:
            args = Array.prototype.slice.call(arguments, 1);
            handler.apply(this, args);
        }
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1);
        listeners = handler.slice();
        len = listeners.length;
        for (i = 0; i < len; i++)
          listeners[i].apply(this, args);
      }
    
      return true;
    };
    
    EventEmitter.prototype.addListener = function(type, listener) {
      var m;
    
      if (!isFunction(listener))
        throw TypeError('listener must be a function');
    
      if (!this._events)
        this._events = {};
    
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (this._events.newListener)
        this.emit('newListener', type,
                  isFunction(listener.listener) ?
                  listener.listener : listener);
    
      if (!this._events[type])
        // Optimize the case of one listener. Don't need the extra array object.
        this._events[type] = listener;
      else if (isObject(this._events[type]))
        // If we've already got an array, just append.
        this._events[type].push(listener);
      else
        // Adding the second element, need to change to array.
        this._events[type] = [this._events[type], listener];
    
      // Check for listener leak
      if (isObject(this._events[type]) && !this._events[type].warned) {
        if (!isUndefined(this._maxListeners)) {
          m = this._maxListeners;
        } else {
          m = EventEmitter.defaultMaxListeners;
        }
    
        if (m && m > 0 && this._events[type].length > m) {
          this._events[type].warned = true;
          console.error('(node) warning: possible EventEmitter memory ' +
                        'leak detected. %d listeners added. ' +
                        'Use emitter.setMaxListeners() to increase limit.',
                        this._events[type].length);
          if (typeof console.trace === 'function') {
            // not supported in IE 10
            console.trace();
          }
        }
      }
    
      return this;
    };
    
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    
    EventEmitter.prototype.once = function(type, listener) {
      if (!isFunction(listener))
        throw TypeError('listener must be a function');
    
      var fired = false;
    
      function g() {
        this.removeListener(type, g);
    
        if (!fired) {
          fired = true;
          listener.apply(this, arguments);
        }
      }
    
      g.listener = listener;
      this.on(type, g);
    
      return this;
    };
    
    // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener = function(type, listener) {
      var list, position, length, i;
    
      if (!isFunction(listener))
        throw TypeError('listener must be a function');
    
      if (!this._events || !this._events[type])
        return this;
    
      list = this._events[type];
      length = list.length;
      position = -1;
    
      if (list === listener ||
          (isFunction(list.listener) && list.listener === listener)) {
        delete this._events[type];
        if (this._events.removeListener)
          this.emit('removeListener', type, listener);
    
      } else if (isObject(list)) {
        for (i = length; i-- > 0;) {
          if (list[i] === listener ||
              (list[i].listener && list[i].listener === listener)) {
            position = i;
            break;
          }
        }
    
        if (position < 0)
          return this;
    
        if (list.length === 1) {
          list.length = 0;
          delete this._events[type];
        } else {
          list.splice(position, 1);
        }
    
        if (this._events.removeListener)
          this.emit('removeListener', type, listener);
      }
    
      return this;
    };
    
    EventEmitter.prototype.removeAllListeners = function(type) {
      var key, listeners;
    
      if (!this._events)
        return this;
    
      // not listening for removeListener, no need to emit
      if (!this._events.removeListener) {
        if (arguments.length === 0)
          this._events = {};
        else if (this._events[type])
          delete this._events[type];
        return this;
      }
    
      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        for (key in this._events) {
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = {};
        return this;
      }
    
      listeners = this._events[type];
    
      if (isFunction(listeners)) {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        while (listeners.length)
          this.removeListener(type, listeners[listeners.length - 1]);
      }
      delete this._events[type];
    
      return this;
    };
    
    EventEmitter.prototype.listeners = function(type) {
      var ret;
      if (!this._events || !this._events[type])
        ret = [];
      else if (isFunction(this._events[type]))
        ret = [this._events[type]];
      else
        ret = this._events[type].slice();
      return ret;
    };
    
    EventEmitter.prototype.listenerCount = function(type) {
      if (this._events) {
        var evlistener = this._events[type];
    
        if (isFunction(evlistener))
          return 1;
        else if (evlistener)
          return evlistener.length;
      }
      return 0;
    };
    
    EventEmitter.listenerCount = function(emitter, type) {
      return emitter.listenerCount(type);
    };
    
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    
    function isUndefined(arg) {
      return arg === void 0;
    }
    
    },{}],10:[function(require,module,exports){
    /*eslint new-cap:0*/
    var dtype = require('dtype')
    
    module.exports = flattenVertexData
    
    function flattenVertexData (data, output, offset) {
      if (!data) throw new TypeError('must specify data as first parameter')
      offset = +(offset || 0) | 0
    
      if (Array.isArray(data) && (data[0] && typeof data[0][0] === 'number')) {
        var dim = data[0].length
        var length = data.length * dim
        var i, j, k, l
    
        // no output specified, create a new typed array
        if (!output || typeof output === 'string') {
          output = new (dtype(output || 'float32'))(length + offset)
        }
    
        var dstLength = output.length - offset
        if (length !== dstLength) {
          throw new Error('source length ' + length + ' (' + dim + 'x' + data.length + ')' +
            ' does not match destination length ' + dstLength)
        }
    
        for (i = 0, k = offset; i < data.length; i++) {
          for (j = 0; j < dim; j++) {
            output[k++] = data[i][j] === null ? NaN : data[i][j]
          }
        }
      } else {
        if (!output || typeof output === 'string') {
          // no output, create a new one
          var Ctor = dtype(output || 'float32')
    
          // handle arrays separately due to possible nulls
          if (Array.isArray(data) || output === 'array') {
            output = new Ctor(data.length + offset)
            for (i = 0, k = offset, l = output.length; k < l; k++, i++) {
              output[k] = data[i] === null ? NaN : data[i]
            }
          } else {
            if (offset === 0) {
              output = new Ctor(data)
            } else {
              output = new Ctor(data.length + offset)
    
              output.set(data, offset)
            }
          }
        } else {
          // store output in existing array
          output.set(data, offset)
        }
      }
    
      return output
    }
    
    },{"dtype":8}],11:[function(require,module,exports){
    module.exports = invert
    
    /**
     * Calculates the inverse of a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate inverse of
     * @returns {quat} out
     */
    function invert (out, a) {
      var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,
        invDot = dot ? 1.0 / dot : 0
    
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
    
      out[0] = -a0 * invDot
      out[1] = -a1 * invDot
      out[2] = -a2 * invDot
      out[3] = a3 * invDot
      return out
    }
    
    },{}],12:[function(require,module,exports){
    /**
     * Normalize a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quaternion to normalize
     * @returns {quat} out
     * @function
     */
    module.exports = require('gl-vec4/normalize')
    
    },{"gl-vec4/normalize":23}],13:[function(require,module,exports){
    module.exports = distance
    
    /**
     * Calculates the euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance(a, b) {
        var x = b[0] - a[0],
            y = b[1] - a[1]
        return Math.sqrt(x*x + y*y)
    }
    },{}],14:[function(require,module,exports){
    module.exports = add;
    
    /**
     * Adds two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function add(out, a, b) {
        out[0] = a[0] + b[0]
        out[1] = a[1] + b[1]
        out[2] = a[2] + b[2]
        return out
    }
    },{}],15:[function(require,module,exports){
    module.exports = copy;
    
    /**
     * Copy the values from one vec3 to another
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the source vector
     * @returns {vec3} out
     */
    function copy(out, a) {
        out[0] = a[0]
        out[1] = a[1]
        out[2] = a[2]
        return out
    }
    },{}],16:[function(require,module,exports){
    module.exports = cross;
    
    /**
     * Computes the cross product of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function cross(out, a, b) {
        var ax = a[0], ay = a[1], az = a[2],
            bx = b[0], by = b[1], bz = b[2]
    
        out[0] = ay * bz - az * by
        out[1] = az * bx - ax * bz
        out[2] = ax * by - ay * bx
        return out
    }
    },{}],17:[function(require,module,exports){
    module.exports = dot;
    
    /**
     * Calculates the dot product of two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
    }
    },{}],18:[function(require,module,exports){
    module.exports = length;
    
    /**
     * Calculates the length of a vec3
     *
     * @param {vec3} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length(a) {
        var x = a[0],
            y = a[1],
            z = a[2]
        return Math.sqrt(x*x + y*y + z*z)
    }
    },{}],19:[function(require,module,exports){
    module.exports = normalize;
    
    /**
     * Normalize a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to normalize
     * @returns {vec3} out
     */
    function normalize(out, a) {
        var x = a[0],
            y = a[1],
            z = a[2]
        var len = x*x + y*y + z*z
        if (len > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len = 1 / Math.sqrt(len)
            out[0] = a[0] * len
            out[1] = a[1] * len
            out[2] = a[2] * len
        }
        return out
    }
    },{}],20:[function(require,module,exports){
    module.exports = set;
    
    /**
     * Set the components of a vec3 to the given values
     *
     * @param {vec3} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} out
     */
    function set(out, x, y, z) {
        out[0] = x
        out[1] = y
        out[2] = z
        return out
    }
    },{}],21:[function(require,module,exports){
    module.exports = subtract;
    
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function subtract(out, a, b) {
        out[0] = a[0] - b[0]
        out[1] = a[1] - b[1]
        out[2] = a[2] - b[2]
        return out
    }
    },{}],22:[function(require,module,exports){
    module.exports = transformQuat;
    
    /**
     * Transforms the vec3 with a quat
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec3} out
     */
    function transformQuat(out, a, q) {
        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
    
        var x = a[0], y = a[1], z = a[2],
            qx = q[0], qy = q[1], qz = q[2], qw = q[3],
    
            // calculate quat * vec
            ix = qw * x + qy * z - qz * y,
            iy = qw * y + qz * x - qx * z,
            iz = qw * z + qx * y - qy * x,
            iw = -qx * x - qy * y - qz * z
    
        // calculate result * inverse quat
        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy
        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz
        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx
        return out
    }
    },{}],23:[function(require,module,exports){
    module.exports = normalize
    
    /**
     * Normalize a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to normalize
     * @returns {vec4} out
     */
    function normalize (out, a) {
      var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3]
      var len = x * x + y * y + z * z + w * w
      if (len > 0) {
        len = 1 / Math.sqrt(len)
        out[0] = x * len
        out[1] = y * len
        out[2] = z * len
        out[3] = w * len
      }
      return out
    }
    
    },{}],24:[function(require,module,exports){
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        var TempCtor = function () {}
        TempCtor.prototype = superCtor.prototype
        ctor.prototype = new TempCtor()
        ctor.prototype.constructor = ctor
      }
    }
    
    },{}],25:[function(require,module,exports){
    var rootPosition = { left: 0, top: 0 }
    
    module.exports = mouseEventOffset
    function mouseEventOffset (ev, target, out) {
      target = target || ev.currentTarget || ev.srcElement
      if (!Array.isArray(out)) {
        out = [ 0, 0 ]
      }
      var cx = ev.clientX || 0
      var cy = ev.clientY || 0
      var rect = getBoundingClientOffset(target)
      out[0] = cx - rect.left
      out[1] = cy - rect.top
      return out
    }
    
    function getBoundingClientOffset (element) {
      if (element === window ||
          element === document ||
          element === document.body) {
        return rootPosition
      } else {
        return element.getBoundingClientRect()
      }
    }
    
    },{}],26:[function(require,module,exports){
    'use strict'
    
    var toPX = require('to-px')
    
    module.exports = mouseWheelListen
    
    function mouseWheelListen(element, callback, noScroll) {
      if(typeof element === 'function') {
        noScroll = !!callback
        callback = element
        element = window
      }
      var lineHeight = toPX('ex', element)
      var listener = function(ev) {
        if(noScroll) {
          ev.preventDefault()
        }
        var dx = ev.deltaX || 0
        var dy = ev.deltaY || 0
        var dz = ev.deltaZ || 0
        var mode = ev.deltaMode
        var scale = 1
        switch(mode) {
          case 1:
            scale = lineHeight
          break
          case 2:
            scale = window.innerHeight
          break
        }
        dx *= scale
        dy *= scale
        dz *= scale
        if(dx || dy || dz) {
          return callback(dx, dy, dz, ev)
        }
      }
      element.addEventListener('wheel', listener)
      return listener
    }
    
    },{"to-px":40}],27:[function(require,module,exports){
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    
    'use strict';
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
    
        return Object(val);
    }
    
    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }
    
            // Detect buggy property enumeration order in older V8 versions.
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            }
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            }
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !==
                    'abcdefghijklmnopqrst') {
                return false;
            }
    
            return true;
        } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }
    
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
    
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
    
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
    
            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
    
        return to;
    };
    
    },{}],28:[function(require,module,exports){
    var defined = require('defined')
    var clamp = require('clamp')
    
    var inputEvents = require('./lib/input')
    var quatFromVec3 = require('quat-from-unit-vec3')
    var quatInvert = require('gl-quat/invert')
    
    var glVec3 = {
      length: require('gl-vec3/length'),
      add: require('gl-vec3/add'),
      subtract: require('gl-vec3/subtract'),
      transformQuat: require('gl-vec3/transformQuat'),
      copy: require('gl-vec3/copy'),
      normalize: require('gl-vec3/normalize'),
      cross: require('gl-vec3/cross')
    }
    
    var Y_UP = [0, 1, 0]
    var EPSILON = Math.pow(2, -23)
    var tmpVec3 = [0, 0, 0]
    
    module.exports = createOrbitControls
    function createOrbitControls (opt) {
      opt = opt || {}
    
      var inputDelta = [0, 0, 0] // x, y, zoom
      var offset = [0, 0, 0]
    
      var upQuat = [0, 0, 0, 1]
      var upQuatInverse = upQuat.slice()
      var _phi = defined(opt.phi, Math.PI / 2)
      var _theta = opt.theta || 0
    
      var controls = {
        update: update,
        copyInto: copyInto,
    
        position: opt.position ? opt.position.slice() : [0, 0, 1],
        direction: [0, 0, -1],
        up: opt.up ? opt.up.slice() : [0, 1, 0],
    
        target: opt.target ? opt.target.slice() : [0, 0, 0],
        distance: defined(opt.distance, 1),
        damping: defined(opt.damping, 0.25),
        rotateSpeed: defined(opt.rotateSpeed, 0.28),
        zoomSpeed: defined(opt.zoomSpeed, 0.0075),
        pinchSpeed: defined(opt.pinchSpeed, 0.0075),
    
        pinch: opt.pinching !== false,
        zoom: opt.zoom !== false,
        rotate: opt.rotate !== false,
    
        phiBounds: opt.phiBounds || [0, Math.PI],
        thetaBounds: opt.thetaBounds || [-Infinity, Infinity],
        distanceBounds: opt.distanceBounds || [0, Infinity]
      }
    
      // Compute distance if not defined in user options
      if (typeof opt.distance !== 'number') {
        glVec3.subtract(tmpVec3, controls.position, controls.target)
        controls.distance = glVec3.length(tmpVec3)
      }
    
      var input = inputEvents({
        parent: opt.parent || window,
        element: opt.element,
        rotate: opt.rotate !== false ? inputRotate : null,
        zoom: opt.zoom !== false ? inputZoom : null,
        pinch: opt.pinch !== false ? inputPinch : null
      })
    
      controls.enable = input.enable
      controls.disable = input.disable
    
      Object.defineProperties(controls, {
        phi: {
          get: function () { return _phi },
          set: function (v) {
            _phi = v
            applyPhiTheta()
          }
        },
        theta: {
          get: function () { return _theta },
          set: function (v) {
            _theta = v
            applyPhiTheta()
          }
        },
        dragging: {
          get: function () { return input.isDragging() }
        },
        pinching: {
          get: function () { return input.isPinching() }
        }
      })
    
      // Apply an initial phi and theta
      applyPhiTheta()
    
      return controls
    
      function inputRotate (dx, dy) {
        var PI2 = Math.PI * 2
        inputDelta[0] -= PI2 * dx * controls.rotateSpeed
        inputDelta[1] -= PI2 * dy * controls.rotateSpeed
      }
    
      function inputZoom (delta) {
        inputDelta[2] += delta * controls.zoomSpeed
      }
    
      function inputPinch (delta) {
        inputDelta[2] -= delta * controls.pinchSpeed
      }
    
      function updateDirection () {
        var cameraUp = controls.up || Y_UP
        quatFromVec3(upQuat, cameraUp, Y_UP)
        quatInvert(upQuatInverse, upQuat)
    
        var distance = controls.distance
    
        glVec3.subtract(offset, controls.position, controls.target)
        glVec3.transformQuat(offset, offset, upQuat)
    
        var theta = Math.atan2(offset[0], offset[2])
        var phi = Math.atan2(Math.sqrt(offset[0] * offset[0] + offset[2] * offset[2]), offset[1])
    
        theta += inputDelta[0]
        phi += inputDelta[1]
    
        theta = clamp(theta, controls.thetaBounds[0], controls.thetaBounds[1])
        phi = clamp(phi, controls.phiBounds[0], controls.phiBounds[1])
        phi = clamp(phi, EPSILON, Math.PI - EPSILON)
    
        distance += inputDelta[2]
        distance = clamp(distance, controls.distanceBounds[0], controls.distanceBounds[1])
    
        var radius = Math.abs(distance) <= EPSILON ? EPSILON : distance
        offset[0] = radius * Math.sin(phi) * Math.sin(theta)
        offset[1] = radius * Math.cos(phi)
        offset[2] = radius * Math.sin(phi) * Math.cos(theta)
    
        _phi = phi
        _theta = theta
        controls.distance = distance
    
        glVec3.transformQuat(offset, offset, upQuatInverse)
        glVec3.add(controls.position, controls.target, offset)
        camLookAt(controls.direction, cameraUp, controls.position, controls.target)
      }
    
      function update () {
        updateDirection()
        var damp = typeof controls.damping === 'number' ? controls.damping : 1
        for (var i = 0; i < inputDelta.length; i++) {
          inputDelta[i] *= 1 - damp
        }
      }
    
      function copyInto (position, direction, up) {
        if (position) glVec3.copy(position, controls.position)
        if (direction) glVec3.copy(direction, controls.direction)
        if (up) glVec3.copy(up, controls.up)
      }
    
      function applyPhiTheta () {
        var phi = controls.phi
        var theta = controls.theta
        theta = clamp(theta, controls.thetaBounds[0], controls.thetaBounds[1])
        phi = clamp(phi, controls.phiBounds[0], controls.phiBounds[1])
        phi = clamp(phi, EPSILON, Math.PI - EPSILON)
    
        var dist = Math.max(EPSILON, controls.distance)
        controls.position[0] = dist * Math.sin(phi) * Math.sin(theta)
        controls.position[1] = dist * Math.cos(phi)
        controls.position[2] = dist * Math.sin(phi) * Math.cos(theta)
        glVec3.add(controls.position, controls.position, controls.target)
    
        updateDirection()
      }
    }
    
    function camLookAt (direction, up, position, target) {
      glVec3.copy(direction, target)
      glVec3.subtract(direction, direction, position)
      glVec3.normalize(direction, direction)
    }
    
    },{"./lib/input":29,"clamp":5,"defined":6,"gl-quat/invert":11,"gl-vec3/add":14,"gl-vec3/copy":15,"gl-vec3/cross":16,"gl-vec3/length":18,"gl-vec3/normalize":19,"gl-vec3/subtract":21,"gl-vec3/transformQuat":22,"quat-from-unit-vec3":34}],29:[function(require,module,exports){
    var mouseWheel = require('mouse-wheel')
    var eventOffset = require('mouse-event-offset')
    var createPinch = require('touch-pinch')
    
    module.exports = inputEvents
    function inputEvents (opt) {
      var element = opt.element || window
      var parent = opt.parent || element
      var mouseStart = [0, 0]
      var dragging = false
      var tmp = [0, 0]
      var tmp2 = [0, 0]
      var pinch
    
      var zoomFn = opt.zoom
      var rotateFn = opt.rotate
      var pinchFn = opt.pinch
      var mouseWheelListener
      var enabled = false
      enable()
    
      return {
        isDragging: function () {
          return dragging
        },
        isPinching: isPinching,
        enable: enable,
        disable: disable
      }
    
      function enable () {
        if (enabled) return
        enabled = true
        if (zoomFn) {
          mouseWheelListener = mouseWheel(element, function (dx, dy) {
            zoomFn(dy)
          }, true)
        }
    
        if (rotateFn) {
          element.addEventListener('mousedown', onInputDown, false)
    
          // for dragging to work outside canvas bounds,
          // mouse move/up events have to be added to parent, i.e. window
          parent.addEventListener('mousemove', onInputMove, false)
          parent.addEventListener('mouseup', onInputUp, false)
        }
    
        if (rotateFn || pinchFn) {
          pinch = createPinch(element)
    
          // don't allow simulated mouse events
          element.addEventListener('touchstart', preventDefault, false)
    
          if (rotateFn) {
            element.addEventListener('touchmove', onTouchMove, false)
            pinch.on('place', onPinchPlace)
            pinch.on('lift', onPinchLift)
          }
          if (pinchFn) {
            pinch.on('change', onPinchChange)
          }
        }
      }
    
      function disable () {
        if (!enabled) return
        enabled = false
        if (mouseWheelListener) {
          element.removeEventListener('wheel', mouseWheelListener)
        }
        if (pinch) {
          pinch.disable()
          element.removeEventListener('touchstart', preventDefault, false)
          if (rotateFn) {
            element.removeEventListener('touchmove', onTouchMove, false)
          }
        }
        if (rotateFn) {
          parent.removeEventListener('mousedown', onInputDown, false)
          parent.removeEventListener('mousemove', onInputMove, false)
          parent.removeEventListener('mouseup', onInputUp, false)
        }
      }
    
      function preventDefault (ev) {
        ev.preventDefault()
      }
    
      function onTouchMove (ev) {
        if (!dragging || isPinching()) return
    
        // find currently active finger
        for (var i = 0; i < ev.changedTouches.length; i++) {
          var changed = ev.changedTouches[i]
          var idx = pinch.indexOfTouch(changed)
          // if pinch is disabled but rotate enabled,
          // only allow first finger to affect rotation
          var allow = pinchFn ? idx !== -1 : idx === 0
          if (allow) {
            onInputMove(changed)
            break
          }
        }
      }
    
      function onPinchPlace (newFinger, lastFinger) {
        dragging = !isPinching()
        if (dragging) {
          var firstFinger = lastFinger || newFinger
          onInputDown(firstFinger)
        }
      }
    
      function onPinchLift (lifted, remaining) {
        // if either finger is down, consider it dragging
        var sum = pinch.fingers.reduce(function (sum, item) {
          return sum + (item ? 1 : 0)
        }, 0)
        dragging = pinchFn && sum >= 1
    
        if (dragging && remaining) {
          eventOffset(remaining, element, mouseStart)
        }
      }
    
      function isPinching () {
        return pinch.pinching && pinchFn
      }
    
      function onPinchChange (current, prev) {
        pinchFn(current - prev)
      }
    
      function onInputDown (ev) {
        eventOffset(ev, element, mouseStart)
        if (insideBounds(mouseStart)) {
          dragging = true
        }
      }
    
      function onInputUp () {
        dragging = false
      }
    
      function onInputMove (ev) {
        var end = eventOffset(ev, element, tmp)
        if (pinch && isPinching()) {
          mouseStart = end
          return
        }
        if (!dragging) return
        var rect = getClientSize(tmp2)
        var dx = (end[0] - mouseStart[0]) / rect[0]
        var dy = (end[1] - mouseStart[1]) / rect[1]
        rotateFn(dx, dy)
        mouseStart[0] = end[0]
        mouseStart[1] = end[1]
      }
    
      function insideBounds (pos) {
        if (element === window ||
            element === document ||
            element === document.body) {
          return true
        } else {
          var rect = element.getBoundingClientRect()
          return pos[0] >= 0 && pos[1] >= 0 &&
            pos[0] < rect.width && pos[1] < rect.height
        }
      }
    
      function getClientSize (out) {
        var source = element
        if (source === window ||
            source === document ||
            source === document.body) {
          source = document.documentElement
        }
        out[0] = source.clientWidth
        out[1] = source.clientHeight
        return out
      }
    }
    
    },{"mouse-event-offset":25,"mouse-wheel":26,"touch-pinch":41}],30:[function(require,module,exports){
    module.exports = function parseUnit(str, out) {
        if (!out)
            out = [ 0, '' ]
    
        str = String(str)
        var num = parseFloat(str, 10)
        out[0] = num
        out[1] = str.match(/[\d.\-\+]*\s*(.*)/)[1] || ''
        return out
    }
    },{}],31:[function(require,module,exports){
    (function (process){
    // .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
    // backported and transplited with Babel, with backwards-compat fixes
    
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    // resolves . and .. elements in a path array with directory names there
    // must be no slashes, empty elements, or device names (c:\) in the array
    // (so also no leading and trailing slashes - it does not distinguish
    // relative and absolute paths)
    function normalizeArray(parts, allowAboveRoot) {
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = parts.length - 1; i >= 0; i--) {
        var last = parts[i];
        if (last === '.') {
          parts.splice(i, 1);
        } else if (last === '..') {
          parts.splice(i, 1);
          up++;
        } else if (up) {
          parts.splice(i, 1);
          up--;
        }
      }
    
      // if the path is allowed to go above the root, restore leading ..s
      if (allowAboveRoot) {
        for (; up--; up) {
          parts.unshift('..');
        }
      }
    
      return parts;
    }
    
    // path.resolve([from ...], to)
    // posix version
    exports.resolve = function() {
      var resolvedPath = '',
          resolvedAbsolute = false;
    
      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path = (i >= 0) ? arguments[i] : process.cwd();
    
        // Skip empty and invalid entries
        if (typeof path !== 'string') {
          throw new TypeError('Arguments to path.resolve must be strings');
        } else if (!path) {
          continue;
        }
    
        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charAt(0) === '/';
      }
    
      // At this point the path should be resolved to a full absolute path, but
      // handle relative paths to be safe (might happen when process.cwd() fails)
    
      // Normalize the path
      resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
        return !!p;
      }), !resolvedAbsolute).join('/');
    
      return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    };
    
    // path.normalize(path)
    // posix version
    exports.normalize = function(path) {
      var isAbsolute = exports.isAbsolute(path),
          trailingSlash = substr(path, -1) === '/';
    
      // Normalize the path
      path = normalizeArray(filter(path.split('/'), function(p) {
        return !!p;
      }), !isAbsolute).join('/');
    
      if (!path && !isAbsolute) {
        path = '.';
      }
      if (path && trailingSlash) {
        path += '/';
      }
    
      return (isAbsolute ? '/' : '') + path;
    };
    
    // posix version
    exports.isAbsolute = function(path) {
      return path.charAt(0) === '/';
    };
    
    // posix version
    exports.join = function() {
      var paths = Array.prototype.slice.call(arguments, 0);
      return exports.normalize(filter(paths, function(p, index) {
        if (typeof p !== 'string') {
          throw new TypeError('Arguments to path.join must be strings');
        }
        return p;
      }).join('/'));
    };
    
    
    // path.relative(from, to)
    // posix version
    exports.relative = function(from, to) {
      from = exports.resolve(from).substr(1);
      to = exports.resolve(to).substr(1);
    
      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== '') break;
        }
    
        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== '') break;
        }
    
        if (start > end) return [];
        return arr.slice(start, end - start + 1);
      }
    
      var fromParts = trim(from.split('/'));
      var toParts = trim(to.split('/'));
    
      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (fromParts[i] !== toParts[i]) {
          samePartsLength = i;
          break;
        }
      }
    
      var outputParts = [];
      for (var i = samePartsLength; i < fromParts.length; i++) {
        outputParts.push('..');
      }
    
      outputParts = outputParts.concat(toParts.slice(samePartsLength));
    
      return outputParts.join('/');
    };
    
    exports.sep = '/';
    exports.delimiter = ':';
    
    exports.dirname = function (path) {
      if (typeof path !== 'string') path = path + '';
      if (path.length === 0) return '.';
      var code = path.charCodeAt(0);
      var hasRoot = code === 47 /*/*/;
      var end = -1;
      var matchedSlash = true;
      for (var i = path.length - 1; i >= 1; --i) {
        code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            if (!matchedSlash) {
              end = i;
              break;
            }
          } else {
          // We saw the first non-path separator
          matchedSlash = false;
        }
      }
    
      if (end === -1) return hasRoot ? '/' : '.';
      if (hasRoot && end === 1) {
        // return '//';
        // Backwards-compat fix:
        return '/';
      }
      return path.slice(0, end);
    };
    
    function basename(path) {
      if (typeof path !== 'string') path = path + '';
    
      var start = 0;
      var end = -1;
      var matchedSlash = true;
      var i;
    
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }
    
      if (end === -1) return '';
      return path.slice(start, end);
    }
    
    // Uses a mixed approach for backwards-compatibility, as ext behavior changed
    // in new Node.js versions, so only basename() above is backported here
    exports.basename = function (path, ext) {
      var f = basename(path);
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    };
    
    exports.extname = function (path) {
      if (typeof path !== 'string') path = path + '';
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true;
      // Track the state of characters (if any) we see before our first dot and
      // after any path separator we find
      var preDotState = 0;
      for (var i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
        if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // extension
          matchedSlash = false;
          end = i + 1;
        }
        if (code === 46 /*.*/) {
            // If this is our first dot, mark it as the start of our extension
            if (startDot === -1)
              startDot = i;
            else if (preDotState !== 1)
              preDotState = 1;
        } else if (startDot !== -1) {
          // We saw a non-dot and non-path separator before our dot, so we should
          // have a good chance at having a non-empty extension
          preDotState = -1;
        }
      }
    
      if (startDot === -1 || end === -1 ||
          // We saw a non-dot character immediately before the dot
          preDotState === 0 ||
          // The (right-most) trimmed path component is exactly '..'
          preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return '';
      }
      return path.slice(startDot, end);
    };
    
    function filter (xs, f) {
        if (xs.filter) return xs.filter(f);
        var res = [];
        for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
        }
        return res;
    }
    
    // String.prototype.substr - negative index don't work in IE8
    var substr = 'ab'.substr(-1) === 'b'
        ? function (str, start, len) { return str.substr(start, len) }
        : function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
        }
    ;
    
    }).call(this,require('_process'))
    
    },{"_process":33}],32:[function(require,module,exports){
    (function (process){
    // Generated by CoffeeScript 1.12.2
    (function() {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
    
      if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
        module.exports = function() {
          return performance.now();
        };
      } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
        module.exports = function() {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };
        hrtime = process.hrtime;
        getNanoSeconds = function() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };
        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function() {
          return Date.now() - loadTime;
        };
        loadTime = Date.now();
      } else {
        module.exports = function() {
          return new Date().getTime() - loadTime;
        };
        loadTime = new Date().getTime();
      }
    
    }).call(this);
    
    
    
    }).call(this,require('_process'))
    
    },{"_process":33}],33:[function(require,module,exports){
    // shim for using process in browser
    var process = module.exports = {};
    
    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.
    
    var cachedSetTimeout;
    var cachedClearTimeout;
    
    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ())
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    
    
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }
    
    
    
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    
    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }
    
    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
    
        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    
    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };
    
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};
    
    function noop() {}
    
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    
    process.listeners = function (name) { return [] }
    
    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };
    
    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };
    
    },{}],34:[function(require,module,exports){
    // Original implementation:
    // http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final
    
    var dot = require('gl-vec3/dot')
    var set = require('gl-vec3/set')
    var normalize = require('gl-quat/normalize')
    var cross = require('gl-vec3/cross')
    
    var tmp = [0, 0, 0]
    var EPS = 1e-6
    
    module.exports = quatFromUnitVec3
    function quatFromUnitVec3 (out, a, b) {
      // assumes a and b are normalized
      var r = dot(a, b) + 1
      if (r < EPS) {
        /* If u and v are exactly opposite, rotate 180 degrees
         * around an arbitrary orthogonal axis. Axis normalisation
         * can happen later, when we normalise the quaternion. */
        r = 0
        if (Math.abs(a[0]) > Math.abs(a[2])) {
          set(tmp, -a[1], a[0], 0)
        } else {
          set(tmp, 0, -a[2], a[1])
        }
      } else {
        /* Otherwise, build quaternion the standard way. */
        cross(tmp, a, b)
      }
    
      out[0] = tmp[0]
      out[1] = tmp[1]
      out[2] = tmp[2]
      out[3] = r
      normalize(out, out)
      return out
    }
    
    },{"gl-quat/normalize":12,"gl-vec3/cross":16,"gl-vec3/dot":17,"gl-vec3/set":20}],35:[function(require,module,exports){
    var inherits = require('inherits')
    var EventEmitter = require('events').EventEmitter
    var now = require('right-now')
    var raf = require('raf')
    
    module.exports = Engine
    function Engine(fn) {
        if (!(this instanceof Engine)) 
            return new Engine(fn)
        this.running = false
        this.last = now()
        this._frame = 0
        this._tick = this.tick.bind(this)
    
        if (fn)
            this.on('tick', fn)
    }
    
    inherits(Engine, EventEmitter)
    
    Engine.prototype.start = function() {
        if (this.running) 
            return
        this.running = true
        this.last = now()
        this._frame = raf(this._tick)
        return this
    }
    
    Engine.prototype.stop = function() {
        this.running = false
        if (this._frame !== 0)
            raf.cancel(this._frame)
        this._frame = 0
        return this
    }
    
    Engine.prototype.tick = function() {
        this._frame = raf(this._tick)
        var time = now()
        var dt = time - this.last
        this.emit('tick', dt)
        this.last = time
    }
    },{"events":9,"inherits":24,"raf":36,"right-now":37}],36:[function(require,module,exports){
    (function (global){
    var now = require('performance-now')
      , root = typeof window === 'undefined' ? global : window
      , vendors = ['moz', 'webkit']
      , suffix = 'AnimationFrame'
      , raf = root['request' + suffix]
      , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]
    
    for(var i = 0; !raf && i < vendors.length; i++) {
      raf = root[vendors[i] + 'Request' + suffix]
      caf = root[vendors[i] + 'Cancel' + suffix]
          || root[vendors[i] + 'CancelRequest' + suffix]
    }
    
    // Some versions of FF have rAF but not cAF
    if(!raf || !caf) {
      var last = 0
        , id = 0
        , queue = []
        , frameDuration = 1000 / 60
    
      raf = function(callback) {
        if(queue.length === 0) {
          var _now = now()
            , next = Math.max(0, frameDuration - (_now - last))
          last = next + _now
          setTimeout(function() {
            var cp = queue.slice(0)
            // Clear queue here to prevent
            // callbacks from appending listeners
            // to the current frame's queue
            queue.length = 0
            for(var i = 0; i < cp.length; i++) {
              if(!cp[i].cancelled) {
                try{
                  cp[i].callback(last)
                } catch(e) {
                  setTimeout(function() { throw e }, 0)
                }
              }
            }
          }, Math.round(next))
        }
        queue.push({
          handle: ++id,
          callback: callback,
          cancelled: false
        })
        return id
      }
    
      caf = function(handle) {
        for(var i = 0; i < queue.length; i++) {
          if(queue[i].handle === handle) {
            queue[i].cancelled = true
          }
        }
      }
    }
    
    module.exports = function(fn) {
      // Wrap in a new function to prevent
      // `cancel` potentially being assigned
      // to the native rAF function
      return raf.call(root, fn)
    }
    module.exports.cancel = function() {
      caf.apply(root, arguments)
    }
    module.exports.polyfill = function(object) {
      if (!object) {
        object = root;
      }
      object.requestAnimationFrame = raf
      object.cancelAnimationFrame = caf
    }
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{"performance-now":32}],37:[function(require,module,exports){
    (function (global){
    module.exports =
      global.performance &&
      global.performance.now ? function now() {
        return performance.now()
      } : Date.now || function now() {
        return +new Date
      }
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{}],38:[function(require,module,exports){
    var flatten = require('flatten-vertex-data')
    var warned = false;
    
    module.exports.attr = setAttribute
    module.exports.index = setIndex
    
    function setIndex (geometry, data, itemSize, dtype) {
      if (typeof itemSize !== 'number') itemSize = 1
      if (typeof dtype !== 'string') dtype = 'uint16'
    
      var isR69 = !geometry.index && typeof geometry.setIndex !== 'function'
      var attrib = isR69 ? geometry.getAttribute('index') : geometry.index
      var newAttrib = updateAttribute(attrib, data, itemSize, dtype)
      if (newAttrib) {
        if (isR69) geometry.addAttribute('index', newAttrib)
        else geometry.index = newAttrib
      }
    }
    
    function setAttribute (geometry, key, data, itemSize, dtype) {
      if (typeof itemSize !== 'number') itemSize = 3
      if (typeof dtype !== 'string') dtype = 'float32'
      if (Array.isArray(data) &&
        Array.isArray(data[0]) &&
        data[0].length !== itemSize) {
        throw new Error('Nested vertex array has unexpected size; expected ' +
          itemSize + ' but found ' + data[0].length)
      }
    
      var attrib = geometry.getAttribute(key)
      var newAttrib = updateAttribute(attrib, data, itemSize, dtype)
      if (newAttrib) {
        geometry.addAttribute(key, newAttrib)
      }
    }
    
    function updateAttribute (attrib, data, itemSize, dtype) {
      data = data || []
      if (!attrib || rebuildAttribute(attrib, data, itemSize)) {
        // create a new array with desired type
        data = flatten(data, dtype)
    
        var needsNewBuffer = attrib && typeof attrib.setArray !== 'function'
        if (!attrib || needsNewBuffer) {
          // We are on an old version of ThreeJS which can't
          // support growing / shrinking buffers, so we need
          // to build a new buffer
          if (needsNewBuffer && !warned) {
            warned = true
            console.warn([
              'A WebGL buffer is being updated with a new size or itemSize, ',
              'however this version of ThreeJS only supports fixed-size buffers.',
              '\nThe old buffer may still be kept in memory.\n',
              'To avoid memory leaks, it is recommended that you dispose ',
              'your geometries and create new ones, or update to ThreeJS r82 or newer.\n',
              'See here for discussion:\n',
              'https://github.com/mrdoob/three.js/pull/9631'
            ].join(''))
          }
    
          // Build a new attribute
          attrib = new THREE.BufferAttribute(data, itemSize);
        }
    
        attrib.itemSize = itemSize
        attrib.needsUpdate = true
    
        // New versions of ThreeJS suggest using setArray
        // to change the data. It will use bufferData internally,
        // so you can change the array size without any issues
        if (typeof attrib.setArray === 'function') {
          attrib.setArray(data)
        }
    
        return attrib
      } else {
        // copy data into the existing array
        flatten(data, attrib.array)
        attrib.needsUpdate = true
        return null
      }
    }
    
    // Test whether the attribute needs to be re-created,
    // returns false if we can re-use it as-is.
    function rebuildAttribute (attrib, data, itemSize) {
      if (attrib.itemSize !== itemSize) return true
      if (!attrib.array) return true
      var attribLength = attrib.array.length
      if (Array.isArray(data) && Array.isArray(data[0])) {
        // [ [ x, y, z ] ]
        return attribLength !== data.length * itemSize
      } else {
        // [ x, y, z ]
        return attribLength !== data.length
      }
      return false
    }
    
    },{"flatten-vertex-data":10}],39:[function(require,module,exports){
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
        typeof define === 'function' && define.amd ? define(['exports'], factory) :
        (global = global || self, factory(global.THREE = {}));
    }(this, function (exports) { 'use strict';
    
        // Polyfills
    
        if ( Number.EPSILON === undefined ) {
    
            Number.EPSILON = Math.pow( 2, - 52 );
    
        }
    
        if ( Number.isInteger === undefined ) {
    
            // Missing in IE
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
    
            Number.isInteger = function ( value ) {
    
                return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;
    
            };
    
        }
    
        //
    
        if ( Math.sign === undefined ) {
    
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
    
            Math.sign = function ( x ) {
    
                return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;
    
            };
    
        }
    
        if ( 'name' in Function.prototype === false ) {
    
            // Missing in IE
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
    
            Object.defineProperty( Function.prototype, 'name', {
    
                get: function () {
    
                    return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];
    
                }
    
            } );
    
        }
    
        if ( Object.assign === undefined ) {
    
            // Missing in IE
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
    
            ( function () {
    
                Object.assign = function ( target ) {
    
                    if ( target === undefined || target === null ) {
    
                        throw new TypeError( 'Cannot convert undefined or null to object' );
    
                    }
    
                    var output = Object( target );
    
                    for ( var index = 1; index < arguments.length; index ++ ) {
    
                        var source = arguments[ index ];
    
                        if ( source !== undefined && source !== null ) {
    
                            for ( var nextKey in source ) {
    
                                if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {
    
                                    output[ nextKey ] = source[ nextKey ];
    
                                }
    
                            }
    
                        }
    
                    }
    
                    return output;
    
                };
    
            } )();
    
        }
    
        /**
         * https://github.com/mrdoob/eventdispatcher.js/
         */
    
        function EventDispatcher() {}
    
        Object.assign( EventDispatcher.prototype, {
    
            addEventListener: function ( type, listener ) {
    
                if ( this._listeners === undefined ) this._listeners = {};
    
                var listeners = this._listeners;
    
                if ( listeners[ type ] === undefined ) {
    
                    listeners[ type ] = [];
    
                }
    
                if ( listeners[ type ].indexOf( listener ) === - 1 ) {
    
                    listeners[ type ].push( listener );
    
                }
    
            },
    
            hasEventListener: function ( type, listener ) {
    
                if ( this._listeners === undefined ) return false;
    
                var listeners = this._listeners;
    
                return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;
    
            },
    
            removeEventListener: function ( type, listener ) {
    
                if ( this._listeners === undefined ) return;
    
                var listeners = this._listeners;
                var listenerArray = listeners[ type ];
    
                if ( listenerArray !== undefined ) {
    
                    var index = listenerArray.indexOf( listener );
    
                    if ( index !== - 1 ) {
    
                        listenerArray.splice( index, 1 );
    
                    }
    
                }
    
            },
    
            dispatchEvent: function ( event ) {
    
                if ( this._listeners === undefined ) return;
    
                var listeners = this._listeners;
                var listenerArray = listeners[ event.type ];
    
                if ( listenerArray !== undefined ) {
    
                    event.target = this;
    
                    var array = listenerArray.slice( 0 );
    
                    for ( var i = 0, l = array.length; i < l; i ++ ) {
    
                        array[ i ].call( this, event );
    
                    }
    
                }
    
            }
    
        } );
    
        var REVISION = '103';
        var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
        var CullFaceNone = 0;
        var CullFaceBack = 1;
        var CullFaceFront = 2;
        var CullFaceFrontBack = 3;
        var FrontFaceDirectionCW = 0;
        var FrontFaceDirectionCCW = 1;
        var BasicShadowMap = 0;
        var PCFShadowMap = 1;
        var PCFSoftShadowMap = 2;
        var FrontSide = 0;
        var BackSide = 1;
        var DoubleSide = 2;
        var FlatShading = 1;
        var SmoothShading = 2;
        var NoColors = 0;
        var FaceColors = 1;
        var VertexColors = 2;
        var NoBlending = 0;
        var NormalBlending = 1;
        var AdditiveBlending = 2;
        var SubtractiveBlending = 3;
        var MultiplyBlending = 4;
        var CustomBlending = 5;
        var AddEquation = 100;
        var SubtractEquation = 101;
        var ReverseSubtractEquation = 102;
        var MinEquation = 103;
        var MaxEquation = 104;
        var ZeroFactor = 200;
        var OneFactor = 201;
        var SrcColorFactor = 202;
        var OneMinusSrcColorFactor = 203;
        var SrcAlphaFactor = 204;
        var OneMinusSrcAlphaFactor = 205;
        var DstAlphaFactor = 206;
        var OneMinusDstAlphaFactor = 207;
        var DstColorFactor = 208;
        var OneMinusDstColorFactor = 209;
        var SrcAlphaSaturateFactor = 210;
        var NeverDepth = 0;
        var AlwaysDepth = 1;
        var LessDepth = 2;
        var LessEqualDepth = 3;
        var EqualDepth = 4;
        var GreaterEqualDepth = 5;
        var GreaterDepth = 6;
        var NotEqualDepth = 7;
        var MultiplyOperation = 0;
        var MixOperation = 1;
        var AddOperation = 2;
        var NoToneMapping = 0;
        var LinearToneMapping = 1;
        var ReinhardToneMapping = 2;
        var Uncharted2ToneMapping = 3;
        var CineonToneMapping = 4;
        var ACESFilmicToneMapping = 5;
    
        var UVMapping = 300;
        var CubeReflectionMapping = 301;
        var CubeRefractionMapping = 302;
        var EquirectangularReflectionMapping = 303;
        var EquirectangularRefractionMapping = 304;
        var SphericalReflectionMapping = 305;
        var CubeUVReflectionMapping = 306;
        var CubeUVRefractionMapping = 307;
        var RepeatWrapping = 1000;
        var ClampToEdgeWrapping = 1001;
        var MirroredRepeatWrapping = 1002;
        var NearestFilter = 1003;
        var NearestMipMapNearestFilter = 1004;
        var NearestMipMapLinearFilter = 1005;
        var LinearFilter = 1006;
        var LinearMipMapNearestFilter = 1007;
        var LinearMipMapLinearFilter = 1008;
        var UnsignedByteType = 1009;
        var ByteType = 1010;
        var ShortType = 1011;
        var UnsignedShortType = 1012;
        var IntType = 1013;
        var UnsignedIntType = 1014;
        var FloatType = 1015;
        var HalfFloatType = 1016;
        var UnsignedShort4444Type = 1017;
        var UnsignedShort5551Type = 1018;
        var UnsignedShort565Type = 1019;
        var UnsignedInt248Type = 1020;
        var AlphaFormat = 1021;
        var RGBFormat = 1022;
        var RGBAFormat = 1023;
        var LuminanceFormat = 1024;
        var LuminanceAlphaFormat = 1025;
        var RGBEFormat = RGBAFormat;
        var DepthFormat = 1026;
        var DepthStencilFormat = 1027;
        var RedFormat = 1028;
        var RGB_S3TC_DXT1_Format = 33776;
        var RGBA_S3TC_DXT1_Format = 33777;
        var RGBA_S3TC_DXT3_Format = 33778;
        var RGBA_S3TC_DXT5_Format = 33779;
        var RGB_PVRTC_4BPPV1_Format = 35840;
        var RGB_PVRTC_2BPPV1_Format = 35841;
        var RGBA_PVRTC_4BPPV1_Format = 35842;
        var RGBA_PVRTC_2BPPV1_Format = 35843;
        var RGB_ETC1_Format = 36196;
        var RGBA_ASTC_4x4_Format = 37808;
        var RGBA_ASTC_5x4_Format = 37809;
        var RGBA_ASTC_5x5_Format = 37810;
        var RGBA_ASTC_6x5_Format = 37811;
        var RGBA_ASTC_6x6_Format = 37812;
        var RGBA_ASTC_8x5_Format = 37813;
        var RGBA_ASTC_8x6_Format = 37814;
        var RGBA_ASTC_8x8_Format = 37815;
        var RGBA_ASTC_10x5_Format = 37816;
        var RGBA_ASTC_10x6_Format = 37817;
        var RGBA_ASTC_10x8_Format = 37818;
        var RGBA_ASTC_10x10_Format = 37819;
        var RGBA_ASTC_12x10_Format = 37820;
        var RGBA_ASTC_12x12_Format = 37821;
        var LoopOnce = 2200;
        var LoopRepeat = 2201;
        var LoopPingPong = 2202;
        var InterpolateDiscrete = 2300;
        var InterpolateLinear = 2301;
        var InterpolateSmooth = 2302;
        var ZeroCurvatureEnding = 2400;
        var ZeroSlopeEnding = 2401;
        var WrapAroundEnding = 2402;
        var TrianglesDrawMode = 0;
        var TriangleStripDrawMode = 1;
        var TriangleFanDrawMode = 2;
        var LinearEncoding = 3000;
        var sRGBEncoding = 3001;
        var GammaEncoding = 3007;
        var RGBEEncoding = 3002;
        var LogLuvEncoding = 3003;
        var RGBM7Encoding = 3004;
        var RGBM16Encoding = 3005;
        var RGBDEncoding = 3006;
        var BasicDepthPacking = 3200;
        var RGBADepthPacking = 3201;
        var TangentSpaceNormalMap = 0;
        var ObjectSpaceNormalMap = 1;
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */
    
        var _Math = {
    
            DEG2RAD: Math.PI / 180,
            RAD2DEG: 180 / Math.PI,
    
            generateUUID: ( function () {
    
                // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
    
                var lut = [];
    
                for ( var i = 0; i < 256; i ++ ) {
    
                    lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );
    
                }
    
                return function generateUUID() {
    
                    var d0 = Math.random() * 0xffffffff | 0;
                    var d1 = Math.random() * 0xffffffff | 0;
                    var d2 = Math.random() * 0xffffffff | 0;
                    var d3 = Math.random() * 0xffffffff | 0;
                    var uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +
                        lut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +
                        lut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +
                        lut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];
    
                    // .toUpperCase() here flattens concatenated strings to save heap memory space.
                    return uuid.toUpperCase();
    
                };
    
            } )(),
    
            clamp: function ( value, min, max ) {
    
                return Math.max( min, Math.min( max, value ) );
    
            },
    
            // compute euclidian modulo of m % n
            // https://en.wikipedia.org/wiki/Modulo_operation
    
            euclideanModulo: function ( n, m ) {
    
                return ( ( n % m ) + m ) % m;
    
            },
    
            // Linear mapping from range <a1, a2> to range <b1, b2>
    
            mapLinear: function ( x, a1, a2, b1, b2 ) {
    
                return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
    
            },
    
            // https://en.wikipedia.org/wiki/Linear_interpolation
    
            lerp: function ( x, y, t ) {
    
                return ( 1 - t ) * x + t * y;
    
            },
    
            // http://en.wikipedia.org/wiki/Smoothstep
    
            smoothstep: function ( x, min, max ) {
    
                if ( x <= min ) return 0;
                if ( x >= max ) return 1;
    
                x = ( x - min ) / ( max - min );
    
                return x * x * ( 3 - 2 * x );
    
            },
    
            smootherstep: function ( x, min, max ) {
    
                if ( x <= min ) return 0;
                if ( x >= max ) return 1;
    
                x = ( x - min ) / ( max - min );
    
                return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
    
            },
    
            // Random integer from <low, high> interval
    
            randInt: function ( low, high ) {
    
                return low + Math.floor( Math.random() * ( high - low + 1 ) );
    
            },
    
            // Random float from <low, high> interval
    
            randFloat: function ( low, high ) {
    
                return low + Math.random() * ( high - low );
    
            },
    
            // Random float from <-range/2, range/2> interval
    
            randFloatSpread: function ( range ) {
    
                return range * ( 0.5 - Math.random() );
    
            },
    
            degToRad: function ( degrees ) {
    
                return degrees * _Math.DEG2RAD;
    
            },
    
            radToDeg: function ( radians ) {
    
                return radians * _Math.RAD2DEG;
    
            },
    
            isPowerOfTwo: function ( value ) {
    
                return ( value & ( value - 1 ) ) === 0 && value !== 0;
    
            },
    
            ceilPowerOfTwo: function ( value ) {
    
                return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );
    
            },
    
            floorPowerOfTwo: function ( value ) {
    
                return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );
    
            }
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author philogb / http://blog.thejit.org/
         * @author egraether / http://egraether.com/
         * @author zz85 / http://www.lab4games.net/zz85/blog
         */
    
        function Vector2( x, y ) {
    
            this.x = x || 0;
            this.y = y || 0;
    
        }
    
        Object.defineProperties( Vector2.prototype, {
    
            "width": {
    
                get: function () {
    
                    return this.x;
    
                },
    
                set: function ( value ) {
    
                    this.x = value;
    
                }
    
            },
    
            "height": {
    
                get: function () {
    
                    return this.y;
    
                },
    
                set: function ( value ) {
    
                    this.y = value;
    
                }
    
            }
    
        } );
    
        Object.assign( Vector2.prototype, {
    
            isVector2: true,
    
            set: function ( x, y ) {
    
                this.x = x;
                this.y = y;
    
                return this;
    
            },
    
            setScalar: function ( scalar ) {
    
                this.x = scalar;
                this.y = scalar;
    
                return this;
    
            },
    
            setX: function ( x ) {
    
                this.x = x;
    
                return this;
    
            },
    
            setY: function ( y ) {
    
                this.y = y;
    
                return this;
    
            },
    
            setComponent: function ( index, value ) {
    
                switch ( index ) {
    
                    case 0: this.x = value; break;
                    case 1: this.y = value; break;
                    default: throw new Error( 'index is out of range: ' + index );
    
                }
    
                return this;
    
            },
    
            getComponent: function ( index ) {
    
                switch ( index ) {
    
                    case 0: return this.x;
                    case 1: return this.y;
                    default: throw new Error( 'index is out of range: ' + index );
    
                }
    
            },
    
            clone: function () {
    
                return new this.constructor( this.x, this.y );
    
            },
    
            copy: function ( v ) {
    
                this.x = v.x;
                this.y = v.y;
    
                return this;
    
            },
    
            add: function ( v, w ) {
    
                if ( w !== undefined ) {
    
                    console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                    return this.addVectors( v, w );
    
                }
    
                this.x += v.x;
                this.y += v.y;
    
                return this;
    
            },
    
            addScalar: function ( s ) {
    
                this.x += s;
                this.y += s;
    
                return this;
    
            },
    
            addVectors: function ( a, b ) {
    
                this.x = a.x + b.x;
                this.y = a.y + b.y;
    
                return this;
    
            },
    
            addScaledVector: function ( v, s ) {
    
                this.x += v.x * s;
                this.y += v.y * s;
    
                return this;
    
            },
    
            sub: function ( v, w ) {
    
                if ( w !== undefined ) {
    
                    console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                    return this.subVectors( v, w );
    
                }
    
                this.x -= v.x;
                this.y -= v.y;
    
                return this;
    
            },
    
            subScalar: function ( s ) {
    
                this.x -= s;
                this.y -= s;
    
                return this;
    
            },
    
            subVectors: function ( a, b ) {
    
                this.x = a.x - b.x;
                this.y = a.y - b.y;
    
                return this;
    
            },
    
            multiply: function ( v ) {
    
                this.x *= v.x;
                this.y *= v.y;
    
                return this;
    
            },
    
            multiplyScalar: function ( scalar ) {
    
                this.x *= scalar;
                this.y *= scalar;
    
                return this;
    
            },
    
            divide: function ( v ) {
    
                this.x /= v.x;
                this.y /= v.y;
    
                return this;
    
            },
    
            divideScalar: function ( scalar ) {
    
                return this.multiplyScalar( 1 / scalar );
    
            },
    
            applyMatrix3: function ( m ) {
    
                var x = this.x, y = this.y;
                var e = m.elements;
    
                this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
                this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];
    
                return this;
    
            },
    
            min: function ( v ) {
    
                this.x = Math.min( this.x, v.x );
                this.y = Math.min( this.y, v.y );
    
                return this;
    
            },
    
            max: function ( v ) {
    
                this.x = Math.max( this.x, v.x );
                this.y = Math.max( this.y, v.y );
    
                return this;
    
            },
    
            clamp: function ( min, max ) {
    
                // assumes min < max, componentwise
    
                this.x = Math.max( min.x, Math.min( max.x, this.x ) );
                this.y = Math.max( min.y, Math.min( max.y, this.y ) );
    
                return this;
    
            },
    
            clampScalar: function () {
    
                var min = new Vector2();
                var max = new Vector2();
    
                return function clampScalar( minVal, maxVal ) {
    
                    min.set( minVal, minVal );
                    max.set( maxVal, maxVal );
    
                    return this.clamp( min, max );
    
                };
    
            }(),
    
            clampLength: function ( min, max ) {
    
                var length = this.length();
    
                return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
    
            },
    
            floor: function () {
    
                this.x = Math.floor( this.x );
                this.y = Math.floor( this.y );
    
                return this;
    
            },
    
            ceil: function () {
    
                this.x = Math.ceil( this.x );
                this.y = Math.ceil( this.y );
    
                return this;
    
            },
    
            round: function () {
    
                this.x = Math.round( this.x );
                this.y = Math.round( this.y );
    
                return this;
    
            },
    
            roundToZero: function () {
    
                this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
                this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
    
                return this;
    
            },
    
            negate: function () {
    
                this.x = - this.x;
                this.y = - this.y;
    
                return this;
    
            },
    
            dot: function ( v ) {
    
                return this.x * v.x + this.y * v.y;
    
            },
    
            cross: function ( v ) {
    
                return this.x * v.y - this.y * v.x;
    
            },
    
            lengthSq: function () {
    
                return this.x * this.x + this.y * this.y;
    
            },
    
            length: function () {
    
                return Math.sqrt( this.x * this.x + this.y * this.y );
    
            },
    
            manhattanLength: function () {
    
                return Math.abs( this.x ) + Math.abs( this.y );
    
            },
    
            normalize: function () {
    
                return this.divideScalar( this.length() || 1 );
    
            },
    
            angle: function () {
    
                // computes the angle in radians with respect to the positive x-axis
    
                var angle = Math.atan2( this.y, this.x );
    
                if ( angle < 0 ) angle += 2 * Math.PI;
    
                return angle;
    
            },
    
            distanceTo: function ( v ) {
    
                return Math.sqrt( this.distanceToSquared( v ) );
    
            },
    
            distanceToSquared: function ( v ) {
    
                var dx = this.x - v.x, dy = this.y - v.y;
                return dx * dx + dy * dy;
    
            },
    
            manhattanDistanceTo: function ( v ) {
    
                return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );
    
            },
    
            setLength: function ( length ) {
    
                return this.normalize().multiplyScalar( length );
    
            },
    
            lerp: function ( v, alpha ) {
    
                this.x += ( v.x - this.x ) * alpha;
                this.y += ( v.y - this.y ) * alpha;
    
                return this;
    
            },
    
            lerpVectors: function ( v1, v2, alpha ) {
    
                return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
    
            },
    
            equals: function ( v ) {
    
                return ( ( v.x === this.x ) && ( v.y === this.y ) );
    
            },
    
            fromArray: function ( array, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                this.x = array[ offset ];
                this.y = array[ offset + 1 ];
    
                return this;
    
            },
    
            toArray: function ( array, offset ) {
    
                if ( array === undefined ) array = [];
                if ( offset === undefined ) offset = 0;
    
                array[ offset ] = this.x;
                array[ offset + 1 ] = this.y;
    
                return array;
    
            },
    
            fromBufferAttribute: function ( attribute, index, offset ) {
    
                if ( offset !== undefined ) {
    
                    console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );
    
                }
    
                this.x = attribute.getX( index );
                this.y = attribute.getY( index );
    
                return this;
    
            },
    
            rotateAround: function ( center, angle ) {
    
                var c = Math.cos( angle ), s = Math.sin( angle );
    
                var x = this.x - center.x;
                var y = this.y - center.y;
    
                this.x = x * c - y * s + center.x;
                this.y = x * s + y * c + center.y;
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author WestLangley / http://github.com/WestLangley
         * @author bhouston / http://clara.io
         */
    
        function Quaternion( x, y, z, w ) {
    
            this._x = x || 0;
            this._y = y || 0;
            this._z = z || 0;
            this._w = ( w !== undefined ) ? w : 1;
    
        }
    
        Object.assign( Quaternion, {
    
            slerp: function ( qa, qb, qm, t ) {
    
                return qm.copy( qa ).slerp( qb, t );
    
            },
    
            slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {
    
                // fuzz-free, array-based Quaternion SLERP operation
    
                var x0 = src0[ srcOffset0 + 0 ],
                    y0 = src0[ srcOffset0 + 1 ],
                    z0 = src0[ srcOffset0 + 2 ],
                    w0 = src0[ srcOffset0 + 3 ],
    
                    x1 = src1[ srcOffset1 + 0 ],
                    y1 = src1[ srcOffset1 + 1 ],
                    z1 = src1[ srcOffset1 + 2 ],
                    w1 = src1[ srcOffset1 + 3 ];
    
                if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {
    
                    var s = 1 - t,
    
                        cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
    
                        dir = ( cos >= 0 ? 1 : - 1 ),
                        sqrSin = 1 - cos * cos;
    
                    // Skip the Slerp for tiny steps to avoid numeric problems:
                    if ( sqrSin > Number.EPSILON ) {
    
                        var sin = Math.sqrt( sqrSin ),
                            len = Math.atan2( sin, cos * dir );
    
                        s = Math.sin( s * len ) / sin;
                        t = Math.sin( t * len ) / sin;
    
                    }
    
                    var tDir = t * dir;
    
                    x0 = x0 * s + x1 * tDir;
                    y0 = y0 * s + y1 * tDir;
                    z0 = z0 * s + z1 * tDir;
                    w0 = w0 * s + w1 * tDir;
    
                    // Normalize in case we just did a lerp:
                    if ( s === 1 - t ) {
    
                        var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );
    
                        x0 *= f;
                        y0 *= f;
                        z0 *= f;
                        w0 *= f;
    
                    }
    
                }
    
                dst[ dstOffset ] = x0;
                dst[ dstOffset + 1 ] = y0;
                dst[ dstOffset + 2 ] = z0;
                dst[ dstOffset + 3 ] = w0;
    
            }
    
        } );
    
        Object.defineProperties( Quaternion.prototype, {
    
            x: {
    
                get: function () {
    
                    return this._x;
    
                },
    
                set: function ( value ) {
    
                    this._x = value;
                    this.onChangeCallback();
    
                }
    
            },
    
            y: {
    
                get: function () {
    
                    return this._y;
    
                },
    
                set: function ( value ) {
    
                    this._y = value;
                    this.onChangeCallback();
    
                }
    
            },
    
            z: {
    
                get: function () {
    
                    return this._z;
    
                },
    
                set: function ( value ) {
    
                    this._z = value;
                    this.onChangeCallback();
    
                }
    
            },
    
            w: {
    
                get: function () {
    
                    return this._w;
    
                },
    
                set: function ( value ) {
    
                    this._w = value;
                    this.onChangeCallback();
    
                }
    
            }
    
        } );
    
        Object.assign( Quaternion.prototype, {
    
            isQuaternion: true,
    
            set: function ( x, y, z, w ) {
    
                this._x = x;
                this._y = y;
                this._z = z;
                this._w = w;
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor( this._x, this._y, this._z, this._w );
    
            },
    
            copy: function ( quaternion ) {
    
                this._x = quaternion.x;
                this._y = quaternion.y;
                this._z = quaternion.z;
                this._w = quaternion.w;
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            setFromEuler: function ( euler, update ) {
    
                if ( ! ( euler && euler.isEuler ) ) {
    
                    throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );
    
                }
    
                var x = euler._x, y = euler._y, z = euler._z, order = euler.order;
    
                // http://www.mathworks.com/matlabcentral/fileexchange/
                // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
                //	content/SpinCalc.m
    
                var cos = Math.cos;
                var sin = Math.sin;
    
                var c1 = cos( x / 2 );
                var c2 = cos( y / 2 );
                var c3 = cos( z / 2 );
    
                var s1 = sin( x / 2 );
                var s2 = sin( y / 2 );
                var s3 = sin( z / 2 );
    
                if ( order === 'XYZ' ) {
    
                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3;
    
                } else if ( order === 'YXZ' ) {
    
                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3;
    
                } else if ( order === 'ZXY' ) {
    
                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3;
    
                } else if ( order === 'ZYX' ) {
    
                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3;
    
                } else if ( order === 'YZX' ) {
    
                    this._x = s1 * c2 * c3 + c1 * s2 * s3;
                    this._y = c1 * s2 * c3 + s1 * c2 * s3;
                    this._z = c1 * c2 * s3 - s1 * s2 * c3;
                    this._w = c1 * c2 * c3 - s1 * s2 * s3;
    
                } else if ( order === 'XZY' ) {
    
                    this._x = s1 * c2 * c3 - c1 * s2 * s3;
                    this._y = c1 * s2 * c3 - s1 * c2 * s3;
                    this._z = c1 * c2 * s3 + s1 * s2 * c3;
                    this._w = c1 * c2 * c3 + s1 * s2 * s3;
    
                }
    
                if ( update !== false ) this.onChangeCallback();
    
                return this;
    
            },
    
            setFromAxisAngle: function ( axis, angle ) {
    
                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
    
                // assumes axis is normalized
    
                var halfAngle = angle / 2, s = Math.sin( halfAngle );
    
                this._x = axis.x * s;
                this._y = axis.y * s;
                this._z = axis.z * s;
                this._w = Math.cos( halfAngle );
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            setFromRotationMatrix: function ( m ) {
    
                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
    
                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    
                var te = m.elements,
    
                    m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
                    m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
                    m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
    
                    trace = m11 + m22 + m33,
                    s;
    
                if ( trace > 0 ) {
    
                    s = 0.5 / Math.sqrt( trace + 1.0 );
    
                    this._w = 0.25 / s;
                    this._x = ( m32 - m23 ) * s;
                    this._y = ( m13 - m31 ) * s;
                    this._z = ( m21 - m12 ) * s;
    
                } else if ( m11 > m22 && m11 > m33 ) {
    
                    s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
    
                    this._w = ( m32 - m23 ) / s;
                    this._x = 0.25 * s;
                    this._y = ( m12 + m21 ) / s;
                    this._z = ( m13 + m31 ) / s;
    
                } else if ( m22 > m33 ) {
    
                    s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
    
                    this._w = ( m13 - m31 ) / s;
                    this._x = ( m12 + m21 ) / s;
                    this._y = 0.25 * s;
                    this._z = ( m23 + m32 ) / s;
    
                } else {
    
                    s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
    
                    this._w = ( m21 - m12 ) / s;
                    this._x = ( m13 + m31 ) / s;
                    this._y = ( m23 + m32 ) / s;
                    this._z = 0.25 * s;
    
                }
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            setFromUnitVectors: function ( vFrom, vTo ) {
    
                // assumes direction vectors vFrom and vTo are normalized
    
                var EPS = 0.000001;
    
                var r = vFrom.dot( vTo ) + 1;
    
                if ( r < EPS ) {
    
                    r = 0;
    
                    if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
    
                        this._x = - vFrom.y;
                        this._y = vFrom.x;
                        this._z = 0;
                        this._w = r;
    
                    } else {
    
                        this._x = 0;
                        this._y = - vFrom.z;
                        this._z = vFrom.y;
                        this._w = r;
    
                    }
    
                } else {
    
                    // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
    
                    this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
                    this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
                    this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
                    this._w = r;
    
                }
    
                return this.normalize();
    
            },
    
            angleTo: function ( q ) {
    
                return 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );
    
            },
    
            rotateTowards: function ( q, step ) {
    
                var angle = this.angleTo( q );
    
                if ( angle === 0 ) return this;
    
                var t = Math.min( 1, step / angle );
    
                this.slerp( q, t );
    
                return this;
    
            },
    
            inverse: function () {
    
                // quaternion is assumed to have unit length
    
                return this.conjugate();
    
            },
    
            conjugate: function () {
    
                this._x *= - 1;
                this._y *= - 1;
                this._z *= - 1;
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            dot: function ( v ) {
    
                return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    
            },
    
            lengthSq: function () {
    
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    
            },
    
            length: function () {
    
                return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
    
            },
    
            normalize: function () {
    
                var l = this.length();
    
                if ( l === 0 ) {
    
                    this._x = 0;
                    this._y = 0;
                    this._z = 0;
                    this._w = 1;
    
                } else {
    
                    l = 1 / l;
    
                    this._x = this._x * l;
                    this._y = this._y * l;
                    this._z = this._z * l;
                    this._w = this._w * l;
    
                }
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            multiply: function ( q, p ) {
    
                if ( p !== undefined ) {
    
                    console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
                    return this.multiplyQuaternions( q, p );
    
                }
    
                return this.multiplyQuaternions( this, q );
    
            },
    
            premultiply: function ( q ) {
    
                return this.multiplyQuaternions( q, this );
    
            },
    
            multiplyQuaternions: function ( a, b ) {
    
                // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
    
                var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
                var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
    
                this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
                this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
                this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
                this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            slerp: function ( qb, t ) {
    
                if ( t === 0 ) return this;
                if ( t === 1 ) return this.copy( qb );
    
                var x = this._x, y = this._y, z = this._z, w = this._w;
    
                // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
    
                var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
    
                if ( cosHalfTheta < 0 ) {
    
                    this._w = - qb._w;
                    this._x = - qb._x;
                    this._y = - qb._y;
                    this._z = - qb._z;
    
                    cosHalfTheta = - cosHalfTheta;
    
                } else {
    
                    this.copy( qb );
    
                }
    
                if ( cosHalfTheta >= 1.0 ) {
    
                    this._w = w;
                    this._x = x;
                    this._y = y;
                    this._z = z;
    
                    return this;
    
                }
    
                var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
    
                if ( sqrSinHalfTheta <= Number.EPSILON ) {
    
                    var s = 1 - t;
                    this._w = s * w + t * this._w;
                    this._x = s * x + t * this._x;
                    this._y = s * y + t * this._y;
                    this._z = s * z + t * this._z;
    
                    return this.normalize();
    
                }
    
                var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
                var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
                var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
                    ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
    
                this._w = ( w * ratioA + this._w * ratioB );
                this._x = ( x * ratioA + this._x * ratioB );
                this._y = ( y * ratioA + this._y * ratioB );
                this._z = ( z * ratioA + this._z * ratioB );
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            equals: function ( quaternion ) {
    
                return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
    
            },
    
            fromArray: function ( array, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                this._x = array[ offset ];
                this._y = array[ offset + 1 ];
                this._z = array[ offset + 2 ];
                this._w = array[ offset + 3 ];
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            toArray: function ( array, offset ) {
    
                if ( array === undefined ) array = [];
                if ( offset === undefined ) offset = 0;
    
                array[ offset ] = this._x;
                array[ offset + 1 ] = this._y;
                array[ offset + 2 ] = this._z;
                array[ offset + 3 ] = this._w;
    
                return array;
    
            },
    
            onChange: function ( callback ) {
    
                this.onChangeCallback = callback;
    
                return this;
    
            },
    
            onChangeCallback: function () {}
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author kile / http://kile.stravaganza.org/
         * @author philogb / http://blog.thejit.org/
         * @author mikael emtinger / http://gomo.se/
         * @author egraether / http://egraether.com/
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function Vector3( x, y, z ) {
    
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
    
        }
    
        Object.assign( Vector3.prototype, {
    
            isVector3: true,
    
            set: function ( x, y, z ) {
    
                this.x = x;
                this.y = y;
                this.z = z;
    
                return this;
    
            },
    
            setScalar: function ( scalar ) {
    
                this.x = scalar;
                this.y = scalar;
                this.z = scalar;
    
                return this;
    
            },
    
            setX: function ( x ) {
    
                this.x = x;
    
                return this;
    
            },
    
            setY: function ( y ) {
    
                this.y = y;
    
                return this;
    
            },
    
            setZ: function ( z ) {
    
                this.z = z;
    
                return this;
    
            },
    
            setComponent: function ( index, value ) {
    
                switch ( index ) {
    
                    case 0: this.x = value; break;
                    case 1: this.y = value; break;
                    case 2: this.z = value; break;
                    default: throw new Error( 'index is out of range: ' + index );
    
                }
    
                return this;
    
            },
    
            getComponent: function ( index ) {
    
                switch ( index ) {
    
                    case 0: return this.x;
                    case 1: return this.y;
                    case 2: return this.z;
                    default: throw new Error( 'index is out of range: ' + index );
    
                }
    
            },
    
            clone: function () {
    
                return new this.constructor( this.x, this.y, this.z );
    
            },
    
            copy: function ( v ) {
    
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
    
                return this;
    
            },
    
            add: function ( v, w ) {
    
                if ( w !== undefined ) {
    
                    console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                    return this.addVectors( v, w );
    
                }
    
                this.x += v.x;
                this.y += v.y;
                this.z += v.z;
    
                return this;
    
            },
    
            addScalar: function ( s ) {
    
                this.x += s;
                this.y += s;
                this.z += s;
    
                return this;
    
            },
    
            addVectors: function ( a, b ) {
    
                this.x = a.x + b.x;
                this.y = a.y + b.y;
                this.z = a.z + b.z;
    
                return this;
    
            },
    
            addScaledVector: function ( v, s ) {
    
                this.x += v.x * s;
                this.y += v.y * s;
                this.z += v.z * s;
    
                return this;
    
            },
    
            sub: function ( v, w ) {
    
                if ( w !== undefined ) {
    
                    console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                    return this.subVectors( v, w );
    
                }
    
                this.x -= v.x;
                this.y -= v.y;
                this.z -= v.z;
    
                return this;
    
            },
    
            subScalar: function ( s ) {
    
                this.x -= s;
                this.y -= s;
                this.z -= s;
    
                return this;
    
            },
    
            subVectors: function ( a, b ) {
    
                this.x = a.x - b.x;
                this.y = a.y - b.y;
                this.z = a.z - b.z;
    
                return this;
    
            },
    
            multiply: function ( v, w ) {
    
                if ( w !== undefined ) {
    
                    console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
                    return this.multiplyVectors( v, w );
    
                }
    
                this.x *= v.x;
                this.y *= v.y;
                this.z *= v.z;
    
                return this;
    
            },
    
            multiplyScalar: function ( scalar ) {
    
                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
    
                return this;
    
            },
    
            multiplyVectors: function ( a, b ) {
    
                this.x = a.x * b.x;
                this.y = a.y * b.y;
                this.z = a.z * b.z;
    
                return this;
    
            },
    
            applyEuler: function () {
    
                var quaternion = new Quaternion();
    
                return function applyEuler( euler ) {
    
                    if ( ! ( euler && euler.isEuler ) ) {
    
                        console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );
    
                    }
    
                    return this.applyQuaternion( quaternion.setFromEuler( euler ) );
    
                };
    
            }(),
    
            applyAxisAngle: function () {
    
                var quaternion = new Quaternion();
    
                return function applyAxisAngle( axis, angle ) {
    
                    return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );
    
                };
    
            }(),
    
            applyMatrix3: function ( m ) {
    
                var x = this.x, y = this.y, z = this.z;
                var e = m.elements;
    
                this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
                this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
                this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
    
                return this;
    
            },
    
            applyMatrix4: function ( m ) {
    
                var x = this.x, y = this.y, z = this.z;
                var e = m.elements;
    
                var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );
    
                this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
                this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
                this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;
    
                return this;
    
            },
    
            applyQuaternion: function ( q ) {
    
                var x = this.x, y = this.y, z = this.z;
                var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
    
                // calculate quat * vector
    
                var ix = qw * x + qy * z - qz * y;
                var iy = qw * y + qz * x - qx * z;
                var iz = qw * z + qx * y - qy * x;
                var iw = - qx * x - qy * y - qz * z;
    
                // calculate result * inverse quat
    
                this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
                this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
                this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
    
                return this;
    
            },
    
            project: function ( camera ) {
    
                return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );
    
            },
    
            unproject: function ( camera ) {
    
                return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );
    
            },
    
            transformDirection: function ( m ) {
    
                // input: THREE.Matrix4 affine matrix
                // vector interpreted as a direction
    
                var x = this.x, y = this.y, z = this.z;
                var e = m.elements;
    
                this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
                this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
                this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
    
                return this.normalize();
    
            },
    
            divide: function ( v ) {
    
                this.x /= v.x;
                this.y /= v.y;
                this.z /= v.z;
    
                return this;
    
            },
    
            divideScalar: function ( scalar ) {
    
                return this.multiplyScalar( 1 / scalar );
    
            },
    
            min: function ( v ) {
    
                this.x = Math.min( this.x, v.x );
                this.y = Math.min( this.y, v.y );
                this.z = Math.min( this.z, v.z );
    
                return this;
    
            },
    
            max: function ( v ) {
    
                this.x = Math.max( this.x, v.x );
                this.y = Math.max( this.y, v.y );
                this.z = Math.max( this.z, v.z );
    
                return this;
    
            },
    
            clamp: function ( min, max ) {
    
                // assumes min < max, componentwise
    
                this.x = Math.max( min.x, Math.min( max.x, this.x ) );
                this.y = Math.max( min.y, Math.min( max.y, this.y ) );
                this.z = Math.max( min.z, Math.min( max.z, this.z ) );
    
                return this;
    
            },
    
            clampScalar: function () {
    
                var min = new Vector3();
                var max = new Vector3();
    
                return function clampScalar( minVal, maxVal ) {
    
                    min.set( minVal, minVal, minVal );
                    max.set( maxVal, maxVal, maxVal );
    
                    return this.clamp( min, max );
    
                };
    
            }(),
    
            clampLength: function ( min, max ) {
    
                var length = this.length();
    
                return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
    
            },
    
            floor: function () {
    
                this.x = Math.floor( this.x );
                this.y = Math.floor( this.y );
                this.z = Math.floor( this.z );
    
                return this;
    
            },
    
            ceil: function () {
    
                this.x = Math.ceil( this.x );
                this.y = Math.ceil( this.y );
                this.z = Math.ceil( this.z );
    
                return this;
    
            },
    
            round: function () {
    
                this.x = Math.round( this.x );
                this.y = Math.round( this.y );
                this.z = Math.round( this.z );
    
                return this;
    
            },
    
            roundToZero: function () {
    
                this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
                this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
                this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
    
                return this;
    
            },
    
            negate: function () {
    
                this.x = - this.x;
                this.y = - this.y;
                this.z = - this.z;
    
                return this;
    
            },
    
            dot: function ( v ) {
    
                return this.x * v.x + this.y * v.y + this.z * v.z;
    
            },
    
            // TODO lengthSquared?
    
            lengthSq: function () {
    
                return this.x * this.x + this.y * this.y + this.z * this.z;
    
            },
    
            length: function () {
    
                return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
    
            },
    
            manhattanLength: function () {
    
                return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
    
            },
    
            normalize: function () {
    
                return this.divideScalar( this.length() || 1 );
    
            },
    
            setLength: function ( length ) {
    
                return this.normalize().multiplyScalar( length );
    
            },
    
            lerp: function ( v, alpha ) {
    
                this.x += ( v.x - this.x ) * alpha;
                this.y += ( v.y - this.y ) * alpha;
                this.z += ( v.z - this.z ) * alpha;
    
                return this;
    
            },
    
            lerpVectors: function ( v1, v2, alpha ) {
    
                return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
    
            },
    
            cross: function ( v, w ) {
    
                if ( w !== undefined ) {
    
                    console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
                    return this.crossVectors( v, w );
    
                }
    
                return this.crossVectors( this, v );
    
            },
    
            crossVectors: function ( a, b ) {
    
                var ax = a.x, ay = a.y, az = a.z;
                var bx = b.x, by = b.y, bz = b.z;
    
                this.x = ay * bz - az * by;
                this.y = az * bx - ax * bz;
                this.z = ax * by - ay * bx;
    
                return this;
    
            },
    
            projectOnVector: function ( vector ) {
    
                var scalar = vector.dot( this ) / vector.lengthSq();
    
                return this.copy( vector ).multiplyScalar( scalar );
    
            },
    
            projectOnPlane: function () {
    
                var v1 = new Vector3();
    
                return function projectOnPlane( planeNormal ) {
    
                    v1.copy( this ).projectOnVector( planeNormal );
    
                    return this.sub( v1 );
    
                };
    
            }(),
    
            reflect: function () {
    
                // reflect incident vector off plane orthogonal to normal
                // normal is assumed to have unit length
    
                var v1 = new Vector3();
    
                return function reflect( normal ) {
    
                    return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
    
                };
    
            }(),
    
            angleTo: function ( v ) {
    
                var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );
    
                // clamp, to handle numerical problems
    
                return Math.acos( _Math.clamp( theta, - 1, 1 ) );
    
            },
    
            distanceTo: function ( v ) {
    
                return Math.sqrt( this.distanceToSquared( v ) );
    
            },
    
            distanceToSquared: function ( v ) {
    
                var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
    
                return dx * dx + dy * dy + dz * dz;
    
            },
    
            manhattanDistanceTo: function ( v ) {
    
                return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );
    
            },
    
            setFromSpherical: function ( s ) {
    
                return this.setFromSphericalCoords( s.radius, s.phi, s.theta );
    
            },
    
            setFromSphericalCoords: function ( radius, phi, theta ) {
    
                var sinPhiRadius = Math.sin( phi ) * radius;
    
                this.x = sinPhiRadius * Math.sin( theta );
                this.y = Math.cos( phi ) * radius;
                this.z = sinPhiRadius * Math.cos( theta );
    
                return this;
    
            },
    
            setFromCylindrical: function ( c ) {
    
                return this.setFromCylindricalCoords( c.radius, c.theta, c.y );
    
            },
    
            setFromCylindricalCoords: function ( radius, theta, y ) {
    
                this.x = radius * Math.sin( theta );
                this.y = y;
                this.z = radius * Math.cos( theta );
    
                return this;
    
            },
    
            setFromMatrixPosition: function ( m ) {
    
                var e = m.elements;
    
                this.x = e[ 12 ];
                this.y = e[ 13 ];
                this.z = e[ 14 ];
    
                return this;
    
            },
    
            setFromMatrixScale: function ( m ) {
    
                var sx = this.setFromMatrixColumn( m, 0 ).length();
                var sy = this.setFromMatrixColumn( m, 1 ).length();
                var sz = this.setFromMatrixColumn( m, 2 ).length();
    
                this.x = sx;
                this.y = sy;
                this.z = sz;
    
                return this;
    
            },
    
            setFromMatrixColumn: function ( m, index ) {
    
                return this.fromArray( m.elements, index * 4 );
    
            },
    
            equals: function ( v ) {
    
                return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
    
            },
    
            fromArray: function ( array, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                this.x = array[ offset ];
                this.y = array[ offset + 1 ];
                this.z = array[ offset + 2 ];
    
                return this;
    
            },
    
            toArray: function ( array, offset ) {
    
                if ( array === undefined ) array = [];
                if ( offset === undefined ) offset = 0;
    
                array[ offset ] = this.x;
                array[ offset + 1 ] = this.y;
                array[ offset + 2 ] = this.z;
    
                return array;
    
            },
    
            fromBufferAttribute: function ( attribute, index, offset ) {
    
                if ( offset !== undefined ) {
    
                    console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );
    
                }
    
                this.x = attribute.getX( index );
                this.y = attribute.getY( index );
                this.z = attribute.getZ( index );
    
                return this;
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author WestLangley / http://github.com/WestLangley
         * @author bhouston / http://clara.io
         * @author tschw
         */
    
        function Matrix3() {
    
            this.elements = [
    
                1, 0, 0,
                0, 1, 0,
                0, 0, 1
    
            ];
    
            if ( arguments.length > 0 ) {
    
                console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );
    
            }
    
        }
    
        Object.assign( Matrix3.prototype, {
    
            isMatrix3: true,
    
            set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
    
                var te = this.elements;
    
                te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
                te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
                te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;
    
                return this;
    
            },
    
            identity: function () {
    
                this.set(
    
                    1, 0, 0,
                    0, 1, 0,
                    0, 0, 1
    
                );
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().fromArray( this.elements );
    
            },
    
            copy: function ( m ) {
    
                var te = this.elements;
                var me = m.elements;
    
                te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
                te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
                te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];
    
                return this;
    
            },
    
            setFromMatrix4: function ( m ) {
    
                var me = m.elements;
    
                this.set(
    
                    me[ 0 ], me[ 4 ], me[ 8 ],
                    me[ 1 ], me[ 5 ], me[ 9 ],
                    me[ 2 ], me[ 6 ], me[ 10 ]
    
                );
    
                return this;
    
            },
    
            applyToBufferAttribute: function () {
    
                var v1 = new Vector3();
    
                return function applyToBufferAttribute( attribute ) {
    
                    for ( var i = 0, l = attribute.count; i < l; i ++ ) {
    
                        v1.x = attribute.getX( i );
                        v1.y = attribute.getY( i );
                        v1.z = attribute.getZ( i );
    
                        v1.applyMatrix3( this );
    
                        attribute.setXYZ( i, v1.x, v1.y, v1.z );
    
                    }
    
                    return attribute;
    
                };
    
            }(),
    
            multiply: function ( m ) {
    
                return this.multiplyMatrices( this, m );
    
            },
    
            premultiply: function ( m ) {
    
                return this.multiplyMatrices( m, this );
    
            },
    
            multiplyMatrices: function ( a, b ) {
    
                var ae = a.elements;
                var be = b.elements;
                var te = this.elements;
    
                var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
                var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
                var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];
    
                var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
                var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
                var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];
    
                te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
                te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
                te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;
    
                te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
                te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
                te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;
    
                te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
                te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
                te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;
    
                return this;
    
            },
    
            multiplyScalar: function ( s ) {
    
                var te = this.elements;
    
                te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
                te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
                te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
    
                return this;
    
            },
    
            determinant: function () {
    
                var te = this.elements;
    
                var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
                    d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
                    g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
    
                return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    
            },
    
            getInverse: function ( matrix, throwOnDegenerate ) {
    
                if ( matrix && matrix.isMatrix4 ) {
    
                    console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );
    
                }
    
                var me = matrix.elements,
                    te = this.elements,
    
                    n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
                    n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
                    n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],
    
                    t11 = n33 * n22 - n32 * n23,
                    t12 = n32 * n13 - n33 * n12,
                    t13 = n23 * n12 - n22 * n13,
    
                    det = n11 * t11 + n21 * t12 + n31 * t13;
    
                if ( det === 0 ) {
    
                    var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
    
                    if ( throwOnDegenerate === true ) {
    
                        throw new Error( msg );
    
                    } else {
    
                        console.warn( msg );
    
                    }
    
                    return this.identity();
    
                }
    
                var detInv = 1 / det;
    
                te[ 0 ] = t11 * detInv;
                te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
                te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;
    
                te[ 3 ] = t12 * detInv;
                te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
                te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;
    
                te[ 6 ] = t13 * detInv;
                te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
                te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;
    
                return this;
    
            },
    
            transpose: function () {
    
                var tmp, m = this.elements;
    
                tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
                tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
                tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
    
                return this;
    
            },
    
            getNormalMatrix: function ( matrix4 ) {
    
                return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();
    
            },
    
            transposeIntoArray: function ( r ) {
    
                var m = this.elements;
    
                r[ 0 ] = m[ 0 ];
                r[ 1 ] = m[ 3 ];
                r[ 2 ] = m[ 6 ];
                r[ 3 ] = m[ 1 ];
                r[ 4 ] = m[ 4 ];
                r[ 5 ] = m[ 7 ];
                r[ 6 ] = m[ 2 ];
                r[ 7 ] = m[ 5 ];
                r[ 8 ] = m[ 8 ];
    
                return this;
    
            },
    
            setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {
    
                var c = Math.cos( rotation );
                var s = Math.sin( rotation );
    
                this.set(
                    sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
                    - sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
                    0, 0, 1
                );
    
            },
    
            scale: function ( sx, sy ) {
    
                var te = this.elements;
    
                te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
                te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;
    
                return this;
    
            },
    
            rotate: function ( theta ) {
    
                var c = Math.cos( theta );
                var s = Math.sin( theta );
    
                var te = this.elements;
    
                var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
                var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];
    
                te[ 0 ] = c * a11 + s * a21;
                te[ 3 ] = c * a12 + s * a22;
                te[ 6 ] = c * a13 + s * a23;
    
                te[ 1 ] = - s * a11 + c * a21;
                te[ 4 ] = - s * a12 + c * a22;
                te[ 7 ] = - s * a13 + c * a23;
    
                return this;
    
            },
    
            translate: function ( tx, ty ) {
    
                var te = this.elements;
    
                te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
                te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];
    
                return this;
    
            },
    
            equals: function ( matrix ) {
    
                var te = this.elements;
                var me = matrix.elements;
    
                for ( var i = 0; i < 9; i ++ ) {
    
                    if ( te[ i ] !== me[ i ] ) return false;
    
                }
    
                return true;
    
            },
    
            fromArray: function ( array, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                for ( var i = 0; i < 9; i ++ ) {
    
                    this.elements[ i ] = array[ i + offset ];
    
                }
    
                return this;
    
            },
    
            toArray: function ( array, offset ) {
    
                if ( array === undefined ) array = [];
                if ( offset === undefined ) offset = 0;
    
                var te = this.elements;
    
                array[ offset ] = te[ 0 ];
                array[ offset + 1 ] = te[ 1 ];
                array[ offset + 2 ] = te[ 2 ];
    
                array[ offset + 3 ] = te[ 3 ];
                array[ offset + 4 ] = te[ 4 ];
                array[ offset + 5 ] = te[ 5 ];
    
                array[ offset + 6 ] = te[ 6 ];
                array[ offset + 7 ] = te[ 7 ];
                array[ offset + 8 ] = te[ 8 ];
    
                return array;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author szimek / https://github.com/szimek/
         */
    
        var _canvas;
    
        var ImageUtils = {
    
            getDataURL: function ( image ) {
    
                var canvas;
    
                if ( typeof HTMLCanvasElement == 'undefined' ) {
    
                    return image.src;
    
                } else if ( image instanceof HTMLCanvasElement ) {
    
                    canvas = image;
    
                } else {
    
                    if ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
    
                    _canvas.width = image.width;
                    _canvas.height = image.height;
    
                    var context = _canvas.getContext( '2d' );
    
                    if ( image instanceof ImageData ) {
    
                        context.putImageData( image, 0, 0 );
    
                    } else {
    
                        context.drawImage( image, 0, 0, image.width, image.height );
    
                    }
    
                    canvas = _canvas;
    
                }
    
                if ( canvas.width > 2048 || canvas.height > 2048 ) {
    
                    return canvas.toDataURL( 'image/jpeg', 0.6 );
    
                } else {
    
                    return canvas.toDataURL( 'image/png' );
    
                }
    
            }
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author szimek / https://github.com/szimek/
         */
    
        var textureId = 0;
    
        function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
    
            Object.defineProperty( this, 'id', { value: textureId ++ } );
    
            this.uuid = _Math.generateUUID();
    
            this.name = '';
    
            this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
            this.mipmaps = [];
    
            this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;
    
            this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
            this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;
    
            this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
            this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;
    
            this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
    
            this.format = format !== undefined ? format : RGBAFormat;
            this.type = type !== undefined ? type : UnsignedByteType;
    
            this.offset = new Vector2( 0, 0 );
            this.repeat = new Vector2( 1, 1 );
            this.center = new Vector2( 0, 0 );
            this.rotation = 0;
    
            this.matrixAutoUpdate = true;
            this.matrix = new Matrix3();
    
            this.generateMipmaps = true;
            this.premultiplyAlpha = false;
            this.flipY = true;
            this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
    
            // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
            //
            // Also changing the encoding after already used by a Material will not automatically make the Material
            // update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
            this.encoding = encoding !== undefined ? encoding : LinearEncoding;
    
            this.version = 0;
            this.onUpdate = null;
    
        }
    
        Texture.DEFAULT_IMAGE = undefined;
        Texture.DEFAULT_MAPPING = UVMapping;
    
        Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
    
            constructor: Texture,
    
            isTexture: true,
    
            updateMatrix: function () {
    
                this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( source ) {
    
                this.name = source.name;
    
                this.image = source.image;
                this.mipmaps = source.mipmaps.slice( 0 );
    
                this.mapping = source.mapping;
    
                this.wrapS = source.wrapS;
                this.wrapT = source.wrapT;
    
                this.magFilter = source.magFilter;
                this.minFilter = source.minFilter;
    
                this.anisotropy = source.anisotropy;
    
                this.format = source.format;
                this.type = source.type;
    
                this.offset.copy( source.offset );
                this.repeat.copy( source.repeat );
                this.center.copy( source.center );
                this.rotation = source.rotation;
    
                this.matrixAutoUpdate = source.matrixAutoUpdate;
                this.matrix.copy( source.matrix );
    
                this.generateMipmaps = source.generateMipmaps;
                this.premultiplyAlpha = source.premultiplyAlpha;
                this.flipY = source.flipY;
                this.unpackAlignment = source.unpackAlignment;
                this.encoding = source.encoding;
    
                return this;
    
            },
    
            toJSON: function ( meta ) {
    
                var isRootObject = ( meta === undefined || typeof meta === 'string' );
    
                if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {
    
                    return meta.textures[ this.uuid ];
    
                }
    
                var output = {
    
                    metadata: {
                        version: 4.5,
                        type: 'Texture',
                        generator: 'Texture.toJSON'
                    },
    
                    uuid: this.uuid,
                    name: this.name,
    
                    mapping: this.mapping,
    
                    repeat: [ this.repeat.x, this.repeat.y ],
                    offset: [ this.offset.x, this.offset.y ],
                    center: [ this.center.x, this.center.y ],
                    rotation: this.rotation,
    
                    wrap: [ this.wrapS, this.wrapT ],
    
                    format: this.format,
                    type: this.type,
                    encoding: this.encoding,
    
                    minFilter: this.minFilter,
                    magFilter: this.magFilter,
                    anisotropy: this.anisotropy,
    
                    flipY: this.flipY,
    
                    premultiplyAlpha: this.premultiplyAlpha,
                    unpackAlignment: this.unpackAlignment
    
                };
    
                if ( this.image !== undefined ) {
    
                    // TODO: Move to THREE.Image
    
                    var image = this.image;
    
                    if ( image.uuid === undefined ) {
    
                        image.uuid = _Math.generateUUID(); // UGH
    
                    }
    
                    if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {
    
                        var url;
    
                        if ( Array.isArray( image ) ) {
    
                            // process array of images e.g. CubeTexture
    
                            url = [];
    
                            for ( var i = 0, l = image.length; i < l; i ++ ) {
    
                                url.push( ImageUtils.getDataURL( image[ i ] ) );
    
                            }
    
                        } else {
    
                            // process single image
    
                            url = ImageUtils.getDataURL( image );
    
                        }
    
                        meta.images[ image.uuid ] = {
                            uuid: image.uuid,
                            url: url
                        };
    
                    }
    
                    output.image = image.uuid;
    
                }
    
                if ( ! isRootObject ) {
    
                    meta.textures[ this.uuid ] = output;
    
                }
    
                return output;
    
            },
    
            dispose: function () {
    
                this.dispatchEvent( { type: 'dispose' } );
    
            },
    
            transformUv: function ( uv ) {
    
                if ( this.mapping !== UVMapping ) return uv;
    
                uv.applyMatrix3( this.matrix );
    
                if ( uv.x < 0 || uv.x > 1 ) {
    
                    switch ( this.wrapS ) {
    
                        case RepeatWrapping:
    
                            uv.x = uv.x - Math.floor( uv.x );
                            break;
    
                        case ClampToEdgeWrapping:
    
                            uv.x = uv.x < 0 ? 0 : 1;
                            break;
    
                        case MirroredRepeatWrapping:
    
                            if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
    
                                uv.x = Math.ceil( uv.x ) - uv.x;
    
                            } else {
    
                                uv.x = uv.x - Math.floor( uv.x );
    
                            }
                            break;
    
                    }
    
                }
    
                if ( uv.y < 0 || uv.y > 1 ) {
    
                    switch ( this.wrapT ) {
    
                        case RepeatWrapping:
    
                            uv.y = uv.y - Math.floor( uv.y );
                            break;
    
                        case ClampToEdgeWrapping:
    
                            uv.y = uv.y < 0 ? 0 : 1;
                            break;
    
                        case MirroredRepeatWrapping:
    
                            if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
    
                                uv.y = Math.ceil( uv.y ) - uv.y;
    
                            } else {
    
                                uv.y = uv.y - Math.floor( uv.y );
    
                            }
                            break;
    
                    }
    
                }
    
                if ( this.flipY ) {
    
                    uv.y = 1 - uv.y;
    
                }
    
                return uv;
    
            }
    
        } );
    
        Object.defineProperty( Texture.prototype, "needsUpdate", {
    
            set: function ( value ) {
    
                if ( value === true ) this.version ++;
    
            }
    
        } );
    
        /**
         * @author supereggbert / http://www.paulbrunt.co.uk/
         * @author philogb / http://blog.thejit.org/
         * @author mikael emtinger / http://gomo.se/
         * @author egraether / http://egraether.com/
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function Vector4( x, y, z, w ) {
    
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = ( w !== undefined ) ? w : 1;
    
        }
    
        Object.assign( Vector4.prototype, {
    
            isVector4: true,
    
            set: function ( x, y, z, w ) {
    
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
    
                return this;
    
            },
    
            setScalar: function ( scalar ) {
    
                this.x = scalar;
                this.y = scalar;
                this.z = scalar;
                this.w = scalar;
    
                return this;
    
            },
    
            setX: function ( x ) {
    
                this.x = x;
    
                return this;
    
            },
    
            setY: function ( y ) {
    
                this.y = y;
    
                return this;
    
            },
    
            setZ: function ( z ) {
    
                this.z = z;
    
                return this;
    
            },
    
            setW: function ( w ) {
    
                this.w = w;
    
                return this;
    
            },
    
            setComponent: function ( index, value ) {
    
                switch ( index ) {
    
                    case 0: this.x = value; break;
                    case 1: this.y = value; break;
                    case 2: this.z = value; break;
                    case 3: this.w = value; break;
                    default: throw new Error( 'index is out of range: ' + index );
    
                }
    
                return this;
    
            },
    
            getComponent: function ( index ) {
    
                switch ( index ) {
    
                    case 0: return this.x;
                    case 1: return this.y;
                    case 2: return this.z;
                    case 3: return this.w;
                    default: throw new Error( 'index is out of range: ' + index );
    
                }
    
            },
    
            clone: function () {
    
                return new this.constructor( this.x, this.y, this.z, this.w );
    
            },
    
            copy: function ( v ) {
    
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
                this.w = ( v.w !== undefined ) ? v.w : 1;
    
                return this;
    
            },
    
            add: function ( v, w ) {
    
                if ( w !== undefined ) {
    
                    console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                    return this.addVectors( v, w );
    
                }
    
                this.x += v.x;
                this.y += v.y;
                this.z += v.z;
                this.w += v.w;
    
                return this;
    
            },
    
            addScalar: function ( s ) {
    
                this.x += s;
                this.y += s;
                this.z += s;
                this.w += s;
    
                return this;
    
            },
    
            addVectors: function ( a, b ) {
    
                this.x = a.x + b.x;
                this.y = a.y + b.y;
                this.z = a.z + b.z;
                this.w = a.w + b.w;
    
                return this;
    
            },
    
            addScaledVector: function ( v, s ) {
    
                this.x += v.x * s;
                this.y += v.y * s;
                this.z += v.z * s;
                this.w += v.w * s;
    
                return this;
    
            },
    
            sub: function ( v, w ) {
    
                if ( w !== undefined ) {
    
                    console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                    return this.subVectors( v, w );
    
                }
    
                this.x -= v.x;
                this.y -= v.y;
                this.z -= v.z;
                this.w -= v.w;
    
                return this;
    
            },
    
            subScalar: function ( s ) {
    
                this.x -= s;
                this.y -= s;
                this.z -= s;
                this.w -= s;
    
                return this;
    
            },
    
            subVectors: function ( a, b ) {
    
                this.x = a.x - b.x;
                this.y = a.y - b.y;
                this.z = a.z - b.z;
                this.w = a.w - b.w;
    
                return this;
    
            },
    
            multiplyScalar: function ( scalar ) {
    
                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                this.w *= scalar;
    
                return this;
    
            },
    
            applyMatrix4: function ( m ) {
    
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var e = m.elements;
    
                this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
                this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
                this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
                this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
    
                return this;
    
            },
    
            divideScalar: function ( scalar ) {
    
                return this.multiplyScalar( 1 / scalar );
    
            },
    
            setAxisAngleFromQuaternion: function ( q ) {
    
                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
    
                // q is assumed to be normalized
    
                this.w = 2 * Math.acos( q.w );
    
                var s = Math.sqrt( 1 - q.w * q.w );
    
                if ( s < 0.0001 ) {
    
                    this.x = 1;
                    this.y = 0;
                    this.z = 0;
    
                } else {
    
                    this.x = q.x / s;
                    this.y = q.y / s;
                    this.z = q.z / s;
    
                }
    
                return this;
    
            },
    
            setAxisAngleFromRotationMatrix: function ( m ) {
    
                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
    
                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    
                var angle, x, y, z,		// variables for result
                    epsilon = 0.01,		// margin to allow for rounding errors
                    epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
    
                    te = m.elements,
    
                    m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
                    m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
                    m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
    
                if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
                     ( Math.abs( m13 - m31 ) < epsilon ) &&
                     ( Math.abs( m23 - m32 ) < epsilon ) ) {
    
                    // singularity found
                    // first check for identity matrix which must have +1 for all terms
                    // in leading diagonal and zero in other terms
    
                    if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
                         ( Math.abs( m13 + m31 ) < epsilon2 ) &&
                         ( Math.abs( m23 + m32 ) < epsilon2 ) &&
                         ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
    
                        // this singularity is identity matrix so angle = 0
    
                        this.set( 1, 0, 0, 0 );
    
                        return this; // zero angle, arbitrary axis
    
                    }
    
                    // otherwise this singularity is angle = 180
    
                    angle = Math.PI;
    
                    var xx = ( m11 + 1 ) / 2;
                    var yy = ( m22 + 1 ) / 2;
                    var zz = ( m33 + 1 ) / 2;
                    var xy = ( m12 + m21 ) / 4;
                    var xz = ( m13 + m31 ) / 4;
                    var yz = ( m23 + m32 ) / 4;
    
                    if ( ( xx > yy ) && ( xx > zz ) ) {
    
                        // m11 is the largest diagonal term
    
                        if ( xx < epsilon ) {
    
                            x = 0;
                            y = 0.707106781;
                            z = 0.707106781;
    
                        } else {
    
                            x = Math.sqrt( xx );
                            y = xy / x;
                            z = xz / x;
    
                        }
    
                    } else if ( yy > zz ) {
    
                        // m22 is the largest diagonal term
    
                        if ( yy < epsilon ) {
    
                            x = 0.707106781;
                            y = 0;
                            z = 0.707106781;
    
                        } else {
    
                            y = Math.sqrt( yy );
                            x = xy / y;
                            z = yz / y;
    
                        }
    
                    } else {
    
                        // m33 is the largest diagonal term so base result on this
    
                        if ( zz < epsilon ) {
    
                            x = 0.707106781;
                            y = 0.707106781;
                            z = 0;
    
                        } else {
    
                            z = Math.sqrt( zz );
                            x = xz / z;
                            y = yz / z;
    
                        }
    
                    }
    
                    this.set( x, y, z, angle );
    
                    return this; // return 180 deg rotation
    
                }
    
                // as we have reached here there are no singularities so we can handle normally
    
                var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
                                   ( m13 - m31 ) * ( m13 - m31 ) +
                                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
    
                if ( Math.abs( s ) < 0.001 ) s = 1;
    
                // prevent divide by zero, should not happen if matrix is orthogonal and should be
                // caught by singularity test above, but I've left it in just in case
    
                this.x = ( m32 - m23 ) / s;
                this.y = ( m13 - m31 ) / s;
                this.z = ( m21 - m12 ) / s;
                this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
    
                return this;
    
            },
    
            min: function ( v ) {
    
                this.x = Math.min( this.x, v.x );
                this.y = Math.min( this.y, v.y );
                this.z = Math.min( this.z, v.z );
                this.w = Math.min( this.w, v.w );
    
                return this;
    
            },
    
            max: function ( v ) {
    
                this.x = Math.max( this.x, v.x );
                this.y = Math.max( this.y, v.y );
                this.z = Math.max( this.z, v.z );
                this.w = Math.max( this.w, v.w );
    
                return this;
    
            },
    
            clamp: function ( min, max ) {
    
                // assumes min < max, componentwise
    
                this.x = Math.max( min.x, Math.min( max.x, this.x ) );
                this.y = Math.max( min.y, Math.min( max.y, this.y ) );
                this.z = Math.max( min.z, Math.min( max.z, this.z ) );
                this.w = Math.max( min.w, Math.min( max.w, this.w ) );
    
                return this;
    
            },
    
            clampScalar: function () {
    
                var min, max;
    
                return function clampScalar( minVal, maxVal ) {
    
                    if ( min === undefined ) {
    
                        min = new Vector4();
                        max = new Vector4();
    
                    }
    
                    min.set( minVal, minVal, minVal, minVal );
                    max.set( maxVal, maxVal, maxVal, maxVal );
    
                    return this.clamp( min, max );
    
                };
    
            }(),
    
            clampLength: function ( min, max ) {
    
                var length = this.length();
    
                return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
    
            },
    
            floor: function () {
    
                this.x = Math.floor( this.x );
                this.y = Math.floor( this.y );
                this.z = Math.floor( this.z );
                this.w = Math.floor( this.w );
    
                return this;
    
            },
    
            ceil: function () {
    
                this.x = Math.ceil( this.x );
                this.y = Math.ceil( this.y );
                this.z = Math.ceil( this.z );
                this.w = Math.ceil( this.w );
    
                return this;
    
            },
    
            round: function () {
    
                this.x = Math.round( this.x );
                this.y = Math.round( this.y );
                this.z = Math.round( this.z );
                this.w = Math.round( this.w );
    
                return this;
    
            },
    
            roundToZero: function () {
    
                this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
                this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
                this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
                this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
    
                return this;
    
            },
    
            negate: function () {
    
                this.x = - this.x;
                this.y = - this.y;
                this.z = - this.z;
                this.w = - this.w;
    
                return this;
    
            },
    
            dot: function ( v ) {
    
                return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    
            },
    
            lengthSq: function () {
    
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    
            },
    
            length: function () {
    
                return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
    
            },
    
            manhattanLength: function () {
    
                return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
    
            },
    
            normalize: function () {
    
                return this.divideScalar( this.length() || 1 );
    
            },
    
            setLength: function ( length ) {
    
                return this.normalize().multiplyScalar( length );
    
            },
    
            lerp: function ( v, alpha ) {
    
                this.x += ( v.x - this.x ) * alpha;
                this.y += ( v.y - this.y ) * alpha;
                this.z += ( v.z - this.z ) * alpha;
                this.w += ( v.w - this.w ) * alpha;
    
                return this;
    
            },
    
            lerpVectors: function ( v1, v2, alpha ) {
    
                return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
    
            },
    
            equals: function ( v ) {
    
                return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
    
            },
    
            fromArray: function ( array, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                this.x = array[ offset ];
                this.y = array[ offset + 1 ];
                this.z = array[ offset + 2 ];
                this.w = array[ offset + 3 ];
    
                return this;
    
            },
    
            toArray: function ( array, offset ) {
    
                if ( array === undefined ) array = [];
                if ( offset === undefined ) offset = 0;
    
                array[ offset ] = this.x;
                array[ offset + 1 ] = this.y;
                array[ offset + 2 ] = this.z;
                array[ offset + 3 ] = this.w;
    
                return array;
    
            },
    
            fromBufferAttribute: function ( attribute, index, offset ) {
    
                if ( offset !== undefined ) {
    
                    console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );
    
                }
    
                this.x = attribute.getX( index );
                this.y = attribute.getY( index );
                this.z = attribute.getZ( index );
                this.w = attribute.getW( index );
    
                return this;
    
            }
    
        } );
    
        /**
         * @author szimek / https://github.com/szimek/
         * @author alteredq / http://alteredqualia.com/
         * @author Marius Kintel / https://github.com/kintel
         */
    
        /*
         In options, we can specify:
         * Texture parameters for an auto-generated target texture
         * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
        */
        function WebGLRenderTarget( width, height, options ) {
    
            this.width = width;
            this.height = height;
    
            this.scissor = new Vector4( 0, 0, width, height );
            this.scissorTest = false;
    
            this.viewport = new Vector4( 0, 0, width, height );
    
            options = options || {};
    
            this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
    
            this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
            this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
    
            this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
            this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
            this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
    
        }
    
        WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
    
            constructor: WebGLRenderTarget,
    
            isWebGLRenderTarget: true,
    
            setSize: function ( width, height ) {
    
                if ( this.width !== width || this.height !== height ) {
    
                    this.width = width;
                    this.height = height;
    
                    this.dispose();
    
                }
    
                this.viewport.set( 0, 0, width, height );
                this.scissor.set( 0, 0, width, height );
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( source ) {
    
                this.width = source.width;
                this.height = source.height;
    
                this.viewport.copy( source.viewport );
    
                this.texture = source.texture.clone();
    
                this.depthBuffer = source.depthBuffer;
                this.stencilBuffer = source.stencilBuffer;
                this.depthTexture = source.depthTexture;
    
                return this;
    
            },
    
            dispose: function () {
    
                this.dispatchEvent( { type: 'dispose' } );
    
            }
    
        } );
    
        /**
         * @author Mugen87 / https://github.com/Mugen87
         * @author Matt DesLauriers / @mattdesl
         */
    
        function WebGLMultisampleRenderTarget( width, height, options ) {
    
            WebGLRenderTarget.call( this, width, height, options );
    
            this.samples = 4;
    
        }
    
        WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {
    
            constructor: WebGLMultisampleRenderTarget,
    
            isWebGLMultisampleRenderTarget: true,
    
            copy: function ( source ) {
    
                WebGLRenderTarget.prototype.copy.call( this, source );
    
                this.samples = source.samples;
    
                return this;
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com
         */
    
        function WebGLRenderTargetCube( width, height, options ) {
    
            WebGLRenderTarget.call( this, width, height, options );
    
        }
    
        WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
        WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;
    
        WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;
    
        /**
         * @author alteredq / http://alteredqualia.com/
         */
    
        function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
    
            Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
    
            this.image = { data: data, width: width, height: height };
    
            this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
            this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
    
            this.generateMipmaps = false;
            this.flipY = false;
            this.unpackAlignment = 1;
    
        }
    
        DataTexture.prototype = Object.create( Texture.prototype );
        DataTexture.prototype.constructor = DataTexture;
    
        DataTexture.prototype.isDataTexture = true;
    
        /**
         * @author bhouston / http://clara.io
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function Box3( min, max ) {
    
            this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
            this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );
    
        }
    
        Object.assign( Box3.prototype, {
    
            isBox3: true,
    
            set: function ( min, max ) {
    
                this.min.copy( min );
                this.max.copy( max );
    
                return this;
    
            },
    
            setFromArray: function ( array ) {
    
                var minX = + Infinity;
                var minY = + Infinity;
                var minZ = + Infinity;
    
                var maxX = - Infinity;
                var maxY = - Infinity;
                var maxZ = - Infinity;
    
                for ( var i = 0, l = array.length; i < l; i += 3 ) {
    
                    var x = array[ i ];
                    var y = array[ i + 1 ];
                    var z = array[ i + 2 ];
    
                    if ( x < minX ) minX = x;
                    if ( y < minY ) minY = y;
                    if ( z < minZ ) minZ = z;
    
                    if ( x > maxX ) maxX = x;
                    if ( y > maxY ) maxY = y;
                    if ( z > maxZ ) maxZ = z;
    
                }
    
                this.min.set( minX, minY, minZ );
                this.max.set( maxX, maxY, maxZ );
    
                return this;
    
            },
    
            setFromBufferAttribute: function ( attribute ) {
    
                var minX = + Infinity;
                var minY = + Infinity;
                var minZ = + Infinity;
    
                var maxX = - Infinity;
                var maxY = - Infinity;
                var maxZ = - Infinity;
    
                for ( var i = 0, l = attribute.count; i < l; i ++ ) {
    
                    var x = attribute.getX( i );
                    var y = attribute.getY( i );
                    var z = attribute.getZ( i );
    
                    if ( x < minX ) minX = x;
                    if ( y < minY ) minY = y;
                    if ( z < minZ ) minZ = z;
    
                    if ( x > maxX ) maxX = x;
                    if ( y > maxY ) maxY = y;
                    if ( z > maxZ ) maxZ = z;
    
                }
    
                this.min.set( minX, minY, minZ );
                this.max.set( maxX, maxY, maxZ );
    
                return this;
    
            },
    
            setFromPoints: function ( points ) {
    
                this.makeEmpty();
    
                for ( var i = 0, il = points.length; i < il; i ++ ) {
    
                    this.expandByPoint( points[ i ] );
    
                }
    
                return this;
    
            },
    
            setFromCenterAndSize: function () {
    
                var v1 = new Vector3();
    
                return function setFromCenterAndSize( center, size ) {
    
                    var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
    
                    this.min.copy( center ).sub( halfSize );
                    this.max.copy( center ).add( halfSize );
    
                    return this;
    
                };
    
            }(),
    
            setFromObject: function ( object ) {
    
                this.makeEmpty();
    
                return this.expandByObject( object );
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( box ) {
    
                this.min.copy( box.min );
                this.max.copy( box.max );
    
                return this;
    
            },
    
            makeEmpty: function () {
    
                this.min.x = this.min.y = this.min.z = + Infinity;
                this.max.x = this.max.y = this.max.z = - Infinity;
    
                return this;
    
            },
    
            isEmpty: function () {
    
                // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
    
                return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
    
            },
    
            getCenter: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Box3: .getCenter() target is now required' );
                    target = new Vector3();
    
                }
    
                return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
    
            },
    
            getSize: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Box3: .getSize() target is now required' );
                    target = new Vector3();
    
                }
    
                return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );
    
            },
    
            expandByPoint: function ( point ) {
    
                this.min.min( point );
                this.max.max( point );
    
                return this;
    
            },
    
            expandByVector: function ( vector ) {
    
                this.min.sub( vector );
                this.max.add( vector );
    
                return this;
    
            },
    
            expandByScalar: function ( scalar ) {
    
                this.min.addScalar( - scalar );
                this.max.addScalar( scalar );
    
                return this;
    
            },
    
            expandByObject: function () {
    
                // Computes the world-axis-aligned bounding box of an object (including its children),
                // accounting for both the object's, and children's, world transforms
    
                var scope, i, l;
    
                var v1 = new Vector3();
    
                function traverse( node ) {
    
                    var geometry = node.geometry;
    
                    if ( geometry !== undefined ) {
    
                        if ( geometry.isGeometry ) {
    
                            var vertices = geometry.vertices;
    
                            for ( i = 0, l = vertices.length; i < l; i ++ ) {
    
                                v1.copy( vertices[ i ] );
                                v1.applyMatrix4( node.matrixWorld );
    
                                scope.expandByPoint( v1 );
    
                            }
    
                        } else if ( geometry.isBufferGeometry ) {
    
                            var attribute = geometry.attributes.position;
    
                            if ( attribute !== undefined ) {
    
                                for ( i = 0, l = attribute.count; i < l; i ++ ) {
    
                                    v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );
    
                                    scope.expandByPoint( v1 );
    
                                }
    
                            }
    
                        }
    
                    }
    
                }
    
                return function expandByObject( object ) {
    
                    scope = this;
    
                    object.updateMatrixWorld( true );
    
                    object.traverse( traverse );
    
                    return this;
    
                };
    
            }(),
    
            containsPoint: function ( point ) {
    
                return point.x < this.min.x || point.x > this.max.x ||
                    point.y < this.min.y || point.y > this.max.y ||
                    point.z < this.min.z || point.z > this.max.z ? false : true;
    
            },
    
            containsBox: function ( box ) {
    
                return this.min.x <= box.min.x && box.max.x <= this.max.x &&
                    this.min.y <= box.min.y && box.max.y <= this.max.y &&
                    this.min.z <= box.min.z && box.max.z <= this.max.z;
    
            },
    
            getParameter: function ( point, target ) {
    
                // This can potentially have a divide by zero if the box
                // has a size dimension of 0.
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Box3: .getParameter() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.set(
                    ( point.x - this.min.x ) / ( this.max.x - this.min.x ),
                    ( point.y - this.min.y ) / ( this.max.y - this.min.y ),
                    ( point.z - this.min.z ) / ( this.max.z - this.min.z )
                );
    
            },
    
            intersectsBox: function ( box ) {
    
                // using 6 splitting planes to rule out intersections.
                return box.max.x < this.min.x || box.min.x > this.max.x ||
                    box.max.y < this.min.y || box.min.y > this.max.y ||
                    box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    
            },
    
            intersectsSphere: ( function () {
    
                var closestPoint = new Vector3();
    
                return function intersectsSphere( sphere ) {
    
                    // Find the point on the AABB closest to the sphere center.
                    this.clampPoint( sphere.center, closestPoint );
    
                    // If that point is inside the sphere, the AABB and sphere intersect.
                    return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );
    
                };
    
            } )(),
    
            intersectsPlane: function ( plane ) {
    
                // We compute the minimum and maximum dot product values. If those values
                // are on the same side (back or front) of the plane, then there is no intersection.
    
                var min, max;
    
                if ( plane.normal.x > 0 ) {
    
                    min = plane.normal.x * this.min.x;
                    max = plane.normal.x * this.max.x;
    
                } else {
    
                    min = plane.normal.x * this.max.x;
                    max = plane.normal.x * this.min.x;
    
                }
    
                if ( plane.normal.y > 0 ) {
    
                    min += plane.normal.y * this.min.y;
                    max += plane.normal.y * this.max.y;
    
                } else {
    
                    min += plane.normal.y * this.max.y;
                    max += plane.normal.y * this.min.y;
    
                }
    
                if ( plane.normal.z > 0 ) {
    
                    min += plane.normal.z * this.min.z;
                    max += plane.normal.z * this.max.z;
    
                } else {
    
                    min += plane.normal.z * this.max.z;
                    max += plane.normal.z * this.min.z;
    
                }
    
                return ( min <= - plane.constant && max >= - plane.constant );
    
            },
    
            intersectsTriangle: ( function () {
    
                // triangle centered vertices
                var v0 = new Vector3();
                var v1 = new Vector3();
                var v2 = new Vector3();
    
                // triangle edge vectors
                var f0 = new Vector3();
                var f1 = new Vector3();
                var f2 = new Vector3();
    
                var testAxis = new Vector3();
    
                var center = new Vector3();
                var extents = new Vector3();
    
                var triangleNormal = new Vector3();
    
                function satForAxes( axes ) {
    
                    var i, j;
    
                    for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {
    
                        testAxis.fromArray( axes, i );
                        // project the aabb onto the seperating axis
                        var r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );
                        // project all 3 vertices of the triangle onto the seperating axis
                        var p0 = v0.dot( testAxis );
                        var p1 = v1.dot( testAxis );
                        var p2 = v2.dot( testAxis );
                        // actual test, basically see if either of the most extreme of the triangle points intersects r
                        if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {
    
                            // points of the projected triangle are outside the projected half-length of the aabb
                            // the axis is seperating and we can exit
                            return false;
    
                        }
    
                    }
    
                    return true;
    
                }
    
                return function intersectsTriangle( triangle ) {
    
                    if ( this.isEmpty() ) {
    
                        return false;
    
                    }
    
                    // compute box center and extents
                    this.getCenter( center );
                    extents.subVectors( this.max, center );
    
                    // translate triangle to aabb origin
                    v0.subVectors( triangle.a, center );
                    v1.subVectors( triangle.b, center );
                    v2.subVectors( triangle.c, center );
    
                    // compute edge vectors for triangle
                    f0.subVectors( v1, v0 );
                    f1.subVectors( v2, v1 );
                    f2.subVectors( v0, v2 );
    
                    // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
                    // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
                    // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
                    var axes = [
                        0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,
                        f0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,
                        - f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0
                    ];
                    if ( ! satForAxes( axes ) ) {
    
                        return false;
    
                    }
    
                    // test 3 face normals from the aabb
                    axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
                    if ( ! satForAxes( axes ) ) {
    
                        return false;
    
                    }
    
                    // finally testing the face normal of the triangle
                    // use already existing triangle edge vectors here
                    triangleNormal.crossVectors( f0, f1 );
                    axes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];
                    return satForAxes( axes );
    
                };
    
            } )(),
    
            clampPoint: function ( point, target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Box3: .clampPoint() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.copy( point ).clamp( this.min, this.max );
    
            },
    
            distanceToPoint: function () {
    
                var v1 = new Vector3();
    
                return function distanceToPoint( point ) {
    
                    var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
                    return clampedPoint.sub( point ).length();
    
                };
    
            }(),
    
            getBoundingSphere: function () {
    
                var v1 = new Vector3();
    
                return function getBoundingSphere( target ) {
    
                    if ( target === undefined ) {
    
                        console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
                        //target = new Sphere(); // removed to avoid cyclic dependency
    
                    }
    
                    this.getCenter( target.center );
    
                    target.radius = this.getSize( v1 ).length() * 0.5;
    
                    return target;
    
                };
    
            }(),
    
            intersect: function ( box ) {
    
                this.min.max( box.min );
                this.max.min( box.max );
    
                // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
                if ( this.isEmpty() ) this.makeEmpty();
    
                return this;
    
            },
    
            union: function ( box ) {
    
                this.min.min( box.min );
                this.max.max( box.max );
    
                return this;
    
            },
    
            applyMatrix4: function () {
    
                var points = [
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3(),
                    new Vector3()
                ];
    
                return function applyMatrix4( matrix ) {
    
                    // transform of empty box is an empty box.
                    if ( this.isEmpty() ) return this;
    
                    // NOTE: I am using a binary pattern to specify all 2^3 combinations below
                    points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
                    points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
                    points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
                    points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
                    points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
                    points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
                    points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
                    points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111
    
                    this.setFromPoints( points );
    
                    return this;
    
                };
    
            }(),
    
            translate: function ( offset ) {
    
                this.min.add( offset );
                this.max.add( offset );
    
                return this;
    
            },
    
            equals: function ( box ) {
    
                return box.min.equals( this.min ) && box.max.equals( this.max );
    
            }
    
        } );
    
        /**
         * @author bhouston / http://clara.io
         * @author mrdoob / http://mrdoob.com/
         */
    
        function Sphere( center, radius ) {
    
            this.center = ( center !== undefined ) ? center : new Vector3();
            this.radius = ( radius !== undefined ) ? radius : 0;
    
        }
    
        Object.assign( Sphere.prototype, {
    
            set: function ( center, radius ) {
    
                this.center.copy( center );
                this.radius = radius;
    
                return this;
    
            },
    
            setFromPoints: function () {
    
                var box = new Box3();
    
                return function setFromPoints( points, optionalCenter ) {
    
                    var center = this.center;
    
                    if ( optionalCenter !== undefined ) {
    
                        center.copy( optionalCenter );
    
                    } else {
    
                        box.setFromPoints( points ).getCenter( center );
    
                    }
    
                    var maxRadiusSq = 0;
    
                    for ( var i = 0, il = points.length; i < il; i ++ ) {
    
                        maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
    
                    }
    
                    this.radius = Math.sqrt( maxRadiusSq );
    
                    return this;
    
                };
    
            }(),
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( sphere ) {
    
                this.center.copy( sphere.center );
                this.radius = sphere.radius;
    
                return this;
    
            },
    
            empty: function () {
    
                return ( this.radius <= 0 );
    
            },
    
            containsPoint: function ( point ) {
    
                return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
    
            },
    
            distanceToPoint: function ( point ) {
    
                return ( point.distanceTo( this.center ) - this.radius );
    
            },
    
            intersectsSphere: function ( sphere ) {
    
                var radiusSum = this.radius + sphere.radius;
    
                return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
    
            },
    
            intersectsBox: function ( box ) {
    
                return box.intersectsSphere( this );
    
            },
    
            intersectsPlane: function ( plane ) {
    
                return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;
    
            },
    
            clampPoint: function ( point, target ) {
    
                var deltaLengthSq = this.center.distanceToSquared( point );
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
                    target = new Vector3();
    
                }
    
                target.copy( point );
    
                if ( deltaLengthSq > ( this.radius * this.radius ) ) {
    
                    target.sub( this.center ).normalize();
                    target.multiplyScalar( this.radius ).add( this.center );
    
                }
    
                return target;
    
            },
    
            getBoundingBox: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
                    target = new Box3();
    
                }
    
                target.set( this.center, this.center );
                target.expandByScalar( this.radius );
    
                return target;
    
            },
    
            applyMatrix4: function ( matrix ) {
    
                this.center.applyMatrix4( matrix );
                this.radius = this.radius * matrix.getMaxScaleOnAxis();
    
                return this;
    
            },
    
            translate: function ( offset ) {
    
                this.center.add( offset );
    
                return this;
    
            },
    
            equals: function ( sphere ) {
    
                return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
    
            }
    
        } );
    
        /**
         * @author bhouston / http://clara.io
         */
    
        function Plane( normal, constant ) {
    
            // normal is assumed to be normalized
    
            this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
            this.constant = ( constant !== undefined ) ? constant : 0;
    
        }
    
        Object.assign( Plane.prototype, {
    
            set: function ( normal, constant ) {
    
                this.normal.copy( normal );
                this.constant = constant;
    
                return this;
    
            },
    
            setComponents: function ( x, y, z, w ) {
    
                this.normal.set( x, y, z );
                this.constant = w;
    
                return this;
    
            },
    
            setFromNormalAndCoplanarPoint: function ( normal, point ) {
    
                this.normal.copy( normal );
                this.constant = - point.dot( this.normal );
    
                return this;
    
            },
    
            setFromCoplanarPoints: function () {
    
                var v1 = new Vector3();
                var v2 = new Vector3();
    
                return function setFromCoplanarPoints( a, b, c ) {
    
                    var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();
    
                    // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
    
                    this.setFromNormalAndCoplanarPoint( normal, a );
    
                    return this;
    
                };
    
            }(),
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( plane ) {
    
                this.normal.copy( plane.normal );
                this.constant = plane.constant;
    
                return this;
    
            },
    
            normalize: function () {
    
                // Note: will lead to a divide by zero if the plane is invalid.
    
                var inverseNormalLength = 1.0 / this.normal.length();
                this.normal.multiplyScalar( inverseNormalLength );
                this.constant *= inverseNormalLength;
    
                return this;
    
            },
    
            negate: function () {
    
                this.constant *= - 1;
                this.normal.negate();
    
                return this;
    
            },
    
            distanceToPoint: function ( point ) {
    
                return this.normal.dot( point ) + this.constant;
    
            },
    
            distanceToSphere: function ( sphere ) {
    
                return this.distanceToPoint( sphere.center ) - sphere.radius;
    
            },
    
            projectPoint: function ( point, target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Plane: .projectPoint() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );
    
            },
    
            intersectLine: function () {
    
                var v1 = new Vector3();
    
                return function intersectLine( line, target ) {
    
                    if ( target === undefined ) {
    
                        console.warn( 'THREE.Plane: .intersectLine() target is now required' );
                        target = new Vector3();
    
                    }
    
                    var direction = line.delta( v1 );
    
                    var denominator = this.normal.dot( direction );
    
                    if ( denominator === 0 ) {
    
                        // line is coplanar, return origin
                        if ( this.distanceToPoint( line.start ) === 0 ) {
    
                            return target.copy( line.start );
    
                        }
    
                        // Unsure if this is the correct method to handle this case.
                        return undefined;
    
                    }
    
                    var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
    
                    if ( t < 0 || t > 1 ) {
    
                        return undefined;
    
                    }
    
                    return target.copy( direction ).multiplyScalar( t ).add( line.start );
    
                };
    
            }(),
    
            intersectsLine: function ( line ) {
    
                // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
    
                var startSign = this.distanceToPoint( line.start );
                var endSign = this.distanceToPoint( line.end );
    
                return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
    
            },
    
            intersectsBox: function ( box ) {
    
                return box.intersectsPlane( this );
    
            },
    
            intersectsSphere: function ( sphere ) {
    
                return sphere.intersectsPlane( this );
    
            },
    
            coplanarPoint: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.copy( this.normal ).multiplyScalar( - this.constant );
    
            },
    
            applyMatrix4: function () {
    
                var v1 = new Vector3();
                var m1 = new Matrix3();
    
                return function applyMatrix4( matrix, optionalNormalMatrix ) {
    
                    var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
    
                    var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );
    
                    var normal = this.normal.applyMatrix3( normalMatrix ).normalize();
    
                    this.constant = - referencePoint.dot( normal );
    
                    return this;
    
                };
    
            }(),
    
            translate: function ( offset ) {
    
                this.constant -= offset.dot( this.normal );
    
                return this;
    
            },
    
            equals: function ( plane ) {
    
                return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author bhouston / http://clara.io
         */
    
        function Frustum( p0, p1, p2, p3, p4, p5 ) {
    
            this.planes = [
    
                ( p0 !== undefined ) ? p0 : new Plane(),
                ( p1 !== undefined ) ? p1 : new Plane(),
                ( p2 !== undefined ) ? p2 : new Plane(),
                ( p3 !== undefined ) ? p3 : new Plane(),
                ( p4 !== undefined ) ? p4 : new Plane(),
                ( p5 !== undefined ) ? p5 : new Plane()
    
            ];
    
        }
    
        Object.assign( Frustum.prototype, {
    
            set: function ( p0, p1, p2, p3, p4, p5 ) {
    
                var planes = this.planes;
    
                planes[ 0 ].copy( p0 );
                planes[ 1 ].copy( p1 );
                planes[ 2 ].copy( p2 );
                planes[ 3 ].copy( p3 );
                planes[ 4 ].copy( p4 );
                planes[ 5 ].copy( p5 );
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( frustum ) {
    
                var planes = this.planes;
    
                for ( var i = 0; i < 6; i ++ ) {
    
                    planes[ i ].copy( frustum.planes[ i ] );
    
                }
    
                return this;
    
            },
    
            setFromMatrix: function ( m ) {
    
                var planes = this.planes;
                var me = m.elements;
                var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
                var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
                var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
                var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
    
                planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
                planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
                planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
                planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
                planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
                planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
    
                return this;
    
            },
    
            intersectsObject: function () {
    
                var sphere = new Sphere();
    
                return function intersectsObject( object ) {
    
                    var geometry = object.geometry;
    
                    if ( geometry.boundingSphere === null )
                        geometry.computeBoundingSphere();
    
                    sphere.copy( geometry.boundingSphere )
                        .applyMatrix4( object.matrixWorld );
    
                    return this.intersectsSphere( sphere );
    
                };
    
            }(),
    
            intersectsSprite: function () {
    
                var sphere = new Sphere();
    
                return function intersectsSprite( sprite ) {
    
                    sphere.center.set( 0, 0, 0 );
                    sphere.radius = 0.7071067811865476;
                    sphere.applyMatrix4( sprite.matrixWorld );
    
                    return this.intersectsSphere( sphere );
    
                };
    
            }(),
    
            intersectsSphere: function ( sphere ) {
    
                var planes = this.planes;
                var center = sphere.center;
                var negRadius = - sphere.radius;
    
                for ( var i = 0; i < 6; i ++ ) {
    
                    var distance = planes[ i ].distanceToPoint( center );
    
                    if ( distance < negRadius ) {
    
                        return false;
    
                    }
    
                }
    
                return true;
    
            },
    
            intersectsBox: function () {
    
                var p = new Vector3();
    
                return function intersectsBox( box ) {
    
                    var planes = this.planes;
    
                    for ( var i = 0; i < 6; i ++ ) {
    
                        var plane = planes[ i ];
    
                        // corner at max distance
    
                        p.x = plane.normal.x > 0 ? box.max.x : box.min.x;
                        p.y = plane.normal.y > 0 ? box.max.y : box.min.y;
                        p.z = plane.normal.z > 0 ? box.max.z : box.min.z;
    
                        if ( plane.distanceToPoint( p ) < 0 ) {
    
                            return false;
    
                        }
    
                    }
    
                    return true;
    
                };
    
            }(),
    
            containsPoint: function ( point ) {
    
                var planes = this.planes;
    
                for ( var i = 0; i < 6; i ++ ) {
    
                    if ( planes[ i ].distanceToPoint( point ) < 0 ) {
    
                        return false;
    
                    }
    
                }
    
                return true;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author supereggbert / http://www.paulbrunt.co.uk/
         * @author philogb / http://blog.thejit.org/
         * @author jordi_ros / http://plattsoft.com
         * @author D1plo1d / http://github.com/D1plo1d
         * @author alteredq / http://alteredqualia.com/
         * @author mikael emtinger / http://gomo.se/
         * @author timknip / http://www.floorplanner.com/
         * @author bhouston / http://clara.io
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function Matrix4() {
    
            this.elements = [
    
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
    
            ];
    
            if ( arguments.length > 0 ) {
    
                console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );
    
            }
    
        }
    
        Object.assign( Matrix4.prototype, {
    
            isMatrix4: true,
    
            set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
    
                var te = this.elements;
    
                te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
                te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
                te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
                te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
    
                return this;
    
            },
    
            identity: function () {
    
                this.set(
    
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1
    
                );
    
                return this;
    
            },
    
            clone: function () {
    
                return new Matrix4().fromArray( this.elements );
    
            },
    
            copy: function ( m ) {
    
                var te = this.elements;
                var me = m.elements;
    
                te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
                te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
                te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
                te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];
    
                return this;
    
            },
    
            copyPosition: function ( m ) {
    
                var te = this.elements, me = m.elements;
    
                te[ 12 ] = me[ 12 ];
                te[ 13 ] = me[ 13 ];
                te[ 14 ] = me[ 14 ];
    
                return this;
    
            },
    
            extractBasis: function ( xAxis, yAxis, zAxis ) {
    
                xAxis.setFromMatrixColumn( this, 0 );
                yAxis.setFromMatrixColumn( this, 1 );
                zAxis.setFromMatrixColumn( this, 2 );
    
                return this;
    
            },
    
            makeBasis: function ( xAxis, yAxis, zAxis ) {
    
                this.set(
                    xAxis.x, yAxis.x, zAxis.x, 0,
                    xAxis.y, yAxis.y, zAxis.y, 0,
                    xAxis.z, yAxis.z, zAxis.z, 0,
                    0, 0, 0, 1
                );
    
                return this;
    
            },
    
            extractRotation: function () {
    
                var v1 = new Vector3();
    
                return function extractRotation( m ) {
    
                    // this method does not support reflection matrices
    
                    var te = this.elements;
                    var me = m.elements;
    
                    var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
                    var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
                    var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();
    
                    te[ 0 ] = me[ 0 ] * scaleX;
                    te[ 1 ] = me[ 1 ] * scaleX;
                    te[ 2 ] = me[ 2 ] * scaleX;
                    te[ 3 ] = 0;
    
                    te[ 4 ] = me[ 4 ] * scaleY;
                    te[ 5 ] = me[ 5 ] * scaleY;
                    te[ 6 ] = me[ 6 ] * scaleY;
                    te[ 7 ] = 0;
    
                    te[ 8 ] = me[ 8 ] * scaleZ;
                    te[ 9 ] = me[ 9 ] * scaleZ;
                    te[ 10 ] = me[ 10 ] * scaleZ;
                    te[ 11 ] = 0;
    
                    te[ 12 ] = 0;
                    te[ 13 ] = 0;
                    te[ 14 ] = 0;
                    te[ 15 ] = 1;
    
                    return this;
    
                };
    
            }(),
    
            makeRotationFromEuler: function ( euler ) {
    
                if ( ! ( euler && euler.isEuler ) ) {
    
                    console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
    
                }
    
                var te = this.elements;
    
                var x = euler.x, y = euler.y, z = euler.z;
                var a = Math.cos( x ), b = Math.sin( x );
                var c = Math.cos( y ), d = Math.sin( y );
                var e = Math.cos( z ), f = Math.sin( z );
    
                if ( euler.order === 'XYZ' ) {
    
                    var ae = a * e, af = a * f, be = b * e, bf = b * f;
    
                    te[ 0 ] = c * e;
                    te[ 4 ] = - c * f;
                    te[ 8 ] = d;
    
                    te[ 1 ] = af + be * d;
                    te[ 5 ] = ae - bf * d;
                    te[ 9 ] = - b * c;
    
                    te[ 2 ] = bf - ae * d;
                    te[ 6 ] = be + af * d;
                    te[ 10 ] = a * c;
    
                } else if ( euler.order === 'YXZ' ) {
    
                    var ce = c * e, cf = c * f, de = d * e, df = d * f;
    
                    te[ 0 ] = ce + df * b;
                    te[ 4 ] = de * b - cf;
                    te[ 8 ] = a * d;
    
                    te[ 1 ] = a * f;
                    te[ 5 ] = a * e;
                    te[ 9 ] = - b;
    
                    te[ 2 ] = cf * b - de;
                    te[ 6 ] = df + ce * b;
                    te[ 10 ] = a * c;
    
                } else if ( euler.order === 'ZXY' ) {
    
                    var ce = c * e, cf = c * f, de = d * e, df = d * f;
    
                    te[ 0 ] = ce - df * b;
                    te[ 4 ] = - a * f;
                    te[ 8 ] = de + cf * b;
    
                    te[ 1 ] = cf + de * b;
                    te[ 5 ] = a * e;
                    te[ 9 ] = df - ce * b;
    
                    te[ 2 ] = - a * d;
                    te[ 6 ] = b;
                    te[ 10 ] = a * c;
    
                } else if ( euler.order === 'ZYX' ) {
    
                    var ae = a * e, af = a * f, be = b * e, bf = b * f;
    
                    te[ 0 ] = c * e;
                    te[ 4 ] = be * d - af;
                    te[ 8 ] = ae * d + bf;
    
                    te[ 1 ] = c * f;
                    te[ 5 ] = bf * d + ae;
                    te[ 9 ] = af * d - be;
    
                    te[ 2 ] = - d;
                    te[ 6 ] = b * c;
                    te[ 10 ] = a * c;
    
                } else if ( euler.order === 'YZX' ) {
    
                    var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
    
                    te[ 0 ] = c * e;
                    te[ 4 ] = bd - ac * f;
                    te[ 8 ] = bc * f + ad;
    
                    te[ 1 ] = f;
                    te[ 5 ] = a * e;
                    te[ 9 ] = - b * e;
    
                    te[ 2 ] = - d * e;
                    te[ 6 ] = ad * f + bc;
                    te[ 10 ] = ac - bd * f;
    
                } else if ( euler.order === 'XZY' ) {
    
                    var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
    
                    te[ 0 ] = c * e;
                    te[ 4 ] = - f;
                    te[ 8 ] = d * e;
    
                    te[ 1 ] = ac * f + bd;
                    te[ 5 ] = a * e;
                    te[ 9 ] = ad * f - bc;
    
                    te[ 2 ] = bc * f - ad;
                    te[ 6 ] = b * e;
                    te[ 10 ] = bd * f + ac;
    
                }
    
                // bottom row
                te[ 3 ] = 0;
                te[ 7 ] = 0;
                te[ 11 ] = 0;
    
                // last column
                te[ 12 ] = 0;
                te[ 13 ] = 0;
                te[ 14 ] = 0;
                te[ 15 ] = 1;
    
                return this;
    
            },
    
            makeRotationFromQuaternion: function () {
    
                var zero = new Vector3( 0, 0, 0 );
                var one = new Vector3( 1, 1, 1 );
    
                return function makeRotationFromQuaternion( q ) {
    
                    return this.compose( zero, q, one );
    
                };
    
            }(),
    
            lookAt: function () {
    
                var x = new Vector3();
                var y = new Vector3();
                var z = new Vector3();
    
                return function lookAt( eye, target, up ) {
    
                    var te = this.elements;
    
                    z.subVectors( eye, target );
    
                    if ( z.lengthSq() === 0 ) {
    
                        // eye and target are in the same position
    
                        z.z = 1;
    
                    }
    
                    z.normalize();
                    x.crossVectors( up, z );
    
                    if ( x.lengthSq() === 0 ) {
    
                        // up and z are parallel
    
                        if ( Math.abs( up.z ) === 1 ) {
    
                            z.x += 0.0001;
    
                        } else {
    
                            z.z += 0.0001;
    
                        }
    
                        z.normalize();
                        x.crossVectors( up, z );
    
                    }
    
                    x.normalize();
                    y.crossVectors( z, x );
    
                    te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
                    te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
                    te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;
    
                    return this;
    
                };
    
            }(),
    
            multiply: function ( m, n ) {
    
                if ( n !== undefined ) {
    
                    console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
                    return this.multiplyMatrices( m, n );
    
                }
    
                return this.multiplyMatrices( this, m );
    
            },
    
            premultiply: function ( m ) {
    
                return this.multiplyMatrices( m, this );
    
            },
    
            multiplyMatrices: function ( a, b ) {
    
                var ae = a.elements;
                var be = b.elements;
                var te = this.elements;
    
                var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
                var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
                var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
                var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
    
                var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
                var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
                var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
                var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
    
                te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    
                te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    
                te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    
                te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    
                return this;
    
            },
    
            multiplyScalar: function ( s ) {
    
                var te = this.elements;
    
                te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
                te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
                te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
                te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
    
                return this;
    
            },
    
            applyToBufferAttribute: function () {
    
                var v1 = new Vector3();
    
                return function applyToBufferAttribute( attribute ) {
    
                    for ( var i = 0, l = attribute.count; i < l; i ++ ) {
    
                        v1.x = attribute.getX( i );
                        v1.y = attribute.getY( i );
                        v1.z = attribute.getZ( i );
    
                        v1.applyMatrix4( this );
    
                        attribute.setXYZ( i, v1.x, v1.y, v1.z );
    
                    }
    
                    return attribute;
    
                };
    
            }(),
    
            determinant: function () {
    
                var te = this.elements;
    
                var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
                var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
                var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
                var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
    
                //TODO: make this more efficient
                //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
    
                return (
                    n41 * (
                        + n14 * n23 * n32
                         - n13 * n24 * n32
                         - n14 * n22 * n33
                         + n12 * n24 * n33
                         + n13 * n22 * n34
                         - n12 * n23 * n34
                    ) +
                    n42 * (
                        + n11 * n23 * n34
                         - n11 * n24 * n33
                         + n14 * n21 * n33
                         - n13 * n21 * n34
                         + n13 * n24 * n31
                         - n14 * n23 * n31
                    ) +
                    n43 * (
                        + n11 * n24 * n32
                         - n11 * n22 * n34
                         - n14 * n21 * n32
                         + n12 * n21 * n34
                         + n14 * n22 * n31
                         - n12 * n24 * n31
                    ) +
                    n44 * (
                        - n13 * n22 * n31
                         - n11 * n23 * n32
                         + n11 * n22 * n33
                         + n13 * n21 * n32
                         - n12 * n21 * n33
                         + n12 * n23 * n31
                    )
    
                );
    
            },
    
            transpose: function () {
    
                var te = this.elements;
                var tmp;
    
                tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
                tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
                tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
    
                tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
                tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
                tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
    
                return this;
    
            },
    
            setPosition: function ( v ) {
    
                var te = this.elements;
    
                te[ 12 ] = v.x;
                te[ 13 ] = v.y;
                te[ 14 ] = v.z;
    
                return this;
    
            },
    
            getInverse: function ( m, throwOnDegenerate ) {
    
                // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
                var te = this.elements,
                    me = m.elements,
    
                    n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
                    n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
                    n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
                    n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],
    
                    t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
                    t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
                    t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
                    t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    
                var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    
                if ( det === 0 ) {
    
                    var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
    
                    if ( throwOnDegenerate === true ) {
    
                        throw new Error( msg );
    
                    } else {
    
                        console.warn( msg );
    
                    }
    
                    return this.identity();
    
                }
    
                var detInv = 1 / det;
    
                te[ 0 ] = t11 * detInv;
                te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
                te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
                te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;
    
                te[ 4 ] = t12 * detInv;
                te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
                te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
                te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;
    
                te[ 8 ] = t13 * detInv;
                te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
                te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
                te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;
    
                te[ 12 ] = t14 * detInv;
                te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
                te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
                te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;
    
                return this;
    
            },
    
            scale: function ( v ) {
    
                var te = this.elements;
                var x = v.x, y = v.y, z = v.z;
    
                te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
                te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
                te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
                te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
    
                return this;
    
            },
    
            getMaxScaleOnAxis: function () {
    
                var te = this.elements;
    
                var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
                var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
                var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
    
                return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
    
            },
    
            makeTranslation: function ( x, y, z ) {
    
                this.set(
    
                    1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1
    
                );
    
                return this;
    
            },
    
            makeRotationX: function ( theta ) {
    
                var c = Math.cos( theta ), s = Math.sin( theta );
    
                this.set(
    
                    1, 0, 0, 0,
                    0, c, - s, 0,
                    0, s, c, 0,
                    0, 0, 0, 1
    
                );
    
                return this;
    
            },
    
            makeRotationY: function ( theta ) {
    
                var c = Math.cos( theta ), s = Math.sin( theta );
    
                this.set(
    
                     c, 0, s, 0,
                     0, 1, 0, 0,
                    - s, 0, c, 0,
                     0, 0, 0, 1
    
                );
    
                return this;
    
            },
    
            makeRotationZ: function ( theta ) {
    
                var c = Math.cos( theta ), s = Math.sin( theta );
    
                this.set(
    
                    c, - s, 0, 0,
                    s, c, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1
    
                );
    
                return this;
    
            },
    
            makeRotationAxis: function ( axis, angle ) {
    
                // Based on http://www.gamedev.net/reference/articles/article1199.asp
    
                var c = Math.cos( angle );
                var s = Math.sin( angle );
                var t = 1 - c;
                var x = axis.x, y = axis.y, z = axis.z;
                var tx = t * x, ty = t * y;
    
                this.set(
    
                    tx * x + c, tx * y - s * z, tx * z + s * y, 0,
                    tx * y + s * z, ty * y + c, ty * z - s * x, 0,
                    tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
                    0, 0, 0, 1
    
                );
    
                 return this;
    
            },
    
            makeScale: function ( x, y, z ) {
    
                this.set(
    
                    x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1
    
                );
    
                return this;
    
            },
    
            makeShear: function ( x, y, z ) {
    
                this.set(
    
                    1, y, z, 0,
                    x, 1, z, 0,
                    x, y, 1, 0,
                    0, 0, 0, 1
    
                );
    
                return this;
    
            },
    
            compose: function ( position, quaternion, scale ) {
    
                var te = this.elements;
    
                var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
                var x2 = x + x,	y2 = y + y, z2 = z + z;
                var xx = x * x2, xy = x * y2, xz = x * z2;
                var yy = y * y2, yz = y * z2, zz = z * z2;
                var wx = w * x2, wy = w * y2, wz = w * z2;
    
                var sx = scale.x, sy = scale.y, sz = scale.z;
    
                    te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
                    te[ 1 ] = ( xy + wz ) * sx;
                    te[ 2 ] = ( xz - wy ) * sx;
                    te[ 3 ] = 0;
    
                    te[ 4 ] = ( xy - wz ) * sy;
                    te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
                    te[ 6 ] = ( yz + wx ) * sy;
                    te[ 7 ] = 0;
    
                    te[ 8 ] = ( xz + wy ) * sz;
                    te[ 9 ] = ( yz - wx ) * sz;
                    te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
                    te[ 11 ] = 0;
    
                    te[ 12 ] = position.x;
                    te[ 13 ] = position.y;
                    te[ 14 ] = position.z;
                    te[ 15 ] = 1;
    
                    return this;
    
            },
    
            decompose: function () {
    
                var vector = new Vector3();
                var matrix = new Matrix4();
    
                return function decompose( position, quaternion, scale ) {
    
                    var te = this.elements;
    
                    var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
                    var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
                    var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
    
                    // if determine is negative, we need to invert one scale
                    var det = this.determinant();
                    if ( det < 0 ) sx = - sx;
    
                    position.x = te[ 12 ];
                    position.y = te[ 13 ];
                    position.z = te[ 14 ];
    
                    // scale the rotation part
                    matrix.copy( this );
    
                    var invSX = 1 / sx;
                    var invSY = 1 / sy;
                    var invSZ = 1 / sz;
    
                    matrix.elements[ 0 ] *= invSX;
                    matrix.elements[ 1 ] *= invSX;
                    matrix.elements[ 2 ] *= invSX;
    
                    matrix.elements[ 4 ] *= invSY;
                    matrix.elements[ 5 ] *= invSY;
                    matrix.elements[ 6 ] *= invSY;
    
                    matrix.elements[ 8 ] *= invSZ;
                    matrix.elements[ 9 ] *= invSZ;
                    matrix.elements[ 10 ] *= invSZ;
    
                    quaternion.setFromRotationMatrix( matrix );
    
                    scale.x = sx;
                    scale.y = sy;
                    scale.z = sz;
    
                    return this;
    
                };
    
            }(),
    
            makePerspective: function ( left, right, top, bottom, near, far ) {
    
                if ( far === undefined ) {
    
                    console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );
    
                }
    
                var te = this.elements;
                var x = 2 * near / ( right - left );
                var y = 2 * near / ( top - bottom );
    
                var a = ( right + left ) / ( right - left );
                var b = ( top + bottom ) / ( top - bottom );
                var c = - ( far + near ) / ( far - near );
                var d = - 2 * far * near / ( far - near );
    
                te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
                te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
                te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
                te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
    
                return this;
    
            },
    
            makeOrthographic: function ( left, right, top, bottom, near, far ) {
    
                var te = this.elements;
                var w = 1.0 / ( right - left );
                var h = 1.0 / ( top - bottom );
                var p = 1.0 / ( far - near );
    
                var x = ( right + left ) * w;
                var y = ( top + bottom ) * h;
                var z = ( far + near ) * p;
    
                te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
                te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
                te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
                te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
    
                return this;
    
            },
    
            equals: function ( matrix ) {
    
                var te = this.elements;
                var me = matrix.elements;
    
                for ( var i = 0; i < 16; i ++ ) {
    
                    if ( te[ i ] !== me[ i ] ) return false;
    
                }
    
                return true;
    
            },
    
            fromArray: function ( array, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                for ( var i = 0; i < 16; i ++ ) {
    
                    this.elements[ i ] = array[ i + offset ];
    
                }
    
                return this;
    
            },
    
            toArray: function ( array, offset ) {
    
                if ( array === undefined ) array = [];
                if ( offset === undefined ) offset = 0;
    
                var te = this.elements;
    
                array[ offset ] = te[ 0 ];
                array[ offset + 1 ] = te[ 1 ];
                array[ offset + 2 ] = te[ 2 ];
                array[ offset + 3 ] = te[ 3 ];
    
                array[ offset + 4 ] = te[ 4 ];
                array[ offset + 5 ] = te[ 5 ];
                array[ offset + 6 ] = te[ 6 ];
                array[ offset + 7 ] = te[ 7 ];
    
                array[ offset + 8 ] = te[ 8 ];
                array[ offset + 9 ] = te[ 9 ];
                array[ offset + 10 ] = te[ 10 ];
                array[ offset + 11 ] = te[ 11 ];
    
                array[ offset + 12 ] = te[ 12 ];
                array[ offset + 13 ] = te[ 13 ];
                array[ offset + 14 ] = te[ 14 ];
                array[ offset + 15 ] = te[ 15 ];
    
                return array;
    
            }
    
        } );
    
        var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
    
        var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
    
        var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
    
        var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";
    
        var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
    
        var begin_vertex = "vec3 transformed = vec3( position );";
    
        var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
    
        var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick( specularColor, dotNV );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}";
    
        var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
    
        var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
    
        var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
    
        var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif";
    
        var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif";
    
        var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";
    
        var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
    
        var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
    
        var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";
    
        var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}";
    
        var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif";
    
        var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
    
        var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
    
        var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif";
    
        var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
    
        var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
    
        var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
    
        var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";
    
        var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
    
        var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
    
        var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
    
        var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
    
        var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";
    
        var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";
    
        var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
    
        var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
    
        var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif";
    
        var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif";
    
        var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
    
        var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif";
    
        var lights_pars_begin = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";
    
        var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";
    
        var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
    
        var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
    
        var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif";
    
        var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor;\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
    
        var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif";
    
        var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif";
    
        var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif";
    
        var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
    
        var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif";
    
        var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
    
        var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif";
    
        var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";
    
        var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
    
        var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif";
    
        var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif";
    
        var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
    
        var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
    
        var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif";
    
        var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";
    
        var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";
    
        var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif";
    
        var normal_fragment_maps = "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\t#ifdef USE_TANGENT\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\t\t#else\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t\t#endif\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
    
        var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif";
    
        var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
    
        var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
    
        var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;";
    
        var dithering_fragment = "#if defined( DITHERING )\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
    
        var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
    
        var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
    
        var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
    
        var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
    
        var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif";
    
        var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif";
    
        var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}";
    
        var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
    
        var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";
    
        var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
    
        var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
    
        var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
    
        var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
    
        var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
    
        var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";
    
        var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";
    
        var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif";
    
        var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
    
        var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
    
        var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";
    
        var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";
    
        var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif";
    
        var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
    
        var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
    
        var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
    
        var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
    
        var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}";
    
        var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}";
    
        var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
    
        var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
    
        var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
    
        var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
    
        var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
    
        var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
    
        var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
    
        var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
    
        var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
    
        var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
    
        var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
    
        var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
    
        var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
    
        var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
    
        var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
    
        var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
    
        var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
    
        var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
    
        var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
    
        var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
    
        var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}";
    
        var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
    
        var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
    
        var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
    
        var ShaderChunk = {
            alphamap_fragment: alphamap_fragment,
            alphamap_pars_fragment: alphamap_pars_fragment,
            alphatest_fragment: alphatest_fragment,
            aomap_fragment: aomap_fragment,
            aomap_pars_fragment: aomap_pars_fragment,
            begin_vertex: begin_vertex,
            beginnormal_vertex: beginnormal_vertex,
            bsdfs: bsdfs,
            bumpmap_pars_fragment: bumpmap_pars_fragment,
            clipping_planes_fragment: clipping_planes_fragment,
            clipping_planes_pars_fragment: clipping_planes_pars_fragment,
            clipping_planes_pars_vertex: clipping_planes_pars_vertex,
            clipping_planes_vertex: clipping_planes_vertex,
            color_fragment: color_fragment,
            color_pars_fragment: color_pars_fragment,
            color_pars_vertex: color_pars_vertex,
            color_vertex: color_vertex,
            common: common,
            cube_uv_reflection_fragment: cube_uv_reflection_fragment,
            defaultnormal_vertex: defaultnormal_vertex,
            displacementmap_pars_vertex: displacementmap_pars_vertex,
            displacementmap_vertex: displacementmap_vertex,
            emissivemap_fragment: emissivemap_fragment,
            emissivemap_pars_fragment: emissivemap_pars_fragment,
            encodings_fragment: encodings_fragment,
            encodings_pars_fragment: encodings_pars_fragment,
            envmap_fragment: envmap_fragment,
            envmap_pars_fragment: envmap_pars_fragment,
            envmap_pars_vertex: envmap_pars_vertex,
            envmap_physical_pars_fragment: envmap_physical_pars_fragment,
            envmap_vertex: envmap_vertex,
            fog_vertex: fog_vertex,
            fog_pars_vertex: fog_pars_vertex,
            fog_fragment: fog_fragment,
            fog_pars_fragment: fog_pars_fragment,
            gradientmap_pars_fragment: gradientmap_pars_fragment,
            lightmap_fragment: lightmap_fragment,
            lightmap_pars_fragment: lightmap_pars_fragment,
            lights_lambert_vertex: lights_lambert_vertex,
            lights_pars_begin: lights_pars_begin,
            lights_phong_fragment: lights_phong_fragment,
            lights_phong_pars_fragment: lights_phong_pars_fragment,
            lights_physical_fragment: lights_physical_fragment,
            lights_physical_pars_fragment: lights_physical_pars_fragment,
            lights_fragment_begin: lights_fragment_begin,
            lights_fragment_maps: lights_fragment_maps,
            lights_fragment_end: lights_fragment_end,
            logdepthbuf_fragment: logdepthbuf_fragment,
            logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
            logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
            logdepthbuf_vertex: logdepthbuf_vertex,
            map_fragment: map_fragment,
            map_pars_fragment: map_pars_fragment,
            map_particle_fragment: map_particle_fragment,
            map_particle_pars_fragment: map_particle_pars_fragment,
            metalnessmap_fragment: metalnessmap_fragment,
            metalnessmap_pars_fragment: metalnessmap_pars_fragment,
            morphnormal_vertex: morphnormal_vertex,
            morphtarget_pars_vertex: morphtarget_pars_vertex,
            morphtarget_vertex: morphtarget_vertex,
            normal_fragment_begin: normal_fragment_begin,
            normal_fragment_maps: normal_fragment_maps,
            normalmap_pars_fragment: normalmap_pars_fragment,
            packing: packing,
            premultiplied_alpha_fragment: premultiplied_alpha_fragment,
            project_vertex: project_vertex,
            dithering_fragment: dithering_fragment,
            dithering_pars_fragment: dithering_pars_fragment,
            roughnessmap_fragment: roughnessmap_fragment,
            roughnessmap_pars_fragment: roughnessmap_pars_fragment,
            shadowmap_pars_fragment: shadowmap_pars_fragment,
            shadowmap_pars_vertex: shadowmap_pars_vertex,
            shadowmap_vertex: shadowmap_vertex,
            shadowmask_pars_fragment: shadowmask_pars_fragment,
            skinbase_vertex: skinbase_vertex,
            skinning_pars_vertex: skinning_pars_vertex,
            skinning_vertex: skinning_vertex,
            skinnormal_vertex: skinnormal_vertex,
            specularmap_fragment: specularmap_fragment,
            specularmap_pars_fragment: specularmap_pars_fragment,
            tonemapping_fragment: tonemapping_fragment,
            tonemapping_pars_fragment: tonemapping_pars_fragment,
            uv_pars_fragment: uv_pars_fragment,
            uv_pars_vertex: uv_pars_vertex,
            uv_vertex: uv_vertex,
            uv2_pars_fragment: uv2_pars_fragment,
            uv2_pars_vertex: uv2_pars_vertex,
            uv2_vertex: uv2_vertex,
            worldpos_vertex: worldpos_vertex,
    
            background_frag: background_frag,
            background_vert: background_vert,
            cube_frag: cube_frag,
            cube_vert: cube_vert,
            depth_frag: depth_frag,
            depth_vert: depth_vert,
            distanceRGBA_frag: distanceRGBA_frag,
            distanceRGBA_vert: distanceRGBA_vert,
            equirect_frag: equirect_frag,
            equirect_vert: equirect_vert,
            linedashed_frag: linedashed_frag,
            linedashed_vert: linedashed_vert,
            meshbasic_frag: meshbasic_frag,
            meshbasic_vert: meshbasic_vert,
            meshlambert_frag: meshlambert_frag,
            meshlambert_vert: meshlambert_vert,
            meshmatcap_frag: meshmatcap_frag,
            meshmatcap_vert: meshmatcap_vert,
            meshphong_frag: meshphong_frag,
            meshphong_vert: meshphong_vert,
            meshphysical_frag: meshphysical_frag,
            meshphysical_vert: meshphysical_vert,
            normal_frag: normal_frag,
            normal_vert: normal_vert,
            points_frag: points_frag,
            points_vert: points_vert,
            shadow_frag: shadow_frag,
            shadow_vert: shadow_vert,
            sprite_frag: sprite_frag,
            sprite_vert: sprite_vert
        };
    
        /**
         * Uniform Utilities
         */
    
        function cloneUniforms( src ) {
    
            var dst = {};
    
            for ( var u in src ) {
    
                dst[ u ] = {};
    
                for ( var p in src[ u ] ) {
    
                    var property = src[ u ][ p ];
    
                    if ( property && ( property.isColor ||
                        property.isMatrix3 || property.isMatrix4 ||
                        property.isVector2 || property.isVector3 || property.isVector4 ||
                        property.isTexture ) ) {
    
                        dst[ u ][ p ] = property.clone();
    
                    } else if ( Array.isArray( property ) ) {
    
                        dst[ u ][ p ] = property.slice();
    
                    } else {
    
                        dst[ u ][ p ] = property;
    
                    }
    
                }
    
            }
    
            return dst;
    
        }
    
        function mergeUniforms( uniforms ) {
    
            var merged = {};
    
            for ( var u = 0; u < uniforms.length; u ++ ) {
    
                var tmp = cloneUniforms( uniforms[ u ] );
    
                for ( var p in tmp ) {
    
                    merged[ p ] = tmp[ p ];
    
                }
    
            }
    
            return merged;
    
        }
    
        // Legacy
    
        var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
            'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
            'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
            'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
            'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
            'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
            'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
            'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
            'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
            'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
            'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
            'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
            'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
            'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
            'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
            'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
            'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
            'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
            'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
            'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
            'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
            'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
            'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
            'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
    
        function Color( r, g, b ) {
    
            if ( g === undefined && b === undefined ) {
    
                // r is THREE.Color, hex or string
                return this.set( r );
    
            }
    
            return this.setRGB( r, g, b );
    
        }
    
        Object.assign( Color.prototype, {
    
            isColor: true,
    
            r: 1, g: 1, b: 1,
    
            set: function ( value ) {
    
                if ( value && value.isColor ) {
    
                    this.copy( value );
    
                } else if ( typeof value === 'number' ) {
    
                    this.setHex( value );
    
                } else if ( typeof value === 'string' ) {
    
                    this.setStyle( value );
    
                }
    
                return this;
    
            },
    
            setScalar: function ( scalar ) {
    
                this.r = scalar;
                this.g = scalar;
                this.b = scalar;
    
                return this;
    
            },
    
            setHex: function ( hex ) {
    
                hex = Math.floor( hex );
    
                this.r = ( hex >> 16 & 255 ) / 255;
                this.g = ( hex >> 8 & 255 ) / 255;
                this.b = ( hex & 255 ) / 255;
    
                return this;
    
            },
    
            setRGB: function ( r, g, b ) {
    
                this.r = r;
                this.g = g;
                this.b = b;
    
                return this;
    
            },
    
            setHSL: function () {
    
                function hue2rgb( p, q, t ) {
    
                    if ( t < 0 ) t += 1;
                    if ( t > 1 ) t -= 1;
                    if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
                    if ( t < 1 / 2 ) return q;
                    if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
                    return p;
    
                }
    
                return function setHSL( h, s, l ) {
    
                    // h,s,l ranges are in 0.0 - 1.0
                    h = _Math.euclideanModulo( h, 1 );
                    s = _Math.clamp( s, 0, 1 );
                    l = _Math.clamp( l, 0, 1 );
    
                    if ( s === 0 ) {
    
                        this.r = this.g = this.b = l;
    
                    } else {
    
                        var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
                        var q = ( 2 * l ) - p;
    
                        this.r = hue2rgb( q, p, h + 1 / 3 );
                        this.g = hue2rgb( q, p, h );
                        this.b = hue2rgb( q, p, h - 1 / 3 );
    
                    }
    
                    return this;
    
                };
    
            }(),
    
            setStyle: function ( style ) {
    
                function handleAlpha( string ) {
    
                    if ( string === undefined ) return;
    
                    if ( parseFloat( string ) < 1 ) {
    
                        console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
    
                    }
    
                }
    
    
                var m;
    
                if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {
    
                    // rgb / hsl
    
                    var color;
                    var name = m[ 1 ];
                    var components = m[ 2 ];
    
                    switch ( name ) {
    
                        case 'rgb':
                        case 'rgba':
    
                            if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
    
                                // rgb(255,0,0) rgba(255,0,0,0.5)
                                this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
                                this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
                                this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
    
                                handleAlpha( color[ 5 ] );
    
                                return this;
    
                            }
    
                            if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
    
                                // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
                                this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
                                this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
                                this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
    
                                handleAlpha( color[ 5 ] );
    
                                return this;
    
                            }
    
                            break;
    
                        case 'hsl':
                        case 'hsla':
    
                            if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
    
                                // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
                                var h = parseFloat( color[ 1 ] ) / 360;
                                var s = parseInt( color[ 2 ], 10 ) / 100;
                                var l = parseInt( color[ 3 ], 10 ) / 100;
    
                                handleAlpha( color[ 5 ] );
    
                                return this.setHSL( h, s, l );
    
                            }
    
                            break;
    
                    }
    
                } else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {
    
                    // hex color
    
                    var hex = m[ 1 ];
                    var size = hex.length;
    
                    if ( size === 3 ) {
    
                        // #ff0
                        this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
                        this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
                        this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
    
                        return this;
    
                    } else if ( size === 6 ) {
    
                        // #ff0000
                        this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
                        this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
                        this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
    
                        return this;
    
                    }
    
                }
    
                if ( style && style.length > 0 ) {
    
                    // color keywords
                    var hex = ColorKeywords[ style ];
    
                    if ( hex !== undefined ) {
    
                        // red
                        this.setHex( hex );
    
                    } else {
    
                        // unknown color
                        console.warn( 'THREE.Color: Unknown color ' + style );
    
                    }
    
                }
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor( this.r, this.g, this.b );
    
            },
    
            copy: function ( color ) {
    
                this.r = color.r;
                this.g = color.g;
                this.b = color.b;
    
                return this;
    
            },
    
            copyGammaToLinear: function ( color, gammaFactor ) {
    
                if ( gammaFactor === undefined ) gammaFactor = 2.0;
    
                this.r = Math.pow( color.r, gammaFactor );
                this.g = Math.pow( color.g, gammaFactor );
                this.b = Math.pow( color.b, gammaFactor );
    
                return this;
    
            },
    
            copyLinearToGamma: function ( color, gammaFactor ) {
    
                if ( gammaFactor === undefined ) gammaFactor = 2.0;
    
                var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;
    
                this.r = Math.pow( color.r, safeInverse );
                this.g = Math.pow( color.g, safeInverse );
                this.b = Math.pow( color.b, safeInverse );
    
                return this;
    
            },
    
            convertGammaToLinear: function ( gammaFactor ) {
    
                this.copyGammaToLinear( this, gammaFactor );
    
                return this;
    
            },
    
            convertLinearToGamma: function ( gammaFactor ) {
    
                this.copyLinearToGamma( this, gammaFactor );
    
                return this;
    
            },
    
            copySRGBToLinear: function () {
    
                function SRGBToLinear( c ) {
    
                    return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );
    
                }
    
                return function copySRGBToLinear( color ) {
    
                    this.r = SRGBToLinear( color.r );
                    this.g = SRGBToLinear( color.g );
                    this.b = SRGBToLinear( color.b );
    
                    return this;
    
                };
    
            }(),
    
            copyLinearToSRGB: function () {
    
                function LinearToSRGB( c ) {
    
                    return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;
    
                }
    
                return function copyLinearToSRGB( color ) {
    
                    this.r = LinearToSRGB( color.r );
                    this.g = LinearToSRGB( color.g );
                    this.b = LinearToSRGB( color.b );
    
                    return this;
    
                };
    
            }(),
    
            convertSRGBToLinear: function () {
    
                this.copySRGBToLinear( this );
    
                return this;
    
            },
    
            convertLinearToSRGB: function () {
    
                this.copyLinearToSRGB( this );
    
                return this;
    
            },
    
            getHex: function () {
    
                return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
    
            },
    
            getHexString: function () {
    
                return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );
    
            },
    
            getHSL: function ( target ) {
    
                // h,s,l ranges are in 0.0 - 1.0
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Color: .getHSL() target is now required' );
                    target = { h: 0, s: 0, l: 0 };
    
                }
    
                var r = this.r, g = this.g, b = this.b;
    
                var max = Math.max( r, g, b );
                var min = Math.min( r, g, b );
    
                var hue, saturation;
                var lightness = ( min + max ) / 2.0;
    
                if ( min === max ) {
    
                    hue = 0;
                    saturation = 0;
    
                } else {
    
                    var delta = max - min;
    
                    saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
    
                    switch ( max ) {
    
                        case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
                        case g: hue = ( b - r ) / delta + 2; break;
                        case b: hue = ( r - g ) / delta + 4; break;
    
                    }
    
                    hue /= 6;
    
                }
    
                target.h = hue;
                target.s = saturation;
                target.l = lightness;
    
                return target;
    
            },
    
            getStyle: function () {
    
                return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';
    
            },
    
            offsetHSL: function () {
    
                var hsl = {};
    
                return function ( h, s, l ) {
    
                    this.getHSL( hsl );
    
                    hsl.h += h; hsl.s += s; hsl.l += l;
    
                    this.setHSL( hsl.h, hsl.s, hsl.l );
    
                    return this;
    
                };
    
            }(),
    
            add: function ( color ) {
    
                this.r += color.r;
                this.g += color.g;
                this.b += color.b;
    
                return this;
    
            },
    
            addColors: function ( color1, color2 ) {
    
                this.r = color1.r + color2.r;
                this.g = color1.g + color2.g;
                this.b = color1.b + color2.b;
    
                return this;
    
            },
    
            addScalar: function ( s ) {
    
                this.r += s;
                this.g += s;
                this.b += s;
    
                return this;
    
            },
    
            sub: function ( color ) {
    
                this.r = Math.max( 0, this.r - color.r );
                this.g = Math.max( 0, this.g - color.g );
                this.b = Math.max( 0, this.b - color.b );
    
                return this;
    
            },
    
            multiply: function ( color ) {
    
                this.r *= color.r;
                this.g *= color.g;
                this.b *= color.b;
    
                return this;
    
            },
    
            multiplyScalar: function ( s ) {
    
                this.r *= s;
                this.g *= s;
                this.b *= s;
    
                return this;
    
            },
    
            lerp: function ( color, alpha ) {
    
                this.r += ( color.r - this.r ) * alpha;
                this.g += ( color.g - this.g ) * alpha;
                this.b += ( color.b - this.b ) * alpha;
    
                return this;
    
            },
    
            lerpHSL: function () {
    
                var hslA = { h: 0, s: 0, l: 0 };
                var hslB = { h: 0, s: 0, l: 0 };
    
                return function lerpHSL( color, alpha ) {
    
                    this.getHSL( hslA );
                    color.getHSL( hslB );
    
                    var h = _Math.lerp( hslA.h, hslB.h, alpha );
                    var s = _Math.lerp( hslA.s, hslB.s, alpha );
                    var l = _Math.lerp( hslA.l, hslB.l, alpha );
    
                    this.setHSL( h, s, l );
    
                    return this;
    
                };
    
            }(),
    
            equals: function ( c ) {
    
                return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
    
            },
    
            fromArray: function ( array, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                this.r = array[ offset ];
                this.g = array[ offset + 1 ];
                this.b = array[ offset + 2 ];
    
                return this;
    
            },
    
            toArray: function ( array, offset ) {
    
                if ( array === undefined ) array = [];
                if ( offset === undefined ) offset = 0;
    
                array[ offset ] = this.r;
                array[ offset + 1 ] = this.g;
                array[ offset + 2 ] = this.b;
    
                return array;
    
            },
    
            toJSON: function () {
    
                return this.getHex();
    
            }
    
        } );
    
        /**
         * Uniforms library for shared webgl shaders
         */
    
        var UniformsLib = {
    
            common: {
    
                diffuse: { value: new Color( 0xeeeeee ) },
                opacity: { value: 1.0 },
    
                map: { value: null },
                uvTransform: { value: new Matrix3() },
    
                alphaMap: { value: null },
    
            },
    
            specularmap: {
    
                specularMap: { value: null },
    
            },
    
            envmap: {
    
                envMap: { value: null },
                flipEnvMap: { value: - 1 },
                reflectivity: { value: 1.0 },
                refractionRatio: { value: 0.98 },
                maxMipLevel: { value: 0 }
    
            },
    
            aomap: {
    
                aoMap: { value: null },
                aoMapIntensity: { value: 1 }
    
            },
    
            lightmap: {
    
                lightMap: { value: null },
                lightMapIntensity: { value: 1 }
    
            },
    
            emissivemap: {
    
                emissiveMap: { value: null }
    
            },
    
            bumpmap: {
    
                bumpMap: { value: null },
                bumpScale: { value: 1 }
    
            },
    
            normalmap: {
    
                normalMap: { value: null },
                normalScale: { value: new Vector2( 1, 1 ) }
    
            },
    
            displacementmap: {
    
                displacementMap: { value: null },
                displacementScale: { value: 1 },
                displacementBias: { value: 0 }
    
            },
    
            roughnessmap: {
    
                roughnessMap: { value: null }
    
            },
    
            metalnessmap: {
    
                metalnessMap: { value: null }
    
            },
    
            gradientmap: {
    
                gradientMap: { value: null }
    
            },
    
            fog: {
    
                fogDensity: { value: 0.00025 },
                fogNear: { value: 1 },
                fogFar: { value: 2000 },
                fogColor: { value: new Color( 0xffffff ) }
    
            },
    
            lights: {
    
                ambientLightColor: { value: [] },
    
                directionalLights: { value: [], properties: {
                    direction: {},
                    color: {},
    
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                } },
    
                directionalShadowMap: { value: [] },
                directionalShadowMatrix: { value: [] },
    
                spotLights: { value: [], properties: {
                    color: {},
                    position: {},
                    direction: {},
                    distance: {},
                    coneCos: {},
                    penumbraCos: {},
                    decay: {},
    
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                } },
    
                spotShadowMap: { value: [] },
                spotShadowMatrix: { value: [] },
    
                pointLights: { value: [], properties: {
                    color: {},
                    position: {},
                    decay: {},
                    distance: {},
    
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {},
                    shadowCameraNear: {},
                    shadowCameraFar: {}
                } },
    
                pointShadowMap: { value: [] },
                pointShadowMatrix: { value: [] },
    
                hemisphereLights: { value: [], properties: {
                    direction: {},
                    skyColor: {},
                    groundColor: {}
                } },
    
                // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
                rectAreaLights: { value: [], properties: {
                    color: {},
                    position: {},
                    width: {},
                    height: {}
                } }
    
            },
    
            points: {
    
                diffuse: { value: new Color( 0xeeeeee ) },
                opacity: { value: 1.0 },
                size: { value: 1.0 },
                scale: { value: 1.0 },
                map: { value: null },
                uvTransform: { value: new Matrix3() }
    
            },
    
            sprite: {
    
                diffuse: { value: new Color( 0xeeeeee ) },
                opacity: { value: 1.0 },
                center: { value: new Vector2( 0.5, 0.5 ) },
                rotation: { value: 0.0 },
                map: { value: null },
                uvTransform: { value: new Matrix3() }
    
            }
    
        };
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         * @author mikael emtinger / http://gomo.se/
         */
    
        var ShaderLib = {
    
            basic: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.specularmap,
                    UniformsLib.envmap,
                    UniformsLib.aomap,
                    UniformsLib.lightmap,
                    UniformsLib.fog
                ] ),
    
                vertexShader: ShaderChunk.meshbasic_vert,
                fragmentShader: ShaderChunk.meshbasic_frag
    
            },
    
            lambert: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.specularmap,
                    UniformsLib.envmap,
                    UniformsLib.aomap,
                    UniformsLib.lightmap,
                    UniformsLib.emissivemap,
                    UniformsLib.fog,
                    UniformsLib.lights,
                    {
                        emissive: { value: new Color( 0x000000 ) }
                    }
                ] ),
    
                vertexShader: ShaderChunk.meshlambert_vert,
                fragmentShader: ShaderChunk.meshlambert_frag
    
            },
    
            phong: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.specularmap,
                    UniformsLib.envmap,
                    UniformsLib.aomap,
                    UniformsLib.lightmap,
                    UniformsLib.emissivemap,
                    UniformsLib.bumpmap,
                    UniformsLib.normalmap,
                    UniformsLib.displacementmap,
                    UniformsLib.gradientmap,
                    UniformsLib.fog,
                    UniformsLib.lights,
                    {
                        emissive: { value: new Color( 0x000000 ) },
                        specular: { value: new Color( 0x111111 ) },
                        shininess: { value: 30 }
                    }
                ] ),
    
                vertexShader: ShaderChunk.meshphong_vert,
                fragmentShader: ShaderChunk.meshphong_frag
    
            },
    
            standard: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.envmap,
                    UniformsLib.aomap,
                    UniformsLib.lightmap,
                    UniformsLib.emissivemap,
                    UniformsLib.bumpmap,
                    UniformsLib.normalmap,
                    UniformsLib.displacementmap,
                    UniformsLib.roughnessmap,
                    UniformsLib.metalnessmap,
                    UniformsLib.fog,
                    UniformsLib.lights,
                    {
                        emissive: { value: new Color( 0x000000 ) },
                        roughness: { value: 0.5 },
                        metalness: { value: 0.5 },
                        envMapIntensity: { value: 1 } // temporary
                    }
                ] ),
    
                vertexShader: ShaderChunk.meshphysical_vert,
                fragmentShader: ShaderChunk.meshphysical_frag
    
            },
    
            matcap: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.bumpmap,
                    UniformsLib.normalmap,
                    UniformsLib.displacementmap,
                    UniformsLib.fog,
                    {
                        matcap: { value: null }
                    }
                ] ),
    
                vertexShader: ShaderChunk.meshmatcap_vert,
                fragmentShader: ShaderChunk.meshmatcap_frag
    
            },
    
            points: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.points,
                    UniformsLib.fog
                ] ),
    
                vertexShader: ShaderChunk.points_vert,
                fragmentShader: ShaderChunk.points_frag
    
            },
    
            dashed: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.fog,
                    {
                        scale: { value: 1 },
                        dashSize: { value: 1 },
                        totalSize: { value: 2 }
                    }
                ] ),
    
                vertexShader: ShaderChunk.linedashed_vert,
                fragmentShader: ShaderChunk.linedashed_frag
    
            },
    
            depth: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.displacementmap
                ] ),
    
                vertexShader: ShaderChunk.depth_vert,
                fragmentShader: ShaderChunk.depth_frag
    
            },
    
            normal: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.bumpmap,
                    UniformsLib.normalmap,
                    UniformsLib.displacementmap,
                    {
                        opacity: { value: 1.0 }
                    }
                ] ),
    
                vertexShader: ShaderChunk.normal_vert,
                fragmentShader: ShaderChunk.normal_frag
    
            },
    
            sprite: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.sprite,
                    UniformsLib.fog
                ] ),
    
                vertexShader: ShaderChunk.sprite_vert,
                fragmentShader: ShaderChunk.sprite_frag
    
            },
    
            background: {
    
                uniforms: {
                    uvTransform: { value: new Matrix3() },
                    t2D: { value: null },
                },
    
                vertexShader: ShaderChunk.background_vert,
                fragmentShader: ShaderChunk.background_frag
    
            },
            /* -------------------------------------------------------------------------
            //	Cube map shader
             ------------------------------------------------------------------------- */
    
            cube: {
    
                uniforms: {
                    tCube: { value: null },
                    tFlip: { value: - 1 },
                    opacity: { value: 1.0 }
                },
    
                vertexShader: ShaderChunk.cube_vert,
                fragmentShader: ShaderChunk.cube_frag
    
            },
    
            equirect: {
    
                uniforms: {
                    tEquirect: { value: null },
                },
    
                vertexShader: ShaderChunk.equirect_vert,
                fragmentShader: ShaderChunk.equirect_frag
    
            },
    
            distanceRGBA: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.common,
                    UniformsLib.displacementmap,
                    {
                        referencePosition: { value: new Vector3() },
                        nearDistance: { value: 1 },
                        farDistance: { value: 1000 }
                    }
                ] ),
    
                vertexShader: ShaderChunk.distanceRGBA_vert,
                fragmentShader: ShaderChunk.distanceRGBA_frag
    
            },
    
            shadow: {
    
                uniforms: mergeUniforms( [
                    UniformsLib.lights,
                    UniformsLib.fog,
                    {
                        color: { value: new Color( 0x00000 ) },
                        opacity: { value: 1.0 }
                    },
                ] ),
    
                vertexShader: ShaderChunk.shadow_vert,
                fragmentShader: ShaderChunk.shadow_frag
    
            }
    
        };
    
        ShaderLib.physical = {
    
            uniforms: mergeUniforms( [
                ShaderLib.standard.uniforms,
                {
                    clearCoat: { value: 0 },
                    clearCoatRoughness: { value: 0 }
                }
            ] ),
    
            vertexShader: ShaderChunk.meshphysical_vert,
            fragmentShader: ShaderChunk.meshphysical_frag
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLAnimation() {
    
            var context = null;
            var isAnimating = false;
            var animationLoop = null;
    
            function onAnimationFrame( time, frame ) {
    
                if ( isAnimating === false ) return;
    
                animationLoop( time, frame );
    
                context.requestAnimationFrame( onAnimationFrame );
    
            }
    
            return {
    
                start: function () {
    
                    if ( isAnimating === true ) return;
                    if ( animationLoop === null ) return;
    
                    context.requestAnimationFrame( onAnimationFrame );
    
                    isAnimating = true;
    
                },
    
                stop: function () {
    
                    isAnimating = false;
    
                },
    
                setAnimationLoop: function ( callback ) {
    
                    animationLoop = callback;
    
                },
    
                setContext: function ( value ) {
    
                    context = value;
    
                }
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLAttributes( gl ) {
    
            var buffers = new WeakMap();
    
            function createBuffer( attribute, bufferType ) {
    
                var array = attribute.array;
                var usage = attribute.dynamic ? 35048 : 35044;
    
                var buffer = gl.createBuffer();
    
                gl.bindBuffer( bufferType, buffer );
                gl.bufferData( bufferType, array, usage );
    
                attribute.onUploadCallback();
    
                var type = 5126;
    
                if ( array instanceof Float32Array ) {
    
                    type = 5126;
    
                } else if ( array instanceof Float64Array ) {
    
                    console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );
    
                } else if ( array instanceof Uint16Array ) {
    
                    type = 5123;
    
                } else if ( array instanceof Int16Array ) {
    
                    type = 5122;
    
                } else if ( array instanceof Uint32Array ) {
    
                    type = 5125;
    
                } else if ( array instanceof Int32Array ) {
    
                    type = 5124;
    
                } else if ( array instanceof Int8Array ) {
    
                    type = 5120;
    
                } else if ( array instanceof Uint8Array ) {
    
                    type = 5121;
    
                }
    
                return {
                    buffer: buffer,
                    type: type,
                    bytesPerElement: array.BYTES_PER_ELEMENT,
                    version: attribute.version
                };
    
            }
    
            function updateBuffer( buffer, attribute, bufferType ) {
    
                var array = attribute.array;
                var updateRange = attribute.updateRange;
    
                gl.bindBuffer( bufferType, buffer );
    
                if ( attribute.dynamic === false ) {
    
                    gl.bufferData( bufferType, array, 35044 );
    
                } else if ( updateRange.count === - 1 ) {
    
                    // Not using update ranges
    
                    gl.bufferSubData( bufferType, 0, array );
    
                } else if ( updateRange.count === 0 ) {
    
                    console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );
    
                } else {
    
                    gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
                        array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );
    
                    updateRange.count = - 1; // reset range
    
                }
    
            }
    
            //
    
            function get( attribute ) {
    
                if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
    
                return buffers.get( attribute );
    
            }
    
            function remove( attribute ) {
    
                if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
    
                var data = buffers.get( attribute );
    
                if ( data ) {
    
                    gl.deleteBuffer( data.buffer );
    
                    buffers.delete( attribute );
    
                }
    
            }
    
            function update( attribute, bufferType ) {
    
                if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
    
                var data = buffers.get( attribute );
    
                if ( data === undefined ) {
    
                    buffers.set( attribute, createBuffer( attribute, bufferType ) );
    
                } else if ( data.version < attribute.version ) {
    
                    updateBuffer( data.buffer, attribute, bufferType );
    
                    data.version = attribute.version;
    
                }
    
            }
    
            return {
    
                get: get,
                remove: remove,
                update: update
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */
    
        function Face3( a, b, c, normal, color, materialIndex ) {
    
            this.a = a;
            this.b = b;
            this.c = c;
    
            this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
            this.vertexNormals = Array.isArray( normal ) ? normal : [];
    
            this.color = ( color && color.isColor ) ? color : new Color();
            this.vertexColors = Array.isArray( color ) ? color : [];
    
            this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
    
        }
    
        Object.assign( Face3.prototype, {
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( source ) {
    
                this.a = source.a;
                this.b = source.b;
                this.c = source.c;
    
                this.normal.copy( source.normal );
                this.color.copy( source.color );
    
                this.materialIndex = source.materialIndex;
    
                for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {
    
                    this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();
    
                }
    
                for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {
    
                    this.vertexColors[ i ] = source.vertexColors[ i ].clone();
    
                }
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         * @author bhouston / http://clara.io
         */
    
        function Euler( x, y, z, order ) {
    
            this._x = x || 0;
            this._y = y || 0;
            this._z = z || 0;
            this._order = order || Euler.DefaultOrder;
    
        }
    
        Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
    
        Euler.DefaultOrder = 'XYZ';
    
        Object.defineProperties( Euler.prototype, {
    
            x: {
    
                get: function () {
    
                    return this._x;
    
                },
    
                set: function ( value ) {
    
                    this._x = value;
                    this.onChangeCallback();
    
                }
    
            },
    
            y: {
    
                get: function () {
    
                    return this._y;
    
                },
    
                set: function ( value ) {
    
                    this._y = value;
                    this.onChangeCallback();
    
                }
    
            },
    
            z: {
    
                get: function () {
    
                    return this._z;
    
                },
    
                set: function ( value ) {
    
                    this._z = value;
                    this.onChangeCallback();
    
                }
    
            },
    
            order: {
    
                get: function () {
    
                    return this._order;
    
                },
    
                set: function ( value ) {
    
                    this._order = value;
                    this.onChangeCallback();
    
                }
    
            }
    
        } );
    
        Object.assign( Euler.prototype, {
    
            isEuler: true,
    
            set: function ( x, y, z, order ) {
    
                this._x = x;
                this._y = y;
                this._z = z;
                this._order = order || this._order;
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor( this._x, this._y, this._z, this._order );
    
            },
    
            copy: function ( euler ) {
    
                this._x = euler._x;
                this._y = euler._y;
                this._z = euler._z;
                this._order = euler._order;
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            setFromRotationMatrix: function ( m, order, update ) {
    
                var clamp = _Math.clamp;
    
                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    
                var te = m.elements;
                var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
                var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
                var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
    
                order = order || this._order;
    
                if ( order === 'XYZ' ) {
    
                    this._y = Math.asin( clamp( m13, - 1, 1 ) );
    
                    if ( Math.abs( m13 ) < 0.99999 ) {
    
                        this._x = Math.atan2( - m23, m33 );
                        this._z = Math.atan2( - m12, m11 );
    
                    } else {
    
                        this._x = Math.atan2( m32, m22 );
                        this._z = 0;
    
                    }
    
                } else if ( order === 'YXZ' ) {
    
                    this._x = Math.asin( - clamp( m23, - 1, 1 ) );
    
                    if ( Math.abs( m23 ) < 0.99999 ) {
    
                        this._y = Math.atan2( m13, m33 );
                        this._z = Math.atan2( m21, m22 );
    
                    } else {
    
                        this._y = Math.atan2( - m31, m11 );
                        this._z = 0;
    
                    }
    
                } else if ( order === 'ZXY' ) {
    
                    this._x = Math.asin( clamp( m32, - 1, 1 ) );
    
                    if ( Math.abs( m32 ) < 0.99999 ) {
    
                        this._y = Math.atan2( - m31, m33 );
                        this._z = Math.atan2( - m12, m22 );
    
                    } else {
    
                        this._y = 0;
                        this._z = Math.atan2( m21, m11 );
    
                    }
    
                } else if ( order === 'ZYX' ) {
    
                    this._y = Math.asin( - clamp( m31, - 1, 1 ) );
    
                    if ( Math.abs( m31 ) < 0.99999 ) {
    
                        this._x = Math.atan2( m32, m33 );
                        this._z = Math.atan2( m21, m11 );
    
                    } else {
    
                        this._x = 0;
                        this._z = Math.atan2( - m12, m22 );
    
                    }
    
                } else if ( order === 'YZX' ) {
    
                    this._z = Math.asin( clamp( m21, - 1, 1 ) );
    
                    if ( Math.abs( m21 ) < 0.99999 ) {
    
                        this._x = Math.atan2( - m23, m22 );
                        this._y = Math.atan2( - m31, m11 );
    
                    } else {
    
                        this._x = 0;
                        this._y = Math.atan2( m13, m33 );
    
                    }
    
                } else if ( order === 'XZY' ) {
    
                    this._z = Math.asin( - clamp( m12, - 1, 1 ) );
    
                    if ( Math.abs( m12 ) < 0.99999 ) {
    
                        this._x = Math.atan2( m32, m22 );
                        this._y = Math.atan2( m13, m11 );
    
                    } else {
    
                        this._x = Math.atan2( - m23, m33 );
                        this._y = 0;
    
                    }
    
                } else {
    
                    console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );
    
                }
    
                this._order = order;
    
                if ( update !== false ) this.onChangeCallback();
    
                return this;
    
            },
    
            setFromQuaternion: function () {
    
                var matrix = new Matrix4();
    
                return function setFromQuaternion( q, order, update ) {
    
                    matrix.makeRotationFromQuaternion( q );
    
                    return this.setFromRotationMatrix( matrix, order, update );
    
                };
    
            }(),
    
            setFromVector3: function ( v, order ) {
    
                return this.set( v.x, v.y, v.z, order || this._order );
    
            },
    
            reorder: function () {
    
                // WARNING: this discards revolution information -bhouston
    
                var q = new Quaternion();
    
                return function reorder( newOrder ) {
    
                    q.setFromEuler( this );
    
                    return this.setFromQuaternion( q, newOrder );
    
                };
    
            }(),
    
            equals: function ( euler ) {
    
                return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
    
            },
    
            fromArray: function ( array ) {
    
                this._x = array[ 0 ];
                this._y = array[ 1 ];
                this._z = array[ 2 ];
                if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
    
                this.onChangeCallback();
    
                return this;
    
            },
    
            toArray: function ( array, offset ) {
    
                if ( array === undefined ) array = [];
                if ( offset === undefined ) offset = 0;
    
                array[ offset ] = this._x;
                array[ offset + 1 ] = this._y;
                array[ offset + 2 ] = this._z;
                array[ offset + 3 ] = this._order;
    
                return array;
    
            },
    
            toVector3: function ( optionalResult ) {
    
                if ( optionalResult ) {
    
                    return optionalResult.set( this._x, this._y, this._z );
    
                } else {
    
                    return new Vector3( this._x, this._y, this._z );
    
                }
    
            },
    
            onChange: function ( callback ) {
    
                this.onChangeCallback = callback;
    
                return this;
    
            },
    
            onChangeCallback: function () {}
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function Layers() {
    
            this.mask = 1 | 0;
    
        }
    
        Object.assign( Layers.prototype, {
    
            set: function ( channel ) {
    
                this.mask = 1 << channel | 0;
    
            },
    
            enable: function ( channel ) {
    
                this.mask |= 1 << channel | 0;
    
            },
    
            toggle: function ( channel ) {
    
                this.mask ^= 1 << channel | 0;
    
            },
    
            disable: function ( channel ) {
    
                this.mask &= ~ ( 1 << channel | 0 );
    
            },
    
            test: function ( layers ) {
    
                return ( this.mask & layers.mask ) !== 0;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author WestLangley / http://github.com/WestLangley
         * @author elephantatwork / www.elephantatwork.ch
         */
    
        var object3DId = 0;
    
        function Object3D() {
    
            Object.defineProperty( this, 'id', { value: object3DId ++ } );
    
            this.uuid = _Math.generateUUID();
    
            this.name = '';
            this.type = 'Object3D';
    
            this.parent = null;
            this.children = [];
    
            this.up = Object3D.DefaultUp.clone();
    
            var position = new Vector3();
            var rotation = new Euler();
            var quaternion = new Quaternion();
            var scale = new Vector3( 1, 1, 1 );
    
            function onRotationChange() {
    
                quaternion.setFromEuler( rotation, false );
    
            }
    
            function onQuaternionChange() {
    
                rotation.setFromQuaternion( quaternion, undefined, false );
    
            }
    
            rotation.onChange( onRotationChange );
            quaternion.onChange( onQuaternionChange );
    
            Object.defineProperties( this, {
                position: {
                    configurable: true,
                    enumerable: true,
                    value: position
                },
                rotation: {
                    configurable: true,
                    enumerable: true,
                    value: rotation
                },
                quaternion: {
                    configurable: true,
                    enumerable: true,
                    value: quaternion
                },
                scale: {
                    configurable: true,
                    enumerable: true,
                    value: scale
                },
                modelViewMatrix: {
                    value: new Matrix4()
                },
                normalMatrix: {
                    value: new Matrix3()
                }
            } );
    
            this.matrix = new Matrix4();
            this.matrixWorld = new Matrix4();
    
            this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
            this.matrixWorldNeedsUpdate = false;
    
            this.layers = new Layers();
            this.visible = true;
    
            this.castShadow = false;
            this.receiveShadow = false;
    
            this.frustumCulled = true;
            this.renderOrder = 0;
    
            this.userData = {};
    
        }
    
        Object3D.DefaultUp = new Vector3( 0, 1, 0 );
        Object3D.DefaultMatrixAutoUpdate = true;
    
        Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
    
            constructor: Object3D,
    
            isObject3D: true,
    
            onBeforeRender: function () {},
            onAfterRender: function () {},
    
            applyMatrix: function ( matrix ) {
    
                this.matrix.multiplyMatrices( matrix, this.matrix );
    
                this.matrix.decompose( this.position, this.quaternion, this.scale );
    
            },
    
            applyQuaternion: function ( q ) {
    
                this.quaternion.premultiply( q );
    
                return this;
    
            },
    
            setRotationFromAxisAngle: function ( axis, angle ) {
    
                // assumes axis is normalized
    
                this.quaternion.setFromAxisAngle( axis, angle );
    
            },
    
            setRotationFromEuler: function ( euler ) {
    
                this.quaternion.setFromEuler( euler, true );
    
            },
    
            setRotationFromMatrix: function ( m ) {
    
                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    
                this.quaternion.setFromRotationMatrix( m );
    
            },
    
            setRotationFromQuaternion: function ( q ) {
    
                // assumes q is normalized
    
                this.quaternion.copy( q );
    
            },
    
            rotateOnAxis: function () {
    
                // rotate object on axis in object space
                // axis is assumed to be normalized
    
                var q1 = new Quaternion();
    
                return function rotateOnAxis( axis, angle ) {
    
                    q1.setFromAxisAngle( axis, angle );
    
                    this.quaternion.multiply( q1 );
    
                    return this;
    
                };
    
            }(),
    
            rotateOnWorldAxis: function () {
    
                // rotate object on axis in world space
                // axis is assumed to be normalized
                // method assumes no rotated parent
    
                var q1 = new Quaternion();
    
                return function rotateOnWorldAxis( axis, angle ) {
    
                    q1.setFromAxisAngle( axis, angle );
    
                    this.quaternion.premultiply( q1 );
    
                    return this;
    
                };
    
            }(),
    
            rotateX: function () {
    
                var v1 = new Vector3( 1, 0, 0 );
    
                return function rotateX( angle ) {
    
                    return this.rotateOnAxis( v1, angle );
    
                };
    
            }(),
    
            rotateY: function () {
    
                var v1 = new Vector3( 0, 1, 0 );
    
                return function rotateY( angle ) {
    
                    return this.rotateOnAxis( v1, angle );
    
                };
    
            }(),
    
            rotateZ: function () {
    
                var v1 = new Vector3( 0, 0, 1 );
    
                return function rotateZ( angle ) {
    
                    return this.rotateOnAxis( v1, angle );
    
                };
    
            }(),
    
            translateOnAxis: function () {
    
                // translate object by distance along axis in object space
                // axis is assumed to be normalized
    
                var v1 = new Vector3();
    
                return function translateOnAxis( axis, distance ) {
    
                    v1.copy( axis ).applyQuaternion( this.quaternion );
    
                    this.position.add( v1.multiplyScalar( distance ) );
    
                    return this;
    
                };
    
            }(),
    
            translateX: function () {
    
                var v1 = new Vector3( 1, 0, 0 );
    
                return function translateX( distance ) {
    
                    return this.translateOnAxis( v1, distance );
    
                };
    
            }(),
    
            translateY: function () {
    
                var v1 = new Vector3( 0, 1, 0 );
    
                return function translateY( distance ) {
    
                    return this.translateOnAxis( v1, distance );
    
                };
    
            }(),
    
            translateZ: function () {
    
                var v1 = new Vector3( 0, 0, 1 );
    
                return function translateZ( distance ) {
    
                    return this.translateOnAxis( v1, distance );
    
                };
    
            }(),
    
            localToWorld: function ( vector ) {
    
                return vector.applyMatrix4( this.matrixWorld );
    
            },
    
            worldToLocal: function () {
    
                var m1 = new Matrix4();
    
                return function worldToLocal( vector ) {
    
                    return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );
    
                };
    
            }(),
    
            lookAt: function () {
    
                // This method does not support objects having non-uniformly-scaled parent(s)
    
                var q1 = new Quaternion();
                var m1 = new Matrix4();
                var target = new Vector3();
                var position = new Vector3();
    
                return function lookAt( x, y, z ) {
    
                    if ( x.isVector3 ) {
    
                        target.copy( x );
    
                    } else {
    
                        target.set( x, y, z );
    
                    }
    
                    var parent = this.parent;
    
                    this.updateWorldMatrix( true, false );
    
                    position.setFromMatrixPosition( this.matrixWorld );
    
                    if ( this.isCamera || this.isLight ) {
    
                        m1.lookAt( position, target, this.up );
    
                    } else {
    
                        m1.lookAt( target, position, this.up );
    
                    }
    
                    this.quaternion.setFromRotationMatrix( m1 );
    
                    if ( parent ) {
    
                        m1.extractRotation( parent.matrixWorld );
                        q1.setFromRotationMatrix( m1 );
                        this.quaternion.premultiply( q1.inverse() );
    
                    }
    
                };
    
            }(),
    
            add: function ( object ) {
    
                if ( arguments.length > 1 ) {
    
                    for ( var i = 0; i < arguments.length; i ++ ) {
    
                        this.add( arguments[ i ] );
    
                    }
    
                    return this;
    
                }
    
                if ( object === this ) {
    
                    console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
                    return this;
    
                }
    
                if ( ( object && object.isObject3D ) ) {
    
                    if ( object.parent !== null ) {
    
                        object.parent.remove( object );
    
                    }
    
                    object.parent = this;
                    object.dispatchEvent( { type: 'added' } );
    
                    this.children.push( object );
    
                } else {
    
                    console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );
    
                }
    
                return this;
    
            },
    
            remove: function ( object ) {
    
                if ( arguments.length > 1 ) {
    
                    for ( var i = 0; i < arguments.length; i ++ ) {
    
                        this.remove( arguments[ i ] );
    
                    }
    
                    return this;
    
                }
    
                var index = this.children.indexOf( object );
    
                if ( index !== - 1 ) {
    
                    object.parent = null;
    
                    object.dispatchEvent( { type: 'removed' } );
    
                    this.children.splice( index, 1 );
    
                }
    
                return this;
    
            },
    
            getObjectById: function ( id ) {
    
                return this.getObjectByProperty( 'id', id );
    
            },
    
            getObjectByName: function ( name ) {
    
                return this.getObjectByProperty( 'name', name );
    
            },
    
            getObjectByProperty: function ( name, value ) {
    
                if ( this[ name ] === value ) return this;
    
                for ( var i = 0, l = this.children.length; i < l; i ++ ) {
    
                    var child = this.children[ i ];
                    var object = child.getObjectByProperty( name, value );
    
                    if ( object !== undefined ) {
    
                        return object;
    
                    }
    
                }
    
                return undefined;
    
            },
    
            getWorldPosition: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
                    target = new Vector3();
    
                }
    
                this.updateMatrixWorld( true );
    
                return target.setFromMatrixPosition( this.matrixWorld );
    
            },
    
            getWorldQuaternion: function () {
    
                var position = new Vector3();
                var scale = new Vector3();
    
                return function getWorldQuaternion( target ) {
    
                    if ( target === undefined ) {
    
                        console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
                        target = new Quaternion();
    
                    }
    
                    this.updateMatrixWorld( true );
    
                    this.matrixWorld.decompose( position, target, scale );
    
                    return target;
    
                };
    
            }(),
    
            getWorldScale: function () {
    
                var position = new Vector3();
                var quaternion = new Quaternion();
    
                return function getWorldScale( target ) {
    
                    if ( target === undefined ) {
    
                        console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
                        target = new Vector3();
    
                    }
    
                    this.updateMatrixWorld( true );
    
                    this.matrixWorld.decompose( position, quaternion, target );
    
                    return target;
    
                };
    
            }(),
    
            getWorldDirection: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
                    target = new Vector3();
    
                }
    
                this.updateMatrixWorld( true );
    
                var e = this.matrixWorld.elements;
    
                return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();
    
            },
    
            raycast: function () {},
    
            traverse: function ( callback ) {
    
                callback( this );
    
                var children = this.children;
    
                for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                    children[ i ].traverse( callback );
    
                }
    
            },
    
            traverseVisible: function ( callback ) {
    
                if ( this.visible === false ) return;
    
                callback( this );
    
                var children = this.children;
    
                for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                    children[ i ].traverseVisible( callback );
    
                }
    
            },
    
            traverseAncestors: function ( callback ) {
    
                var parent = this.parent;
    
                if ( parent !== null ) {
    
                    callback( parent );
    
                    parent.traverseAncestors( callback );
    
                }
    
            },
    
            updateMatrix: function () {
    
                this.matrix.compose( this.position, this.quaternion, this.scale );
    
                this.matrixWorldNeedsUpdate = true;
    
            },
    
            updateMatrixWorld: function ( force ) {
    
                if ( this.matrixAutoUpdate ) this.updateMatrix();
    
                if ( this.matrixWorldNeedsUpdate || force ) {
    
                    if ( this.parent === null ) {
    
                        this.matrixWorld.copy( this.matrix );
    
                    } else {
    
                        this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
    
                    }
    
                    this.matrixWorldNeedsUpdate = false;
    
                    force = true;
    
                }
    
                // update children
    
                var children = this.children;
    
                for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                    children[ i ].updateMatrixWorld( force );
    
                }
    
            },
    
            updateWorldMatrix: function ( updateParents, updateChildren ) {
    
                var parent = this.parent;
    
                if ( updateParents === true && parent !== null ) {
    
                    parent.updateWorldMatrix( true, false );
    
                }
    
                if ( this.matrixAutoUpdate ) this.updateMatrix();
    
                if ( this.parent === null ) {
    
                    this.matrixWorld.copy( this.matrix );
    
                } else {
    
                    this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
    
                }
    
                // update children
    
                if ( updateChildren === true ) {
    
                    var children = this.children;
    
                    for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                        children[ i ].updateWorldMatrix( false, true );
    
                    }
    
                }
    
            },
    
            toJSON: function ( meta ) {
    
                // meta is a string when called from JSON.stringify
                var isRootObject = ( meta === undefined || typeof meta === 'string' );
    
                var output = {};
    
                // meta is a hash used to collect geometries, materials.
                // not providing it implies that this is the root object
                // being serialized.
                if ( isRootObject ) {
    
                    // initialize meta obj
                    meta = {
                        geometries: {},
                        materials: {},
                        textures: {},
                        images: {},
                        shapes: {}
                    };
    
                    output.metadata = {
                        version: 4.5,
                        type: 'Object',
                        generator: 'Object3D.toJSON'
                    };
    
                }
    
                // standard Object3D serialization
    
                var object = {};
    
                object.uuid = this.uuid;
                object.type = this.type;
    
                if ( this.name !== '' ) object.name = this.name;
                if ( this.castShadow === true ) object.castShadow = true;
                if ( this.receiveShadow === true ) object.receiveShadow = true;
                if ( this.visible === false ) object.visible = false;
                if ( this.frustumCulled === false ) object.frustumCulled = false;
                if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
                if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
    
                object.layers = this.layers.mask;
                object.matrix = this.matrix.toArray();
    
                if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;
    
                // object specific properties
    
                if ( this.isMesh && this.drawMode !== TrianglesDrawMode ) object.drawMode = this.drawMode;
    
                //
    
                function serialize( library, element ) {
    
                    if ( library[ element.uuid ] === undefined ) {
    
                        library[ element.uuid ] = element.toJSON( meta );
    
                    }
    
                    return element.uuid;
    
                }
    
                if ( this.isMesh || this.isLine || this.isPoints ) {
    
                    object.geometry = serialize( meta.geometries, this.geometry );
    
                    var parameters = this.geometry.parameters;
    
                    if ( parameters !== undefined && parameters.shapes !== undefined ) {
    
                        var shapes = parameters.shapes;
    
                        if ( Array.isArray( shapes ) ) {
    
                            for ( var i = 0, l = shapes.length; i < l; i ++ ) {
    
                                var shape = shapes[ i ];
    
                                serialize( meta.shapes, shape );
    
                            }
    
                        } else {
    
                            serialize( meta.shapes, shapes );
    
                        }
    
                    }
    
                }
    
                if ( this.material !== undefined ) {
    
                    if ( Array.isArray( this.material ) ) {
    
                        var uuids = [];
    
                        for ( var i = 0, l = this.material.length; i < l; i ++ ) {
    
                            uuids.push( serialize( meta.materials, this.material[ i ] ) );
    
                        }
    
                        object.material = uuids;
    
                    } else {
    
                        object.material = serialize( meta.materials, this.material );
    
                    }
    
                }
    
                //
    
                if ( this.children.length > 0 ) {
    
                    object.children = [];
    
                    for ( var i = 0; i < this.children.length; i ++ ) {
    
                        object.children.push( this.children[ i ].toJSON( meta ).object );
    
                    }
    
                }
    
                if ( isRootObject ) {
    
                    var geometries = extractFromCache( meta.geometries );
                    var materials = extractFromCache( meta.materials );
                    var textures = extractFromCache( meta.textures );
                    var images = extractFromCache( meta.images );
                    var shapes = extractFromCache( meta.shapes );
    
                    if ( geometries.length > 0 ) output.geometries = geometries;
                    if ( materials.length > 0 ) output.materials = materials;
                    if ( textures.length > 0 ) output.textures = textures;
                    if ( images.length > 0 ) output.images = images;
                    if ( shapes.length > 0 ) output.shapes = shapes;
    
                }
    
                output.object = object;
    
                return output;
    
                // extract data from the cache hash
                // remove metadata on each item
                // and return as array
                function extractFromCache( cache ) {
    
                    var values = [];
                    for ( var key in cache ) {
    
                        var data = cache[ key ];
                        delete data.metadata;
                        values.push( data );
    
                    }
                    return values;
    
                }
    
            },
    
            clone: function ( recursive ) {
    
                return new this.constructor().copy( this, recursive );
    
            },
    
            copy: function ( source, recursive ) {
    
                if ( recursive === undefined ) recursive = true;
    
                this.name = source.name;
    
                this.up.copy( source.up );
    
                this.position.copy( source.position );
                this.quaternion.copy( source.quaternion );
                this.scale.copy( source.scale );
    
                this.matrix.copy( source.matrix );
                this.matrixWorld.copy( source.matrixWorld );
    
                this.matrixAutoUpdate = source.matrixAutoUpdate;
                this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
    
                this.layers.mask = source.layers.mask;
                this.visible = source.visible;
    
                this.castShadow = source.castShadow;
                this.receiveShadow = source.receiveShadow;
    
                this.frustumCulled = source.frustumCulled;
                this.renderOrder = source.renderOrder;
    
                this.userData = JSON.parse( JSON.stringify( source.userData ) );
    
                if ( recursive === true ) {
    
                    for ( var i = 0; i < source.children.length; i ++ ) {
    
                        var child = source.children[ i ];
                        this.add( child.clone() );
    
                    }
    
                }
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author kile / http://kile.stravaganza.org/
         * @author alteredq / http://alteredqualia.com/
         * @author mikael emtinger / http://gomo.se/
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * @author bhouston / http://clara.io
         */
    
        var geometryId = 0; // Geometry uses even numbers as Id
    
        function Geometry() {
    
            Object.defineProperty( this, 'id', { value: geometryId += 2 } );
    
            this.uuid = _Math.generateUUID();
    
            this.name = '';
            this.type = 'Geometry';
    
            this.vertices = [];
            this.colors = [];
            this.faces = [];
            this.faceVertexUvs = [[]];
    
            this.morphTargets = [];
            this.morphNormals = [];
    
            this.skinWeights = [];
            this.skinIndices = [];
    
            this.lineDistances = [];
    
            this.boundingBox = null;
            this.boundingSphere = null;
    
            // update flags
    
            this.elementsNeedUpdate = false;
            this.verticesNeedUpdate = false;
            this.uvsNeedUpdate = false;
            this.normalsNeedUpdate = false;
            this.colorsNeedUpdate = false;
            this.lineDistancesNeedUpdate = false;
            this.groupsNeedUpdate = false;
    
        }
    
        Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
    
            constructor: Geometry,
    
            isGeometry: true,
    
            applyMatrix: function ( matrix ) {
    
                var normalMatrix = new Matrix3().getNormalMatrix( matrix );
    
                for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {
    
                    var vertex = this.vertices[ i ];
                    vertex.applyMatrix4( matrix );
    
                }
    
                for ( var i = 0, il = this.faces.length; i < il; i ++ ) {
    
                    var face = this.faces[ i ];
                    face.normal.applyMatrix3( normalMatrix ).normalize();
    
                    for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
    
                        face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();
    
                    }
    
                }
    
                if ( this.boundingBox !== null ) {
    
                    this.computeBoundingBox();
    
                }
    
                if ( this.boundingSphere !== null ) {
    
                    this.computeBoundingSphere();
    
                }
    
                this.verticesNeedUpdate = true;
                this.normalsNeedUpdate = true;
    
                return this;
    
            },
    
            rotateX: function () {
    
                // rotate geometry around world x-axis
    
                var m1 = new Matrix4();
    
                return function rotateX( angle ) {
    
                    m1.makeRotationX( angle );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            rotateY: function () {
    
                // rotate geometry around world y-axis
    
                var m1 = new Matrix4();
    
                return function rotateY( angle ) {
    
                    m1.makeRotationY( angle );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            rotateZ: function () {
    
                // rotate geometry around world z-axis
    
                var m1 = new Matrix4();
    
                return function rotateZ( angle ) {
    
                    m1.makeRotationZ( angle );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            translate: function () {
    
                // translate geometry
    
                var m1 = new Matrix4();
    
                return function translate( x, y, z ) {
    
                    m1.makeTranslation( x, y, z );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            scale: function () {
    
                // scale geometry
    
                var m1 = new Matrix4();
    
                return function scale( x, y, z ) {
    
                    m1.makeScale( x, y, z );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            lookAt: function () {
    
                var obj = new Object3D();
    
                return function lookAt( vector ) {
    
                    obj.lookAt( vector );
    
                    obj.updateMatrix();
    
                    this.applyMatrix( obj.matrix );
    
                };
    
            }(),
    
            fromBufferGeometry: function ( geometry ) {
    
                var scope = this;
    
                var indices = geometry.index !== null ? geometry.index.array : undefined;
                var attributes = geometry.attributes;
    
                var positions = attributes.position.array;
                var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
                var colors = attributes.color !== undefined ? attributes.color.array : undefined;
                var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
                var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
    
                if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];
    
                for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {
    
                    scope.vertices.push( new Vector3().fromArray( positions, i ) );
    
                    if ( colors !== undefined ) {
    
                        scope.colors.push( new Color().fromArray( colors, i ) );
    
                    }
    
                }
    
                function addFace( a, b, c, materialIndex ) {
    
                    var vertexColors = ( colors === undefined ) ? [] : [
                        scope.colors[ a ].clone(),
                        scope.colors[ b ].clone(),
                        scope.colors[ c ].clone() ];
    
                    var vertexNormals = ( normals === undefined ) ? [] : [
                        new Vector3().fromArray( normals, a * 3 ),
                        new Vector3().fromArray( normals, b * 3 ),
                        new Vector3().fromArray( normals, c * 3 )
                    ];
    
                    var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );
    
                    scope.faces.push( face );
    
                    if ( uvs !== undefined ) {
    
                        scope.faceVertexUvs[ 0 ].push( [
                            new Vector2().fromArray( uvs, a * 2 ),
                            new Vector2().fromArray( uvs, b * 2 ),
                            new Vector2().fromArray( uvs, c * 2 )
                        ] );
    
                    }
    
                    if ( uvs2 !== undefined ) {
    
                        scope.faceVertexUvs[ 1 ].push( [
                            new Vector2().fromArray( uvs2, a * 2 ),
                            new Vector2().fromArray( uvs2, b * 2 ),
                            new Vector2().fromArray( uvs2, c * 2 )
                        ] );
    
                    }
    
                }
    
                var groups = geometry.groups;
    
                if ( groups.length > 0 ) {
    
                    for ( var i = 0; i < groups.length; i ++ ) {
    
                        var group = groups[ i ];
    
                        var start = group.start;
                        var count = group.count;
    
                        for ( var j = start, jl = start + count; j < jl; j += 3 ) {
    
                            if ( indices !== undefined ) {
    
                                addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );
    
                            } else {
    
                                addFace( j, j + 1, j + 2, group.materialIndex );
    
                            }
    
                        }
    
                    }
    
                } else {
    
                    if ( indices !== undefined ) {
    
                        for ( var i = 0; i < indices.length; i += 3 ) {
    
                            addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );
    
                        }
    
                    } else {
    
                        for ( var i = 0; i < positions.length / 3; i += 3 ) {
    
                            addFace( i, i + 1, i + 2 );
    
                        }
    
                    }
    
                }
    
                this.computeFaceNormals();
    
                if ( geometry.boundingBox !== null ) {
    
                    this.boundingBox = geometry.boundingBox.clone();
    
                }
    
                if ( geometry.boundingSphere !== null ) {
    
                    this.boundingSphere = geometry.boundingSphere.clone();
    
                }
    
                return this;
    
            },
    
            center: function () {
    
                var offset = new Vector3();
    
                return function center() {
    
                    this.computeBoundingBox();
    
                    this.boundingBox.getCenter( offset ).negate();
    
                    this.translate( offset.x, offset.y, offset.z );
    
                    return this;
    
                };
    
            }(),
    
            normalize: function () {
    
                this.computeBoundingSphere();
    
                var center = this.boundingSphere.center;
                var radius = this.boundingSphere.radius;
    
                var s = radius === 0 ? 1 : 1.0 / radius;
    
                var matrix = new Matrix4();
                matrix.set(
                    s, 0, 0, - s * center.x,
                    0, s, 0, - s * center.y,
                    0, 0, s, - s * center.z,
                    0, 0, 0, 1
                );
    
                this.applyMatrix( matrix );
    
                return this;
    
            },
    
            computeFaceNormals: function () {
    
                var cb = new Vector3(), ab = new Vector3();
    
                for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                    var face = this.faces[ f ];
    
                    var vA = this.vertices[ face.a ];
                    var vB = this.vertices[ face.b ];
                    var vC = this.vertices[ face.c ];
    
                    cb.subVectors( vC, vB );
                    ab.subVectors( vA, vB );
                    cb.cross( ab );
    
                    cb.normalize();
    
                    face.normal.copy( cb );
    
                }
    
            },
    
            computeVertexNormals: function ( areaWeighted ) {
    
                if ( areaWeighted === undefined ) areaWeighted = true;
    
                var v, vl, f, fl, face, vertices;
    
                vertices = new Array( this.vertices.length );
    
                for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
    
                    vertices[ v ] = new Vector3();
    
                }
    
                if ( areaWeighted ) {
    
                    // vertex normals weighted by triangle areas
                    // http://www.iquilezles.org/www/articles/normals/normals.htm
    
                    var vA, vB, vC;
                    var cb = new Vector3(), ab = new Vector3();
    
                    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                        face = this.faces[ f ];
    
                        vA = this.vertices[ face.a ];
                        vB = this.vertices[ face.b ];
                        vC = this.vertices[ face.c ];
    
                        cb.subVectors( vC, vB );
                        ab.subVectors( vA, vB );
                        cb.cross( ab );
    
                        vertices[ face.a ].add( cb );
                        vertices[ face.b ].add( cb );
                        vertices[ face.c ].add( cb );
    
                    }
    
                } else {
    
                    this.computeFaceNormals();
    
                    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                        face = this.faces[ f ];
    
                        vertices[ face.a ].add( face.normal );
                        vertices[ face.b ].add( face.normal );
                        vertices[ face.c ].add( face.normal );
    
                    }
    
                }
    
                for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
    
                    vertices[ v ].normalize();
    
                }
    
                for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                    face = this.faces[ f ];
    
                    var vertexNormals = face.vertexNormals;
    
                    if ( vertexNormals.length === 3 ) {
    
                        vertexNormals[ 0 ].copy( vertices[ face.a ] );
                        vertexNormals[ 1 ].copy( vertices[ face.b ] );
                        vertexNormals[ 2 ].copy( vertices[ face.c ] );
    
                    } else {
    
                        vertexNormals[ 0 ] = vertices[ face.a ].clone();
                        vertexNormals[ 1 ] = vertices[ face.b ].clone();
                        vertexNormals[ 2 ] = vertices[ face.c ].clone();
    
                    }
    
                }
    
                if ( this.faces.length > 0 ) {
    
                    this.normalsNeedUpdate = true;
    
                }
    
            },
    
            computeFlatVertexNormals: function () {
    
                var f, fl, face;
    
                this.computeFaceNormals();
    
                for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                    face = this.faces[ f ];
    
                    var vertexNormals = face.vertexNormals;
    
                    if ( vertexNormals.length === 3 ) {
    
                        vertexNormals[ 0 ].copy( face.normal );
                        vertexNormals[ 1 ].copy( face.normal );
                        vertexNormals[ 2 ].copy( face.normal );
    
                    } else {
    
                        vertexNormals[ 0 ] = face.normal.clone();
                        vertexNormals[ 1 ] = face.normal.clone();
                        vertexNormals[ 2 ] = face.normal.clone();
    
                    }
    
                }
    
                if ( this.faces.length > 0 ) {
    
                    this.normalsNeedUpdate = true;
    
                }
    
            },
    
            computeMorphNormals: function () {
    
                var i, il, f, fl, face;
    
                // save original normals
                // - create temp variables on first access
                //   otherwise just copy (for faster repeated calls)
    
                for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                    face = this.faces[ f ];
    
                    if ( ! face.__originalFaceNormal ) {
    
                        face.__originalFaceNormal = face.normal.clone();
    
                    } else {
    
                        face.__originalFaceNormal.copy( face.normal );
    
                    }
    
                    if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];
    
                    for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {
    
                        if ( ! face.__originalVertexNormals[ i ] ) {
    
                            face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();
    
                        } else {
    
                            face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );
    
                        }
    
                    }
    
                }
    
                // use temp geometry to compute face and vertex normals for each morph
    
                var tmpGeo = new Geometry();
                tmpGeo.faces = this.faces;
    
                for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
    
                    // create on first access
    
                    if ( ! this.morphNormals[ i ] ) {
    
                        this.morphNormals[ i ] = {};
                        this.morphNormals[ i ].faceNormals = [];
                        this.morphNormals[ i ].vertexNormals = [];
    
                        var dstNormalsFace = this.morphNormals[ i ].faceNormals;
                        var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;
    
                        var faceNormal, vertexNormals;
    
                        for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                            faceNormal = new Vector3();
                            vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };
    
                            dstNormalsFace.push( faceNormal );
                            dstNormalsVertex.push( vertexNormals );
    
                        }
    
                    }
    
                    var morphNormals = this.morphNormals[ i ];
    
                    // set vertices to morph target
    
                    tmpGeo.vertices = this.morphTargets[ i ].vertices;
    
                    // compute morph normals
    
                    tmpGeo.computeFaceNormals();
                    tmpGeo.computeVertexNormals();
    
                    // store morph normals
    
                    var faceNormal, vertexNormals;
    
                    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                        face = this.faces[ f ];
    
                        faceNormal = morphNormals.faceNormals[ f ];
                        vertexNormals = morphNormals.vertexNormals[ f ];
    
                        faceNormal.copy( face.normal );
    
                        vertexNormals.a.copy( face.vertexNormals[ 0 ] );
                        vertexNormals.b.copy( face.vertexNormals[ 1 ] );
                        vertexNormals.c.copy( face.vertexNormals[ 2 ] );
    
                    }
    
                }
    
                // restore original normals
    
                for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                    face = this.faces[ f ];
    
                    face.normal = face.__originalFaceNormal;
                    face.vertexNormals = face.__originalVertexNormals;
    
                }
    
            },
    
            computeBoundingBox: function () {
    
                if ( this.boundingBox === null ) {
    
                    this.boundingBox = new Box3();
    
                }
    
                this.boundingBox.setFromPoints( this.vertices );
    
            },
    
            computeBoundingSphere: function () {
    
                if ( this.boundingSphere === null ) {
    
                    this.boundingSphere = new Sphere();
    
                }
    
                this.boundingSphere.setFromPoints( this.vertices );
    
            },
    
            merge: function ( geometry, matrix, materialIndexOffset ) {
    
                if ( ! ( geometry && geometry.isGeometry ) ) {
    
                    console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
                    return;
    
                }
    
                var normalMatrix,
                    vertexOffset = this.vertices.length,
                    vertices1 = this.vertices,
                    vertices2 = geometry.vertices,
                    faces1 = this.faces,
                    faces2 = geometry.faces,
                    uvs1 = this.faceVertexUvs[ 0 ],
                    uvs2 = geometry.faceVertexUvs[ 0 ],
                    colors1 = this.colors,
                    colors2 = geometry.colors;
    
                if ( materialIndexOffset === undefined ) materialIndexOffset = 0;
    
                if ( matrix !== undefined ) {
    
                    normalMatrix = new Matrix3().getNormalMatrix( matrix );
    
                }
    
                // vertices
    
                for ( var i = 0, il = vertices2.length; i < il; i ++ ) {
    
                    var vertex = vertices2[ i ];
    
                    var vertexCopy = vertex.clone();
    
                    if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );
    
                    vertices1.push( vertexCopy );
    
                }
    
                // colors
    
                for ( var i = 0, il = colors2.length; i < il; i ++ ) {
    
                    colors1.push( colors2[ i ].clone() );
    
                }
    
                // faces
    
                for ( i = 0, il = faces2.length; i < il; i ++ ) {
    
                    var face = faces2[ i ], faceCopy, normal, color,
                        faceVertexNormals = face.vertexNormals,
                        faceVertexColors = face.vertexColors;
    
                    faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
                    faceCopy.normal.copy( face.normal );
    
                    if ( normalMatrix !== undefined ) {
    
                        faceCopy.normal.applyMatrix3( normalMatrix ).normalize();
    
                    }
    
                    for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {
    
                        normal = faceVertexNormals[ j ].clone();
    
                        if ( normalMatrix !== undefined ) {
    
                            normal.applyMatrix3( normalMatrix ).normalize();
    
                        }
    
                        faceCopy.vertexNormals.push( normal );
    
                    }
    
                    faceCopy.color.copy( face.color );
    
                    for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {
    
                        color = faceVertexColors[ j ];
                        faceCopy.vertexColors.push( color.clone() );
    
                    }
    
                    faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
    
                    faces1.push( faceCopy );
    
                }
    
                // uvs
    
                for ( i = 0, il = uvs2.length; i < il; i ++ ) {
    
                    var uv = uvs2[ i ], uvCopy = [];
    
                    if ( uv === undefined ) {
    
                        continue;
    
                    }
    
                    for ( var j = 0, jl = uv.length; j < jl; j ++ ) {
    
                        uvCopy.push( uv[ j ].clone() );
    
                    }
    
                    uvs1.push( uvCopy );
    
                }
    
            },
    
            mergeMesh: function ( mesh ) {
    
                if ( ! ( mesh && mesh.isMesh ) ) {
    
                    console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
                    return;
    
                }
    
                if ( mesh.matrixAutoUpdate ) mesh.updateMatrix();
    
                this.merge( mesh.geometry, mesh.matrix );
    
            },
    
            /*
             * Checks for duplicate vertices with hashmap.
             * Duplicated vertices are removed
             * and faces' vertices are updated.
             */
    
            mergeVertices: function () {
    
                var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
                var unique = [], changes = [];
    
                var v, key;
                var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
                var precision = Math.pow( 10, precisionPoints );
                var i, il, face;
                var indices, j, jl;
    
                for ( i = 0, il = this.vertices.length; i < il; i ++ ) {
    
                    v = this.vertices[ i ];
                    key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );
    
                    if ( verticesMap[ key ] === undefined ) {
    
                        verticesMap[ key ] = i;
                        unique.push( this.vertices[ i ] );
                        changes[ i ] = unique.length - 1;
    
                    } else {
    
                        //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
                        changes[ i ] = changes[ verticesMap[ key ] ];
    
                    }
    
                }
    
    
                // if faces are completely degenerate after merging vertices, we
                // have to remove them from the geometry.
                var faceIndicesToRemove = [];
    
                for ( i = 0, il = this.faces.length; i < il; i ++ ) {
    
                    face = this.faces[ i ];
    
                    face.a = changes[ face.a ];
                    face.b = changes[ face.b ];
                    face.c = changes[ face.c ];
    
                    indices = [ face.a, face.b, face.c ];
    
                    // if any duplicate vertices are found in a Face3
                    // we have to remove the face as nothing can be saved
                    for ( var n = 0; n < 3; n ++ ) {
    
                        if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {
    
                            faceIndicesToRemove.push( i );
                            break;
    
                        }
    
                    }
    
                }
    
                for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
    
                    var idx = faceIndicesToRemove[ i ];
    
                    this.faces.splice( idx, 1 );
    
                    for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {
    
                        this.faceVertexUvs[ j ].splice( idx, 1 );
    
                    }
    
                }
    
                // Use unique set of vertices
    
                var diff = this.vertices.length - unique.length;
                this.vertices = unique;
                return diff;
    
            },
    
            setFromPoints: function ( points ) {
    
                this.vertices = [];
    
                for ( var i = 0, l = points.length; i < l; i ++ ) {
    
                    var point = points[ i ];
                    this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
    
                }
    
                return this;
    
            },
    
            sortFacesByMaterialIndex: function () {
    
                var faces = this.faces;
                var length = faces.length;
    
                // tag faces
    
                for ( var i = 0; i < length; i ++ ) {
    
                    faces[ i ]._id = i;
    
                }
    
                // sort faces
    
                function materialIndexSort( a, b ) {
    
                    return a.materialIndex - b.materialIndex;
    
                }
    
                faces.sort( materialIndexSort );
    
                // sort uvs
    
                var uvs1 = this.faceVertexUvs[ 0 ];
                var uvs2 = this.faceVertexUvs[ 1 ];
    
                var newUvs1, newUvs2;
    
                if ( uvs1 && uvs1.length === length ) newUvs1 = [];
                if ( uvs2 && uvs2.length === length ) newUvs2 = [];
    
                for ( var i = 0; i < length; i ++ ) {
    
                    var id = faces[ i ]._id;
    
                    if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
                    if ( newUvs2 ) newUvs2.push( uvs2[ id ] );
    
                }
    
                if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
                if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;
    
            },
    
            toJSON: function () {
    
                var data = {
                    metadata: {
                        version: 4.5,
                        type: 'Geometry',
                        generator: 'Geometry.toJSON'
                    }
                };
    
                // standard Geometry serialization
    
                data.uuid = this.uuid;
                data.type = this.type;
                if ( this.name !== '' ) data.name = this.name;
    
                if ( this.parameters !== undefined ) {
    
                    var parameters = this.parameters;
    
                    for ( var key in parameters ) {
    
                        if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
    
                    }
    
                    return data;
    
                }
    
                var vertices = [];
    
                for ( var i = 0; i < this.vertices.length; i ++ ) {
    
                    var vertex = this.vertices[ i ];
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                }
    
                var faces = [];
                var normals = [];
                var normalsHash = {};
                var colors = [];
                var colorsHash = {};
                var uvs = [];
                var uvsHash = {};
    
                for ( var i = 0; i < this.faces.length; i ++ ) {
    
                    var face = this.faces[ i ];
    
                    var hasMaterial = true;
                    var hasFaceUv = false; // deprecated
                    var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
                    var hasFaceNormal = face.normal.length() > 0;
                    var hasFaceVertexNormal = face.vertexNormals.length > 0;
                    var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
                    var hasFaceVertexColor = face.vertexColors.length > 0;
    
                    var faceType = 0;
    
                    faceType = setBit( faceType, 0, 0 ); // isQuad
                    faceType = setBit( faceType, 1, hasMaterial );
                    faceType = setBit( faceType, 2, hasFaceUv );
                    faceType = setBit( faceType, 3, hasFaceVertexUv );
                    faceType = setBit( faceType, 4, hasFaceNormal );
                    faceType = setBit( faceType, 5, hasFaceVertexNormal );
                    faceType = setBit( faceType, 6, hasFaceColor );
                    faceType = setBit( faceType, 7, hasFaceVertexColor );
    
                    faces.push( faceType );
                    faces.push( face.a, face.b, face.c );
                    faces.push( face.materialIndex );
    
                    if ( hasFaceVertexUv ) {
    
                        var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];
    
                        faces.push(
                            getUvIndex( faceVertexUvs[ 0 ] ),
                            getUvIndex( faceVertexUvs[ 1 ] ),
                            getUvIndex( faceVertexUvs[ 2 ] )
                        );
    
                    }
    
                    if ( hasFaceNormal ) {
    
                        faces.push( getNormalIndex( face.normal ) );
    
                    }
    
                    if ( hasFaceVertexNormal ) {
    
                        var vertexNormals = face.vertexNormals;
    
                        faces.push(
                            getNormalIndex( vertexNormals[ 0 ] ),
                            getNormalIndex( vertexNormals[ 1 ] ),
                            getNormalIndex( vertexNormals[ 2 ] )
                        );
    
                    }
    
                    if ( hasFaceColor ) {
    
                        faces.push( getColorIndex( face.color ) );
    
                    }
    
                    if ( hasFaceVertexColor ) {
    
                        var vertexColors = face.vertexColors;
    
                        faces.push(
                            getColorIndex( vertexColors[ 0 ] ),
                            getColorIndex( vertexColors[ 1 ] ),
                            getColorIndex( vertexColors[ 2 ] )
                        );
    
                    }
    
                }
    
                function setBit( value, position, enabled ) {
    
                    return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );
    
                }
    
                function getNormalIndex( normal ) {
    
                    var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
    
                    if ( normalsHash[ hash ] !== undefined ) {
    
                        return normalsHash[ hash ];
    
                    }
    
                    normalsHash[ hash ] = normals.length / 3;
                    normals.push( normal.x, normal.y, normal.z );
    
                    return normalsHash[ hash ];
    
                }
    
                function getColorIndex( color ) {
    
                    var hash = color.r.toString() + color.g.toString() + color.b.toString();
    
                    if ( colorsHash[ hash ] !== undefined ) {
    
                        return colorsHash[ hash ];
    
                    }
    
                    colorsHash[ hash ] = colors.length;
                    colors.push( color.getHex() );
    
                    return colorsHash[ hash ];
    
                }
    
                function getUvIndex( uv ) {
    
                    var hash = uv.x.toString() + uv.y.toString();
    
                    if ( uvsHash[ hash ] !== undefined ) {
    
                        return uvsHash[ hash ];
    
                    }
    
                    uvsHash[ hash ] = uvs.length / 2;
                    uvs.push( uv.x, uv.y );
    
                    return uvsHash[ hash ];
    
                }
    
                data.data = {};
    
                data.data.vertices = vertices;
                data.data.normals = normals;
                if ( colors.length > 0 ) data.data.colors = colors;
                if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
                data.data.faces = faces;
    
                return data;
    
            },
    
            clone: function () {
    
                /*
                 // Handle primitives
    
                 var parameters = this.parameters;
    
                 if ( parameters !== undefined ) {
    
                 var values = [];
    
                 for ( var key in parameters ) {
    
                 values.push( parameters[ key ] );
    
                 }
    
                 var geometry = Object.create( this.constructor.prototype );
                 this.constructor.apply( geometry, values );
                 return geometry;
    
                 }
    
                 return new this.constructor().copy( this );
                 */
    
                return new Geometry().copy( this );
    
            },
    
            copy: function ( source ) {
    
                var i, il, j, jl, k, kl;
    
                // reset
    
                this.vertices = [];
                this.colors = [];
                this.faces = [];
                this.faceVertexUvs = [[]];
                this.morphTargets = [];
                this.morphNormals = [];
                this.skinWeights = [];
                this.skinIndices = [];
                this.lineDistances = [];
                this.boundingBox = null;
                this.boundingSphere = null;
    
                // name
    
                this.name = source.name;
    
                // vertices
    
                var vertices = source.vertices;
    
                for ( i = 0, il = vertices.length; i < il; i ++ ) {
    
                    this.vertices.push( vertices[ i ].clone() );
    
                }
    
                // colors
    
                var colors = source.colors;
    
                for ( i = 0, il = colors.length; i < il; i ++ ) {
    
                    this.colors.push( colors[ i ].clone() );
    
                }
    
                // faces
    
                var faces = source.faces;
    
                for ( i = 0, il = faces.length; i < il; i ++ ) {
    
                    this.faces.push( faces[ i ].clone() );
    
                }
    
                // face vertex uvs
    
                for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {
    
                    var faceVertexUvs = source.faceVertexUvs[ i ];
    
                    if ( this.faceVertexUvs[ i ] === undefined ) {
    
                        this.faceVertexUvs[ i ] = [];
    
                    }
    
                    for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {
    
                        var uvs = faceVertexUvs[ j ], uvsCopy = [];
    
                        for ( k = 0, kl = uvs.length; k < kl; k ++ ) {
    
                            var uv = uvs[ k ];
    
                            uvsCopy.push( uv.clone() );
    
                        }
    
                        this.faceVertexUvs[ i ].push( uvsCopy );
    
                    }
    
                }
    
                // morph targets
    
                var morphTargets = source.morphTargets;
    
                for ( i = 0, il = morphTargets.length; i < il; i ++ ) {
    
                    var morphTarget = {};
                    morphTarget.name = morphTargets[ i ].name;
    
                    // vertices
    
                    if ( morphTargets[ i ].vertices !== undefined ) {
    
                        morphTarget.vertices = [];
    
                        for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {
    
                            morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );
    
                        }
    
                    }
    
                    // normals
    
                    if ( morphTargets[ i ].normals !== undefined ) {
    
                        morphTarget.normals = [];
    
                        for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {
    
                            morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );
    
                        }
    
                    }
    
                    this.morphTargets.push( morphTarget );
    
                }
    
                // morph normals
    
                var morphNormals = source.morphNormals;
    
                for ( i = 0, il = morphNormals.length; i < il; i ++ ) {
    
                    var morphNormal = {};
    
                    // vertex normals
    
                    if ( morphNormals[ i ].vertexNormals !== undefined ) {
    
                        morphNormal.vertexNormals = [];
    
                        for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {
    
                            var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
                            var destVertexNormal = {};
    
                            destVertexNormal.a = srcVertexNormal.a.clone();
                            destVertexNormal.b = srcVertexNormal.b.clone();
                            destVertexNormal.c = srcVertexNormal.c.clone();
    
                            morphNormal.vertexNormals.push( destVertexNormal );
    
                        }
    
                    }
    
                    // face normals
    
                    if ( morphNormals[ i ].faceNormals !== undefined ) {
    
                        morphNormal.faceNormals = [];
    
                        for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {
    
                            morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );
    
                        }
    
                    }
    
                    this.morphNormals.push( morphNormal );
    
                }
    
                // skin weights
    
                var skinWeights = source.skinWeights;
    
                for ( i = 0, il = skinWeights.length; i < il; i ++ ) {
    
                    this.skinWeights.push( skinWeights[ i ].clone() );
    
                }
    
                // skin indices
    
                var skinIndices = source.skinIndices;
    
                for ( i = 0, il = skinIndices.length; i < il; i ++ ) {
    
                    this.skinIndices.push( skinIndices[ i ].clone() );
    
                }
    
                // line distances
    
                var lineDistances = source.lineDistances;
    
                for ( i = 0, il = lineDistances.length; i < il; i ++ ) {
    
                    this.lineDistances.push( lineDistances[ i ] );
    
                }
    
                // bounding box
    
                var boundingBox = source.boundingBox;
    
                if ( boundingBox !== null ) {
    
                    this.boundingBox = boundingBox.clone();
    
                }
    
                // bounding sphere
    
                var boundingSphere = source.boundingSphere;
    
                if ( boundingSphere !== null ) {
    
                    this.boundingSphere = boundingSphere.clone();
    
                }
    
                // update flags
    
                this.elementsNeedUpdate = source.elementsNeedUpdate;
                this.verticesNeedUpdate = source.verticesNeedUpdate;
                this.uvsNeedUpdate = source.uvsNeedUpdate;
                this.normalsNeedUpdate = source.normalsNeedUpdate;
                this.colorsNeedUpdate = source.colorsNeedUpdate;
                this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
                this.groupsNeedUpdate = source.groupsNeedUpdate;
    
                return this;
    
            },
    
            dispose: function () {
    
                this.dispatchEvent( { type: 'dispose' } );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function BufferAttribute( array, itemSize, normalized ) {
    
            if ( Array.isArray( array ) ) {
    
                throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
    
            }
    
            this.name = '';
    
            this.array = array;
            this.itemSize = itemSize;
            this.count = array !== undefined ? array.length / itemSize : 0;
            this.normalized = normalized === true;
    
            this.dynamic = false;
            this.updateRange = { offset: 0, count: - 1 };
    
            this.version = 0;
    
        }
    
        Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {
    
            set: function ( value ) {
    
                if ( value === true ) this.version ++;
    
            }
    
        } );
    
        Object.assign( BufferAttribute.prototype, {
    
            isBufferAttribute: true,
    
            onUploadCallback: function () {},
    
            setArray: function ( array ) {
    
                if ( Array.isArray( array ) ) {
    
                    throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
    
                }
    
                this.count = array !== undefined ? array.length / this.itemSize : 0;
                this.array = array;
    
                return this;
    
            },
    
            setDynamic: function ( value ) {
    
                this.dynamic = value;
    
                return this;
    
            },
    
            copy: function ( source ) {
    
                this.name = source.name;
                this.array = new source.array.constructor( source.array );
                this.itemSize = source.itemSize;
                this.count = source.count;
                this.normalized = source.normalized;
    
                this.dynamic = source.dynamic;
    
                return this;
    
            },
    
            copyAt: function ( index1, attribute, index2 ) {
    
                index1 *= this.itemSize;
                index2 *= attribute.itemSize;
    
                for ( var i = 0, l = this.itemSize; i < l; i ++ ) {
    
                    this.array[ index1 + i ] = attribute.array[ index2 + i ];
    
                }
    
                return this;
    
            },
    
            copyArray: function ( array ) {
    
                this.array.set( array );
    
                return this;
    
            },
    
            copyColorsArray: function ( colors ) {
    
                var array = this.array, offset = 0;
    
                for ( var i = 0, l = colors.length; i < l; i ++ ) {
    
                    var color = colors[ i ];
    
                    if ( color === undefined ) {
    
                        console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
                        color = new Color();
    
                    }
    
                    array[ offset ++ ] = color.r;
                    array[ offset ++ ] = color.g;
                    array[ offset ++ ] = color.b;
    
                }
    
                return this;
    
            },
    
            copyVector2sArray: function ( vectors ) {
    
                var array = this.array, offset = 0;
    
                for ( var i = 0, l = vectors.length; i < l; i ++ ) {
    
                    var vector = vectors[ i ];
    
                    if ( vector === undefined ) {
    
                        console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
                        vector = new Vector2();
    
                    }
    
                    array[ offset ++ ] = vector.x;
                    array[ offset ++ ] = vector.y;
    
                }
    
                return this;
    
            },
    
            copyVector3sArray: function ( vectors ) {
    
                var array = this.array, offset = 0;
    
                for ( var i = 0, l = vectors.length; i < l; i ++ ) {
    
                    var vector = vectors[ i ];
    
                    if ( vector === undefined ) {
    
                        console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
                        vector = new Vector3();
    
                    }
    
                    array[ offset ++ ] = vector.x;
                    array[ offset ++ ] = vector.y;
                    array[ offset ++ ] = vector.z;
    
                }
    
                return this;
    
            },
    
            copyVector4sArray: function ( vectors ) {
    
                var array = this.array, offset = 0;
    
                for ( var i = 0, l = vectors.length; i < l; i ++ ) {
    
                    var vector = vectors[ i ];
    
                    if ( vector === undefined ) {
    
                        console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
                        vector = new Vector4();
    
                    }
    
                    array[ offset ++ ] = vector.x;
                    array[ offset ++ ] = vector.y;
                    array[ offset ++ ] = vector.z;
                    array[ offset ++ ] = vector.w;
    
                }
    
                return this;
    
            },
    
            set: function ( value, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                this.array.set( value, offset );
    
                return this;
    
            },
    
            getX: function ( index ) {
    
                return this.array[ index * this.itemSize ];
    
            },
    
            setX: function ( index, x ) {
    
                this.array[ index * this.itemSize ] = x;
    
                return this;
    
            },
    
            getY: function ( index ) {
    
                return this.array[ index * this.itemSize + 1 ];
    
            },
    
            setY: function ( index, y ) {
    
                this.array[ index * this.itemSize + 1 ] = y;
    
                return this;
    
            },
    
            getZ: function ( index ) {
    
                return this.array[ index * this.itemSize + 2 ];
    
            },
    
            setZ: function ( index, z ) {
    
                this.array[ index * this.itemSize + 2 ] = z;
    
                return this;
    
            },
    
            getW: function ( index ) {
    
                return this.array[ index * this.itemSize + 3 ];
    
            },
    
            setW: function ( index, w ) {
    
                this.array[ index * this.itemSize + 3 ] = w;
    
                return this;
    
            },
    
            setXY: function ( index, x, y ) {
    
                index *= this.itemSize;
    
                this.array[ index + 0 ] = x;
                this.array[ index + 1 ] = y;
    
                return this;
    
            },
    
            setXYZ: function ( index, x, y, z ) {
    
                index *= this.itemSize;
    
                this.array[ index + 0 ] = x;
                this.array[ index + 1 ] = y;
                this.array[ index + 2 ] = z;
    
                return this;
    
            },
    
            setXYZW: function ( index, x, y, z, w ) {
    
                index *= this.itemSize;
    
                this.array[ index + 0 ] = x;
                this.array[ index + 1 ] = y;
                this.array[ index + 2 ] = z;
                this.array[ index + 3 ] = w;
    
                return this;
    
            },
    
            onUpload: function ( callback ) {
    
                this.onUploadCallback = callback;
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor( this.array, this.itemSize ).copy( this );
    
            }
    
        } );
    
        //
    
        function Int8BufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );
    
        }
    
        Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
    
    
        function Uint8BufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );
    
        }
    
        Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
    
    
        function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );
    
        }
    
        Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
    
    
        function Int16BufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );
    
        }
    
        Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
    
    
        function Uint16BufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );
    
        }
    
        Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
    
    
        function Int32BufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );
    
        }
    
        Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
    
    
        function Uint32BufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );
    
        }
    
        Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
    
    
        function Float32BufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );
    
        }
    
        Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
    
    
        function Float64BufferAttribute( array, itemSize, normalized ) {
    
            BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );
    
        }
    
        Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
        Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function DirectGeometry() {
    
            this.vertices = [];
            this.normals = [];
            this.colors = [];
            this.uvs = [];
            this.uvs2 = [];
    
            this.groups = [];
    
            this.morphTargets = {};
    
            this.skinWeights = [];
            this.skinIndices = [];
    
            // this.lineDistances = [];
    
            this.boundingBox = null;
            this.boundingSphere = null;
    
            // update flags
    
            this.verticesNeedUpdate = false;
            this.normalsNeedUpdate = false;
            this.colorsNeedUpdate = false;
            this.uvsNeedUpdate = false;
            this.groupsNeedUpdate = false;
    
        }
    
        Object.assign( DirectGeometry.prototype, {
    
            computeGroups: function ( geometry ) {
    
                var group;
                var groups = [];
                var materialIndex = undefined;
    
                var faces = geometry.faces;
    
                for ( var i = 0; i < faces.length; i ++ ) {
    
                    var face = faces[ i ];
    
                    // materials
    
                    if ( face.materialIndex !== materialIndex ) {
    
                        materialIndex = face.materialIndex;
    
                        if ( group !== undefined ) {
    
                            group.count = ( i * 3 ) - group.start;
                            groups.push( group );
    
                        }
    
                        group = {
                            start: i * 3,
                            materialIndex: materialIndex
                        };
    
                    }
    
                }
    
                if ( group !== undefined ) {
    
                    group.count = ( i * 3 ) - group.start;
                    groups.push( group );
    
                }
    
                this.groups = groups;
    
            },
    
            fromGeometry: function ( geometry ) {
    
                var faces = geometry.faces;
                var vertices = geometry.vertices;
                var faceVertexUvs = geometry.faceVertexUvs;
    
                var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
                var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;
    
                // morphs
    
                var morphTargets = geometry.morphTargets;
                var morphTargetsLength = morphTargets.length;
    
                var morphTargetsPosition;
    
                if ( morphTargetsLength > 0 ) {
    
                    morphTargetsPosition = [];
    
                    for ( var i = 0; i < morphTargetsLength; i ++ ) {
    
                        morphTargetsPosition[ i ] = {
                            name: morphTargets[ i ].name,
                             data: []
                        };
    
                    }
    
                    this.morphTargets.position = morphTargetsPosition;
    
                }
    
                var morphNormals = geometry.morphNormals;
                var morphNormalsLength = morphNormals.length;
    
                var morphTargetsNormal;
    
                if ( morphNormalsLength > 0 ) {
    
                    morphTargetsNormal = [];
    
                    for ( var i = 0; i < morphNormalsLength; i ++ ) {
    
                        morphTargetsNormal[ i ] = {
                            name: morphNormals[ i ].name,
                             data: []
                        };
    
                    }
    
                    this.morphTargets.normal = morphTargetsNormal;
    
                }
    
                // skins
    
                var skinIndices = geometry.skinIndices;
                var skinWeights = geometry.skinWeights;
    
                var hasSkinIndices = skinIndices.length === vertices.length;
                var hasSkinWeights = skinWeights.length === vertices.length;
    
                //
    
                if ( vertices.length > 0 && faces.length === 0 ) {
    
                    console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );
    
                }
    
                for ( var i = 0; i < faces.length; i ++ ) {
    
                    var face = faces[ i ];
    
                    this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );
    
                    var vertexNormals = face.vertexNormals;
    
                    if ( vertexNormals.length === 3 ) {
    
                        this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );
    
                    } else {
    
                        var normal = face.normal;
    
                        this.normals.push( normal, normal, normal );
    
                    }
    
                    var vertexColors = face.vertexColors;
    
                    if ( vertexColors.length === 3 ) {
    
                        this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );
    
                    } else {
    
                        var color = face.color;
    
                        this.colors.push( color, color, color );
    
                    }
    
                    if ( hasFaceVertexUv === true ) {
    
                        var vertexUvs = faceVertexUvs[ 0 ][ i ];
    
                        if ( vertexUvs !== undefined ) {
    
                            this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
    
                        } else {
    
                            console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );
    
                            this.uvs.push( new Vector2(), new Vector2(), new Vector2() );
    
                        }
    
                    }
    
                    if ( hasFaceVertexUv2 === true ) {
    
                        var vertexUvs = faceVertexUvs[ 1 ][ i ];
    
                        if ( vertexUvs !== undefined ) {
    
                            this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
    
                        } else {
    
                            console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );
    
                            this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );
    
                        }
    
                    }
    
                    // morphs
    
                    for ( var j = 0; j < morphTargetsLength; j ++ ) {
    
                        var morphTarget = morphTargets[ j ].vertices;
    
                        morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );
    
                    }
    
                    for ( var j = 0; j < morphNormalsLength; j ++ ) {
    
                        var morphNormal = morphNormals[ j ].vertexNormals[ i ];
    
                        morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );
    
                    }
    
                    // skins
    
                    if ( hasSkinIndices ) {
    
                        this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );
    
                    }
    
                    if ( hasSkinWeights ) {
    
                        this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );
    
                    }
    
                }
    
                this.computeGroups( geometry );
    
                this.verticesNeedUpdate = geometry.verticesNeedUpdate;
                this.normalsNeedUpdate = geometry.normalsNeedUpdate;
                this.colorsNeedUpdate = geometry.colorsNeedUpdate;
                this.uvsNeedUpdate = geometry.uvsNeedUpdate;
                this.groupsNeedUpdate = geometry.groupsNeedUpdate;
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function arrayMax( array ) {
    
            if ( array.length === 0 ) return - Infinity;
    
            var max = array[ 0 ];
    
            for ( var i = 1, l = array.length; i < l; ++ i ) {
    
                if ( array[ i ] > max ) max = array[ i ];
    
            }
    
            return max;
    
        }
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */
    
        var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id
    
        function BufferGeometry() {
    
            Object.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );
    
            this.uuid = _Math.generateUUID();
    
            this.name = '';
            this.type = 'BufferGeometry';
    
            this.index = null;
            this.attributes = {};
    
            this.morphAttributes = {};
    
            this.groups = [];
    
            this.boundingBox = null;
            this.boundingSphere = null;
    
            this.drawRange = { start: 0, count: Infinity };
    
            this.userData = {};
    
        }
    
        BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
    
            constructor: BufferGeometry,
    
            isBufferGeometry: true,
    
            getIndex: function () {
    
                return this.index;
    
            },
    
            setIndex: function ( index ) {
    
                if ( Array.isArray( index ) ) {
    
                    this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );
    
                } else {
    
                    this.index = index;
    
                }
    
            },
    
            addAttribute: function ( name, attribute ) {
    
                if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {
    
                    console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );
    
                    return this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );
    
                }
    
                if ( name === 'index' ) {
    
                    console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
                    this.setIndex( attribute );
    
                    return this;
    
                }
    
                this.attributes[ name ] = attribute;
    
                return this;
    
            },
    
            getAttribute: function ( name ) {
    
                return this.attributes[ name ];
    
            },
    
            removeAttribute: function ( name ) {
    
                delete this.attributes[ name ];
    
                return this;
    
            },
    
            addGroup: function ( start, count, materialIndex ) {
    
                this.groups.push( {
    
                    start: start,
                    count: count,
                    materialIndex: materialIndex !== undefined ? materialIndex : 0
    
                } );
    
            },
    
            clearGroups: function () {
    
                this.groups = [];
    
            },
    
            setDrawRange: function ( start, count ) {
    
                this.drawRange.start = start;
                this.drawRange.count = count;
    
            },
    
            applyMatrix: function ( matrix ) {
    
                var position = this.attributes.position;
    
                if ( position !== undefined ) {
    
                    matrix.applyToBufferAttribute( position );
                    position.needsUpdate = true;
    
                }
    
                var normal = this.attributes.normal;
    
                if ( normal !== undefined ) {
    
                    var normalMatrix = new Matrix3().getNormalMatrix( matrix );
    
                    normalMatrix.applyToBufferAttribute( normal );
                    normal.needsUpdate = true;
    
                }
    
                var tangent = this.attributes.tangent;
    
                if ( tangent !== undefined ) {
    
                    var normalMatrix = new Matrix3().getNormalMatrix( matrix );
    
                    // Tangent is vec4, but the '.w' component is a sign value (+1/-1).
                    normalMatrix.applyToBufferAttribute( tangent );
                    tangent.needsUpdate = true;
    
                }
    
                if ( this.boundingBox !== null ) {
    
                    this.computeBoundingBox();
    
                }
    
                if ( this.boundingSphere !== null ) {
    
                    this.computeBoundingSphere();
    
                }
    
                return this;
    
            },
    
            rotateX: function () {
    
                // rotate geometry around world x-axis
    
                var m1 = new Matrix4();
    
                return function rotateX( angle ) {
    
                    m1.makeRotationX( angle );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            rotateY: function () {
    
                // rotate geometry around world y-axis
    
                var m1 = new Matrix4();
    
                return function rotateY( angle ) {
    
                    m1.makeRotationY( angle );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            rotateZ: function () {
    
                // rotate geometry around world z-axis
    
                var m1 = new Matrix4();
    
                return function rotateZ( angle ) {
    
                    m1.makeRotationZ( angle );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            translate: function () {
    
                // translate geometry
    
                var m1 = new Matrix4();
    
                return function translate( x, y, z ) {
    
                    m1.makeTranslation( x, y, z );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            scale: function () {
    
                // scale geometry
    
                var m1 = new Matrix4();
    
                return function scale( x, y, z ) {
    
                    m1.makeScale( x, y, z );
    
                    this.applyMatrix( m1 );
    
                    return this;
    
                };
    
            }(),
    
            lookAt: function () {
    
                var obj = new Object3D();
    
                return function lookAt( vector ) {
    
                    obj.lookAt( vector );
    
                    obj.updateMatrix();
    
                    this.applyMatrix( obj.matrix );
    
                };
    
            }(),
    
            center: function () {
    
                var offset = new Vector3();
    
                return function center() {
    
                    this.computeBoundingBox();
    
                    this.boundingBox.getCenter( offset ).negate();
    
                    this.translate( offset.x, offset.y, offset.z );
    
                    return this;
    
                };
    
            }(),
    
            setFromObject: function ( object ) {
    
                // console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
    
                var geometry = object.geometry;
    
                if ( object.isPoints || object.isLine ) {
    
                    var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
                    var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );
    
                    this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
                    this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );
    
                    if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {
    
                        var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );
    
                        this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );
    
                    }
    
                    if ( geometry.boundingSphere !== null ) {
    
                        this.boundingSphere = geometry.boundingSphere.clone();
    
                    }
    
                    if ( geometry.boundingBox !== null ) {
    
                        this.boundingBox = geometry.boundingBox.clone();
    
                    }
    
                } else if ( object.isMesh ) {
    
                    if ( geometry && geometry.isGeometry ) {
    
                        this.fromGeometry( geometry );
    
                    }
    
                }
    
                return this;
    
            },
    
            setFromPoints: function ( points ) {
    
                var position = [];
    
                for ( var i = 0, l = points.length; i < l; i ++ ) {
    
                    var point = points[ i ];
                    position.push( point.x, point.y, point.z || 0 );
    
                }
    
                this.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );
    
                return this;
    
            },
    
            updateFromObject: function ( object ) {
    
                var geometry = object.geometry;
    
                if ( object.isMesh ) {
    
                    var direct = geometry.__directGeometry;
    
                    if ( geometry.elementsNeedUpdate === true ) {
    
                        direct = undefined;
                        geometry.elementsNeedUpdate = false;
    
                    }
    
                    if ( direct === undefined ) {
    
                        return this.fromGeometry( geometry );
    
                    }
    
                    direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
                    direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
                    direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
                    direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
                    direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
    
                    geometry.verticesNeedUpdate = false;
                    geometry.normalsNeedUpdate = false;
                    geometry.colorsNeedUpdate = false;
                    geometry.uvsNeedUpdate = false;
                    geometry.groupsNeedUpdate = false;
    
                    geometry = direct;
    
                }
    
                var attribute;
    
                if ( geometry.verticesNeedUpdate === true ) {
    
                    attribute = this.attributes.position;
    
                    if ( attribute !== undefined ) {
    
                        attribute.copyVector3sArray( geometry.vertices );
                        attribute.needsUpdate = true;
    
                    }
    
                    geometry.verticesNeedUpdate = false;
    
                }
    
                if ( geometry.normalsNeedUpdate === true ) {
    
                    attribute = this.attributes.normal;
    
                    if ( attribute !== undefined ) {
    
                        attribute.copyVector3sArray( geometry.normals );
                        attribute.needsUpdate = true;
    
                    }
    
                    geometry.normalsNeedUpdate = false;
    
                }
    
                if ( geometry.colorsNeedUpdate === true ) {
    
                    attribute = this.attributes.color;
    
                    if ( attribute !== undefined ) {
    
                        attribute.copyColorsArray( geometry.colors );
                        attribute.needsUpdate = true;
    
                    }
    
                    geometry.colorsNeedUpdate = false;
    
                }
    
                if ( geometry.uvsNeedUpdate ) {
    
                    attribute = this.attributes.uv;
    
                    if ( attribute !== undefined ) {
    
                        attribute.copyVector2sArray( geometry.uvs );
                        attribute.needsUpdate = true;
    
                    }
    
                    geometry.uvsNeedUpdate = false;
    
                }
    
                if ( geometry.lineDistancesNeedUpdate ) {
    
                    attribute = this.attributes.lineDistance;
    
                    if ( attribute !== undefined ) {
    
                        attribute.copyArray( geometry.lineDistances );
                        attribute.needsUpdate = true;
    
                    }
    
                    geometry.lineDistancesNeedUpdate = false;
    
                }
    
                if ( geometry.groupsNeedUpdate ) {
    
                    geometry.computeGroups( object.geometry );
                    this.groups = geometry.groups;
    
                    geometry.groupsNeedUpdate = false;
    
                }
    
                return this;
    
            },
    
            fromGeometry: function ( geometry ) {
    
                geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );
    
                return this.fromDirectGeometry( geometry.__directGeometry );
    
            },
    
            fromDirectGeometry: function ( geometry ) {
    
                var positions = new Float32Array( geometry.vertices.length * 3 );
                this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );
    
                if ( geometry.normals.length > 0 ) {
    
                    var normals = new Float32Array( geometry.normals.length * 3 );
                    this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );
    
                }
    
                if ( geometry.colors.length > 0 ) {
    
                    var colors = new Float32Array( geometry.colors.length * 3 );
                    this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );
    
                }
    
                if ( geometry.uvs.length > 0 ) {
    
                    var uvs = new Float32Array( geometry.uvs.length * 2 );
                    this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );
    
                }
    
                if ( geometry.uvs2.length > 0 ) {
    
                    var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
                    this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );
    
                }
    
                // groups
    
                this.groups = geometry.groups;
    
                // morphs
    
                for ( var name in geometry.morphTargets ) {
    
                    var array = [];
                    var morphTargets = geometry.morphTargets[ name ];
    
                    for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {
    
                        var morphTarget = morphTargets[ i ];
    
                        var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
                        attribute.name = morphTarget.name;
    
                        array.push( attribute.copyVector3sArray( morphTarget.data ) );
    
                    }
    
                    this.morphAttributes[ name ] = array;
    
                }
    
                // skinning
    
                if ( geometry.skinIndices.length > 0 ) {
    
                    var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
                    this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );
    
                }
    
                if ( geometry.skinWeights.length > 0 ) {
    
                    var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
                    this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );
    
                }
    
                //
    
                if ( geometry.boundingSphere !== null ) {
    
                    this.boundingSphere = geometry.boundingSphere.clone();
    
                }
    
                if ( geometry.boundingBox !== null ) {
    
                    this.boundingBox = geometry.boundingBox.clone();
    
                }
    
                return this;
    
            },
    
            computeBoundingBox: function () {
    
                var box = new Box3();
    
                return function computeBoundingBox() {
    
                    if ( this.boundingBox === null ) {
    
                        this.boundingBox = new Box3();
    
                    }
    
                    var position = this.attributes.position;
                    var morphAttributesPosition = this.morphAttributes.position;
    
                    if ( position !== undefined ) {
    
                        this.boundingBox.setFromBufferAttribute( position );
    
                        // process morph attributes if present
    
                        if ( morphAttributesPosition ) {
    
                            for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
    
                                var morphAttribute = morphAttributesPosition[ i ];
                                box.setFromBufferAttribute( morphAttribute );
    
                                this.boundingBox.expandByPoint( box.min );
                                this.boundingBox.expandByPoint( box.max );
    
                            }
    
                        }
    
                    } else {
    
                        this.boundingBox.makeEmpty();
    
                    }
    
                    if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
    
                        console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
    
                    }
    
                };
    
            }(),
    
            computeBoundingSphere: function () {
    
                var box = new Box3();
                var boxMorphTargets = new Box3();
                var vector = new Vector3();
    
                return function computeBoundingSphere() {
    
                    if ( this.boundingSphere === null ) {
    
                        this.boundingSphere = new Sphere();
    
                    }
    
                    var position = this.attributes.position;
                    var morphAttributesPosition = this.morphAttributes.position;
    
                    if ( position ) {
    
                        // first, find the center of the bounding sphere
    
                        var center = this.boundingSphere.center;
    
                        box.setFromBufferAttribute( position );
    
                        // process morph attributes if present
    
                        if ( morphAttributesPosition ) {
    
                            for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
    
                                var morphAttribute = morphAttributesPosition[ i ];
                                boxMorphTargets.setFromBufferAttribute( morphAttribute );
    
                                box.expandByPoint( boxMorphTargets.min );
                                box.expandByPoint( boxMorphTargets.max );
    
                            }
    
                        }
    
                        box.getCenter( center );
    
                        // second, try to find a boundingSphere with a radius smaller than the
                        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case
    
                        var maxRadiusSq = 0;
    
                        for ( var i = 0, il = position.count; i < il; i ++ ) {
    
                            vector.fromBufferAttribute( position, i );
    
                            maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );
    
                        }
    
                        // process morph attributes if present
    
                        if ( morphAttributesPosition ) {
    
                            for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
    
                                var morphAttribute = morphAttributesPosition[ i ];
    
                                for ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {
    
                                    vector.fromBufferAttribute( morphAttribute, i );
    
                                    maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );
    
                                }
    
                            }
    
                        }
    
                        this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
    
                        if ( isNaN( this.boundingSphere.radius ) ) {
    
                            console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
    
                        }
    
                    }
    
                };
    
            }(),
    
            computeFaceNormals: function () {
    
                // backwards compatibility
    
            },
    
            computeVertexNormals: function () {
    
                var index = this.index;
                var attributes = this.attributes;
    
                if ( attributes.position ) {
    
                    var positions = attributes.position.array;
    
                    if ( attributes.normal === undefined ) {
    
                        this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );
    
                    } else {
    
                        // reset existing normals to zero
    
                        var array = attributes.normal.array;
    
                        for ( var i = 0, il = array.length; i < il; i ++ ) {
    
                            array[ i ] = 0;
    
                        }
    
                    }
    
                    var normals = attributes.normal.array;
    
                    var vA, vB, vC;
                    var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
                    var cb = new Vector3(), ab = new Vector3();
    
                    // indexed elements
    
                    if ( index ) {
    
                        var indices = index.array;
    
                        for ( var i = 0, il = index.count; i < il; i += 3 ) {
    
                            vA = indices[ i + 0 ] * 3;
                            vB = indices[ i + 1 ] * 3;
                            vC = indices[ i + 2 ] * 3;
    
                            pA.fromArray( positions, vA );
                            pB.fromArray( positions, vB );
                            pC.fromArray( positions, vC );
    
                            cb.subVectors( pC, pB );
                            ab.subVectors( pA, pB );
                            cb.cross( ab );
    
                            normals[ vA ] += cb.x;
                            normals[ vA + 1 ] += cb.y;
                            normals[ vA + 2 ] += cb.z;
    
                            normals[ vB ] += cb.x;
                            normals[ vB + 1 ] += cb.y;
                            normals[ vB + 2 ] += cb.z;
    
                            normals[ vC ] += cb.x;
                            normals[ vC + 1 ] += cb.y;
                            normals[ vC + 2 ] += cb.z;
    
                        }
    
                    } else {
    
                        // non-indexed elements (unconnected triangle soup)
    
                        for ( var i = 0, il = positions.length; i < il; i += 9 ) {
    
                            pA.fromArray( positions, i );
                            pB.fromArray( positions, i + 3 );
                            pC.fromArray( positions, i + 6 );
    
                            cb.subVectors( pC, pB );
                            ab.subVectors( pA, pB );
                            cb.cross( ab );
    
                            normals[ i ] = cb.x;
                            normals[ i + 1 ] = cb.y;
                            normals[ i + 2 ] = cb.z;
    
                            normals[ i + 3 ] = cb.x;
                            normals[ i + 4 ] = cb.y;
                            normals[ i + 5 ] = cb.z;
    
                            normals[ i + 6 ] = cb.x;
                            normals[ i + 7 ] = cb.y;
                            normals[ i + 8 ] = cb.z;
    
                        }
    
                    }
    
                    this.normalizeNormals();
    
                    attributes.normal.needsUpdate = true;
    
                }
    
            },
    
            merge: function ( geometry, offset ) {
    
                if ( ! ( geometry && geometry.isBufferGeometry ) ) {
    
                    console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
                    return;
    
                }
    
                if ( offset === undefined ) {
    
                    offset = 0;
    
                    console.warn(
                        'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
                        + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
                    );
    
                }
    
                var attributes = this.attributes;
    
                for ( var key in attributes ) {
    
                    if ( geometry.attributes[ key ] === undefined ) continue;
    
                    var attribute1 = attributes[ key ];
                    var attributeArray1 = attribute1.array;
    
                    var attribute2 = geometry.attributes[ key ];
                    var attributeArray2 = attribute2.array;
    
                    var attributeSize = attribute2.itemSize;
    
                    for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {
    
                        attributeArray1[ j ] = attributeArray2[ i ];
    
                    }
    
                }
    
                return this;
    
            },
    
            normalizeNormals: function () {
    
                var vector = new Vector3();
    
                return function normalizeNormals() {
    
                    var normals = this.attributes.normal;
    
                    for ( var i = 0, il = normals.count; i < il; i ++ ) {
    
                        vector.x = normals.getX( i );
                        vector.y = normals.getY( i );
                        vector.z = normals.getZ( i );
    
                        vector.normalize();
    
                        normals.setXYZ( i, vector.x, vector.y, vector.z );
    
                    }
    
                };
    
            }(),
    
            toNonIndexed: function () {
    
                function convertBufferAttribute( attribute, indices ) {
    
                    var array = attribute.array;
                    var itemSize = attribute.itemSize;
    
                    var array2 = new array.constructor( indices.length * itemSize );
    
                    var index = 0, index2 = 0;
    
                    for ( var i = 0, l = indices.length; i < l; i ++ ) {
    
                        index = indices[ i ] * itemSize;
    
                        for ( var j = 0; j < itemSize; j ++ ) {
    
                            array2[ index2 ++ ] = array[ index ++ ];
    
                        }
    
                    }
    
                    return new BufferAttribute( array2, itemSize );
    
                }
    
                //
    
                if ( this.index === null ) {
    
                    console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
                    return this;
    
                }
    
                var geometry2 = new BufferGeometry();
    
                var indices = this.index.array;
                var attributes = this.attributes;
    
                // attributes
    
                for ( var name in attributes ) {
    
                    var attribute = attributes[ name ];
    
                    var newAttribute = convertBufferAttribute( attribute, indices );
    
                    geometry2.addAttribute( name, newAttribute );
    
                }
    
                // morph attributes
    
                var morphAttributes = this.morphAttributes;
    
                for ( name in morphAttributes ) {
    
                    var morphArray = [];
                    var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
    
                    for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {
    
                        var attribute = morphAttribute[ i ];
    
                        var newAttribute = convertBufferAttribute( attribute, indices );
    
                        morphArray.push( newAttribute );
    
                    }
    
                    geometry2.morphAttributes[ name ] = morphArray;
    
                }
    
                // groups
    
                var groups = this.groups;
    
                for ( var i = 0, l = groups.length; i < l; i ++ ) {
    
                    var group = groups[ i ];
                    geometry2.addGroup( group.start, group.count, group.materialIndex );
    
                }
    
                return geometry2;
    
            },
    
            toJSON: function () {
    
                var data = {
                    metadata: {
                        version: 4.5,
                        type: 'BufferGeometry',
                        generator: 'BufferGeometry.toJSON'
                    }
                };
    
                // standard BufferGeometry serialization
    
                data.uuid = this.uuid;
                data.type = this.type;
                if ( this.name !== '' ) data.name = this.name;
                if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;
    
                if ( this.parameters !== undefined ) {
    
                    var parameters = this.parameters;
    
                    for ( var key in parameters ) {
    
                        if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
    
                    }
    
                    return data;
    
                }
    
                data.data = { attributes: {} };
    
                var index = this.index;
    
                if ( index !== null ) {
    
                    data.data.index = {
                        type: index.array.constructor.name,
                        array: Array.prototype.slice.call( index.array )
                    };
    
                }
    
                var attributes = this.attributes;
    
                for ( var key in attributes ) {
    
                    var attribute = attributes[ key ];
    
                    var attributeData = {
                        itemSize: attribute.itemSize,
                        type: attribute.array.constructor.name,
                        array: Array.prototype.slice.call( attribute.array ),
                        normalized: attribute.normalized
                    };
    
                    if ( attribute.name !== '' ) attributeData.name = attribute.name;
    
                    data.data.attributes[ key ] = attributeData;
    
                }
    
                var morphAttributes = {};
                var hasMorphAttributes = false;
    
                for ( var key in this.morphAttributes ) {
    
                    var attributeArray = this.morphAttributes[ key ];
    
                    var array = [];
    
                    for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {
    
                        var attribute = attributeArray[ i ];
    
                        var attributeData = {
                            itemSize: attribute.itemSize,
                            type: attribute.array.constructor.name,
                            array: Array.prototype.slice.call( attribute.array ),
                            normalized: attribute.normalized
                        };
    
                        if ( attribute.name !== '' ) attributeData.name = attribute.name;
    
                        array.push( attributeData );
    
                    }
    
                    if ( array.length > 0 ) {
    
                        morphAttributes[ key ] = array;
    
                        hasMorphAttributes = true;
    
                    }
    
                }
    
                if ( hasMorphAttributes ) data.data.morphAttributes = morphAttributes;
    
                var groups = this.groups;
    
                if ( groups.length > 0 ) {
    
                    data.data.groups = JSON.parse( JSON.stringify( groups ) );
    
                }
    
                var boundingSphere = this.boundingSphere;
    
                if ( boundingSphere !== null ) {
    
                    data.data.boundingSphere = {
                        center: boundingSphere.center.toArray(),
                        radius: boundingSphere.radius
                    };
    
                }
    
                return data;
    
            },
    
            clone: function () {
    
                /*
                 // Handle primitives
    
                 var parameters = this.parameters;
    
                 if ( parameters !== undefined ) {
    
                 var values = [];
    
                 for ( var key in parameters ) {
    
                 values.push( parameters[ key ] );
    
                 }
    
                 var geometry = Object.create( this.constructor.prototype );
                 this.constructor.apply( geometry, values );
                 return geometry;
    
                 }
    
                 return new this.constructor().copy( this );
                 */
    
                return new BufferGeometry().copy( this );
    
            },
    
            copy: function ( source ) {
    
                var name, i, l;
    
                // reset
    
                this.index = null;
                this.attributes = {};
                this.morphAttributes = {};
                this.groups = [];
                this.boundingBox = null;
                this.boundingSphere = null;
    
                // name
    
                this.name = source.name;
    
                // index
    
                var index = source.index;
    
                if ( index !== null ) {
    
                    this.setIndex( index.clone() );
    
                }
    
                // attributes
    
                var attributes = source.attributes;
    
                for ( name in attributes ) {
    
                    var attribute = attributes[ name ];
                    this.addAttribute( name, attribute.clone() );
    
                }
    
                // morph attributes
    
                var morphAttributes = source.morphAttributes;
    
                for ( name in morphAttributes ) {
    
                    var array = [];
                    var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
    
                    for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {
    
                        array.push( morphAttribute[ i ].clone() );
    
                    }
    
                    this.morphAttributes[ name ] = array;
    
                }
    
                // groups
    
                var groups = source.groups;
    
                for ( i = 0, l = groups.length; i < l; i ++ ) {
    
                    var group = groups[ i ];
                    this.addGroup( group.start, group.count, group.materialIndex );
    
                }
    
                // bounding box
    
                var boundingBox = source.boundingBox;
    
                if ( boundingBox !== null ) {
    
                    this.boundingBox = boundingBox.clone();
    
                }
    
                // bounding sphere
    
                var boundingSphere = source.boundingSphere;
    
                if ( boundingSphere !== null ) {
    
                    this.boundingSphere = boundingSphere.clone();
    
                }
    
                // draw range
    
                this.drawRange.start = source.drawRange.start;
                this.drawRange.count = source.drawRange.count;
    
                // user data
    
                this.userData = source.userData;
    
                return this;
    
            },
    
            dispose: function () {
    
                this.dispatchEvent( { type: 'dispose' } );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // BoxGeometry
    
        function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
    
            Geometry.call( this );
    
            this.type = 'BoxGeometry';
    
            this.parameters = {
                width: width,
                height: height,
                depth: depth,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                depthSegments: depthSegments
            };
    
            this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
            this.mergeVertices();
    
        }
    
        BoxGeometry.prototype = Object.create( Geometry.prototype );
        BoxGeometry.prototype.constructor = BoxGeometry;
    
        // BoxBufferGeometry
    
        function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
    
            BufferGeometry.call( this );
    
            this.type = 'BoxBufferGeometry';
    
            this.parameters = {
                width: width,
                height: height,
                depth: depth,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                depthSegments: depthSegments
            };
    
            var scope = this;
    
            width = width || 1;
            height = height || 1;
            depth = depth || 1;
    
            // segments
    
            widthSegments = Math.floor( widthSegments ) || 1;
            heightSegments = Math.floor( heightSegments ) || 1;
            depthSegments = Math.floor( depthSegments ) || 1;
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // helper variables
    
            var numberOfVertices = 0;
            var groupStart = 0;
    
            // build each side of the box geometry
    
            buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
            buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
            buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
            buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
            buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
            buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
            function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {
    
                var segmentWidth = width / gridX;
                var segmentHeight = height / gridY;
    
                var widthHalf = width / 2;
                var heightHalf = height / 2;
                var depthHalf = depth / 2;
    
                var gridX1 = gridX + 1;
                var gridY1 = gridY + 1;
    
                var vertexCounter = 0;
                var groupCount = 0;
    
                var ix, iy;
    
                var vector = new Vector3();
    
                // generate vertices, normals and uvs
    
                for ( iy = 0; iy < gridY1; iy ++ ) {
    
                    var y = iy * segmentHeight - heightHalf;
    
                    for ( ix = 0; ix < gridX1; ix ++ ) {
    
                        var x = ix * segmentWidth - widthHalf;
    
                        // set values to correct vector component
    
                        vector[ u ] = x * udir;
                        vector[ v ] = y * vdir;
                        vector[ w ] = depthHalf;
    
                        // now apply vector to vertex buffer
    
                        vertices.push( vector.x, vector.y, vector.z );
    
                        // set values to correct vector component
    
                        vector[ u ] = 0;
                        vector[ v ] = 0;
                        vector[ w ] = depth > 0 ? 1 : - 1;
    
                        // now apply vector to normal buffer
    
                        normals.push( vector.x, vector.y, vector.z );
    
                        // uvs
    
                        uvs.push( ix / gridX );
                        uvs.push( 1 - ( iy / gridY ) );
    
                        // counters
    
                        vertexCounter += 1;
    
                    }
    
                }
    
                // indices
    
                // 1. you need three indices to draw a single face
                // 2. a single segment consists of two faces
                // 3. so we need to generate six (2*3) indices per segment
    
                for ( iy = 0; iy < gridY; iy ++ ) {
    
                    for ( ix = 0; ix < gridX; ix ++ ) {
    
                        var a = numberOfVertices + ix + gridX1 * iy;
                        var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
                        var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
                        var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;
    
                        // faces
    
                        indices.push( a, b, d );
                        indices.push( b, c, d );
    
                        // increase counter
    
                        groupCount += 6;
    
                    }
    
                }
    
                // add a group to the geometry. this will ensure multi material support
    
                scope.addGroup( groupStart, groupCount, materialIndex );
    
                // calculate new start value for groups
    
                groupStart += groupCount;
    
                // update total number of vertices
    
                numberOfVertices += vertexCounter;
    
            }
    
        }
    
        BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // PlaneGeometry
    
        function PlaneGeometry( width, height, widthSegments, heightSegments ) {
    
            Geometry.call( this );
    
            this.type = 'PlaneGeometry';
    
            this.parameters = {
                width: width,
                height: height,
                widthSegments: widthSegments,
                heightSegments: heightSegments
            };
    
            this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
            this.mergeVertices();
    
        }
    
        PlaneGeometry.prototype = Object.create( Geometry.prototype );
        PlaneGeometry.prototype.constructor = PlaneGeometry;
    
        // PlaneBufferGeometry
    
        function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {
    
            BufferGeometry.call( this );
    
            this.type = 'PlaneBufferGeometry';
    
            this.parameters = {
                width: width,
                height: height,
                widthSegments: widthSegments,
                heightSegments: heightSegments
            };
    
            width = width || 1;
            height = height || 1;
    
            var width_half = width / 2;
            var height_half = height / 2;
    
            var gridX = Math.floor( widthSegments ) || 1;
            var gridY = Math.floor( heightSegments ) || 1;
    
            var gridX1 = gridX + 1;
            var gridY1 = gridY + 1;
    
            var segment_width = width / gridX;
            var segment_height = height / gridY;
    
            var ix, iy;
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // generate vertices, normals and uvs
    
            for ( iy = 0; iy < gridY1; iy ++ ) {
    
                var y = iy * segment_height - height_half;
    
                for ( ix = 0; ix < gridX1; ix ++ ) {
    
                    var x = ix * segment_width - width_half;
    
                    vertices.push( x, - y, 0 );
    
                    normals.push( 0, 0, 1 );
    
                    uvs.push( ix / gridX );
                    uvs.push( 1 - ( iy / gridY ) );
    
                }
    
            }
    
            // indices
    
            for ( iy = 0; iy < gridY; iy ++ ) {
    
                for ( ix = 0; ix < gridX; ix ++ ) {
    
                    var a = ix + gridX1 * iy;
                    var b = ix + gridX1 * ( iy + 1 );
                    var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
                    var d = ( ix + 1 ) + gridX1 * iy;
    
                    // faces
    
                    indices.push( a, b, d );
                    indices.push( b, c, d );
    
                }
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
        }
    
        PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */
    
        var materialId = 0;
    
        function Material() {
    
            Object.defineProperty( this, 'id', { value: materialId ++ } );
    
            this.uuid = _Math.generateUUID();
    
            this.name = '';
            this.type = 'Material';
    
            this.fog = true;
            this.lights = true;
    
            this.blending = NormalBlending;
            this.side = FrontSide;
            this.flatShading = false;
            this.vertexTangents = false;
            this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors
    
            this.opacity = 1;
            this.transparent = false;
    
            this.blendSrc = SrcAlphaFactor;
            this.blendDst = OneMinusSrcAlphaFactor;
            this.blendEquation = AddEquation;
            this.blendSrcAlpha = null;
            this.blendDstAlpha = null;
            this.blendEquationAlpha = null;
    
            this.depthFunc = LessEqualDepth;
            this.depthTest = true;
            this.depthWrite = true;
    
            this.clippingPlanes = null;
            this.clipIntersection = false;
            this.clipShadows = false;
    
            this.shadowSide = null;
    
            this.colorWrite = true;
    
            this.precision = null; // override the renderer's default precision for this material
    
            this.polygonOffset = false;
            this.polygonOffsetFactor = 0;
            this.polygonOffsetUnits = 0;
    
            this.dithering = false;
    
            this.alphaTest = 0;
            this.premultipliedAlpha = false;
    
            this.visible = true;
    
            this.userData = {};
    
            this.needsUpdate = true;
    
        }
    
        Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
    
            constructor: Material,
    
            isMaterial: true,
    
            onBeforeCompile: function () {},
    
            setValues: function ( values ) {
    
                if ( values === undefined ) return;
    
                for ( var key in values ) {
    
                    var newValue = values[ key ];
    
                    if ( newValue === undefined ) {
    
                        console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
                        continue;
    
                    }
    
                    // for backward compatability if shading is set in the constructor
                    if ( key === 'shading' ) {
    
                        console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
                        this.flatShading = ( newValue === FlatShading ) ? true : false;
                        continue;
    
                    }
    
                    var currentValue = this[ key ];
    
                    if ( currentValue === undefined ) {
    
                        console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
                        continue;
    
                    }
    
                    if ( currentValue && currentValue.isColor ) {
    
                        currentValue.set( newValue );
    
                    } else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {
    
                        currentValue.copy( newValue );
    
                    } else {
    
                        this[ key ] = newValue;
    
                    }
    
                }
    
            },
    
            toJSON: function ( meta ) {
    
                var isRoot = ( meta === undefined || typeof meta === 'string' );
    
                if ( isRoot ) {
    
                    meta = {
                        textures: {},
                        images: {}
                    };
    
                }
    
                var data = {
                    metadata: {
                        version: 4.5,
                        type: 'Material',
                        generator: 'Material.toJSON'
                    }
                };
    
                // standard Material serialization
                data.uuid = this.uuid;
                data.type = this.type;
    
                if ( this.name !== '' ) data.name = this.name;
    
                if ( this.color && this.color.isColor ) data.color = this.color.getHex();
    
                if ( this.roughness !== undefined ) data.roughness = this.roughness;
                if ( this.metalness !== undefined ) data.metalness = this.metalness;
    
                if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
                if ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;
    
                if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
                if ( this.shininess !== undefined ) data.shininess = this.shininess;
                if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
                if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;
    
                if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
                if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
                if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
    
                if ( this.aoMap && this.aoMap.isTexture ) {
    
                    data.aoMap = this.aoMap.toJSON( meta ).uuid;
                    data.aoMapIntensity = this.aoMapIntensity;
    
                }
    
                if ( this.bumpMap && this.bumpMap.isTexture ) {
    
                    data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
                    data.bumpScale = this.bumpScale;
    
                }
    
                if ( this.normalMap && this.normalMap.isTexture ) {
    
                    data.normalMap = this.normalMap.toJSON( meta ).uuid;
                    data.normalMapType = this.normalMapType;
                    data.normalScale = this.normalScale.toArray();
    
                }
    
                if ( this.displacementMap && this.displacementMap.isTexture ) {
    
                    data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
                    data.displacementScale = this.displacementScale;
                    data.displacementBias = this.displacementBias;
    
                }
    
                if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
                if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;
    
                if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
                if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
    
                if ( this.envMap && this.envMap.isTexture ) {
    
                    data.envMap = this.envMap.toJSON( meta ).uuid;
                    data.reflectivity = this.reflectivity; // Scale behind envMap
    
                    if ( this.combine !== undefined ) data.combine = this.combine;
                    if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
    
                }
    
                if ( this.gradientMap && this.gradientMap.isTexture ) {
    
                    data.gradientMap = this.gradientMap.toJSON( meta ).uuid;
    
                }
    
                if ( this.size !== undefined ) data.size = this.size;
                if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;
    
                if ( this.blending !== NormalBlending ) data.blending = this.blending;
                if ( this.flatShading === true ) data.flatShading = this.flatShading;
                if ( this.side !== FrontSide ) data.side = this.side;
                if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;
    
                if ( this.opacity < 1 ) data.opacity = this.opacity;
                if ( this.transparent === true ) data.transparent = this.transparent;
    
                data.depthFunc = this.depthFunc;
                data.depthTest = this.depthTest;
                data.depthWrite = this.depthWrite;
    
                // rotation (SpriteMaterial)
                if ( this.rotation !== 0 ) data.rotation = this.rotation;
    
                if ( this.polygonOffset === true ) data.polygonOffset = true;
                if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
                if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;
    
                if ( this.linewidth !== 1 ) data.linewidth = this.linewidth;
                if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
                if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
                if ( this.scale !== undefined ) data.scale = this.scale;
    
                if ( this.dithering === true ) data.dithering = true;
    
                if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
                if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
    
                if ( this.wireframe === true ) data.wireframe = this.wireframe;
                if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
                if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
                if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;
    
                if ( this.morphTargets === true ) data.morphTargets = true;
                if ( this.skinning === true ) data.skinning = true;
    
                if ( this.visible === false ) data.visible = false;
                if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;
    
                // TODO: Copied from Object3D.toJSON
    
                function extractFromCache( cache ) {
    
                    var values = [];
    
                    for ( var key in cache ) {
    
                        var data = cache[ key ];
                        delete data.metadata;
                        values.push( data );
    
                    }
    
                    return values;
    
                }
    
                if ( isRoot ) {
    
                    var textures = extractFromCache( meta.textures );
                    var images = extractFromCache( meta.images );
    
                    if ( textures.length > 0 ) data.textures = textures;
                    if ( images.length > 0 ) data.images = images;
    
                }
    
                return data;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( source ) {
    
                this.name = source.name;
    
                this.fog = source.fog;
                this.lights = source.lights;
    
                this.blending = source.blending;
                this.side = source.side;
                this.flatShading = source.flatShading;
                this.vertexColors = source.vertexColors;
    
                this.opacity = source.opacity;
                this.transparent = source.transparent;
    
                this.blendSrc = source.blendSrc;
                this.blendDst = source.blendDst;
                this.blendEquation = source.blendEquation;
                this.blendSrcAlpha = source.blendSrcAlpha;
                this.blendDstAlpha = source.blendDstAlpha;
                this.blendEquationAlpha = source.blendEquationAlpha;
    
                this.depthFunc = source.depthFunc;
                this.depthTest = source.depthTest;
                this.depthWrite = source.depthWrite;
    
                this.colorWrite = source.colorWrite;
    
                this.precision = source.precision;
    
                this.polygonOffset = source.polygonOffset;
                this.polygonOffsetFactor = source.polygonOffsetFactor;
                this.polygonOffsetUnits = source.polygonOffsetUnits;
    
                this.dithering = source.dithering;
    
                this.alphaTest = source.alphaTest;
                this.premultipliedAlpha = source.premultipliedAlpha;
    
                this.visible = source.visible;
                this.userData = JSON.parse( JSON.stringify( source.userData ) );
    
                this.clipShadows = source.clipShadows;
                this.clipIntersection = source.clipIntersection;
    
                var srcPlanes = source.clippingPlanes,
                    dstPlanes = null;
    
                if ( srcPlanes !== null ) {
    
                    var n = srcPlanes.length;
                    dstPlanes = new Array( n );
    
                    for ( var i = 0; i !== n; ++ i )
                        dstPlanes[ i ] = srcPlanes[ i ].clone();
    
                }
    
                this.clippingPlanes = dstPlanes;
    
                this.shadowSide = source.shadowSide;
    
                return this;
    
            },
    
            dispose: function () {
    
                this.dispatchEvent( { type: 'dispose' } );
    
            }
    
        } );
    
        var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
    
        var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
    
        /**
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  defines: { "label" : "value" },
         *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
         *
         *  fragmentShader: <string>,
         *  vertexShader: <string>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  lights: <bool>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */
    
        function ShaderMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'ShaderMaterial';
    
            this.defines = {};
            this.uniforms = {};
    
            this.vertexShader = default_vertex;
            this.fragmentShader = default_fragment;
    
            this.linewidth = 1;
    
            this.wireframe = false;
            this.wireframeLinewidth = 1;
    
            this.fog = false; // set to use scene fog
            this.lights = false; // set to use scene lights
            this.clipping = false; // set to use user-defined clipping planes
    
            this.skinning = false; // set to use skinning attribute streams
            this.morphTargets = false; // set to use morph targets
            this.morphNormals = false; // set to use morph normals
    
            this.extensions = {
                derivatives: false, // set to use derivatives
                fragDepth: false, // set to use fragment depth values
                drawBuffers: false, // set to use draw buffers
                shaderTextureLOD: false // set to use shader texture LOD
            };
    
            // When rendered geometry doesn't include these attributes but the material does,
            // use these default values in WebGL. This avoids errors when buffer data is missing.
            this.defaultAttributeValues = {
                'color': [ 1, 1, 1 ],
                'uv': [ 0, 0 ],
                'uv2': [ 0, 0 ]
            };
    
            this.index0AttributeName = undefined;
            this.uniformsNeedUpdate = false;
    
            if ( parameters !== undefined ) {
    
                if ( parameters.attributes !== undefined ) {
    
                    console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );
    
                }
    
                this.setValues( parameters );
    
            }
    
        }
    
        ShaderMaterial.prototype = Object.create( Material.prototype );
        ShaderMaterial.prototype.constructor = ShaderMaterial;
    
        ShaderMaterial.prototype.isShaderMaterial = true;
    
        ShaderMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.fragmentShader = source.fragmentShader;
            this.vertexShader = source.vertexShader;
    
            this.uniforms = cloneUniforms( source.uniforms );
    
            this.defines = Object.assign( {}, source.defines );
    
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
    
            this.lights = source.lights;
            this.clipping = source.clipping;
    
            this.skinning = source.skinning;
    
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
    
            this.extensions = source.extensions;
    
            return this;
    
        };
    
        ShaderMaterial.prototype.toJSON = function ( meta ) {
    
            var data = Material.prototype.toJSON.call( this, meta );
    
            data.uniforms = {};
    
            for ( var name in this.uniforms ) {
    
                var uniform = this.uniforms[ name ];
                var value = uniform.value;
    
                if ( value && value.isTexture ) {
    
                    data.uniforms[ name ] = {
                        type: 't',
                        value: value.toJSON( meta ).uuid
                    };
    
                } else if ( value && value.isColor ) {
    
                    data.uniforms[ name ] = {
                        type: 'c',
                        value: value.getHex()
                    };
    
                } else if ( value && value.isVector2 ) {
    
                    data.uniforms[ name ] = {
                        type: 'v2',
                        value: value.toArray()
                    };
    
                } else if ( value && value.isVector3 ) {
    
                    data.uniforms[ name ] = {
                        type: 'v3',
                        value: value.toArray()
                    };
    
                } else if ( value && value.isVector4 ) {
    
                    data.uniforms[ name ] = {
                        type: 'v4',
                        value: value.toArray()
                    };
    
                } else if ( value && value.isMatrix3 ) {
    
                    data.uniforms[ name ] = {
                        type: 'm3',
                        value: value.toArray()
                    };
    
                } else if ( value && value.isMatrix4 ) {
    
                    data.uniforms[ name ] = {
                        type: 'm4',
                        value: value.toArray()
                    };
    
                } else {
    
                    data.uniforms[ name ] = {
                        value: value
                    };
    
                    // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
    
                }
    
            }
    
            if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;
    
            data.vertexShader = this.vertexShader;
            data.fragmentShader = this.fragmentShader;
    
            var extensions = {};
    
            for ( var key in this.extensions ) {
    
                if ( this.extensions[ key ] === true ) extensions[ key ] = true;
    
            }
    
            if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;
    
            return data;
    
        };
    
        /**
         * @author bhouston / http://clara.io
         */
    
        function Ray( origin, direction ) {
    
            this.origin = ( origin !== undefined ) ? origin : new Vector3();
            this.direction = ( direction !== undefined ) ? direction : new Vector3();
    
        }
    
        Object.assign( Ray.prototype, {
    
            set: function ( origin, direction ) {
    
                this.origin.copy( origin );
                this.direction.copy( direction );
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( ray ) {
    
                this.origin.copy( ray.origin );
                this.direction.copy( ray.direction );
    
                return this;
    
            },
    
            at: function ( t, target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Ray: .at() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );
    
            },
    
            lookAt: function ( v ) {
    
                this.direction.copy( v ).sub( this.origin ).normalize();
    
                return this;
    
            },
    
            recast: function () {
    
                var v1 = new Vector3();
    
                return function recast( t ) {
    
                    this.origin.copy( this.at( t, v1 ) );
    
                    return this;
    
                };
    
            }(),
    
            closestPointToPoint: function ( point, target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
                    target = new Vector3();
    
                }
    
                target.subVectors( point, this.origin );
    
                var directionDistance = target.dot( this.direction );
    
                if ( directionDistance < 0 ) {
    
                    return target.copy( this.origin );
    
                }
    
                return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
    
            },
    
            distanceToPoint: function ( point ) {
    
                return Math.sqrt( this.distanceSqToPoint( point ) );
    
            },
    
            distanceSqToPoint: function () {
    
                var v1 = new Vector3();
    
                return function distanceSqToPoint( point ) {
    
                    var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );
    
                    // point behind the ray
    
                    if ( directionDistance < 0 ) {
    
                        return this.origin.distanceToSquared( point );
    
                    }
    
                    v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
    
                    return v1.distanceToSquared( point );
    
                };
    
            }(),
    
            distanceSqToSegment: function () {
    
                var segCenter = new Vector3();
                var segDir = new Vector3();
                var diff = new Vector3();
    
                return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
    
                    // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
                    // It returns the min distance between the ray and the segment
                    // defined by v0 and v1
                    // It can also set two optional targets :
                    // - The closest point on the ray
                    // - The closest point on the segment
    
                    segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
                    segDir.copy( v1 ).sub( v0 ).normalize();
                    diff.copy( this.origin ).sub( segCenter );
    
                    var segExtent = v0.distanceTo( v1 ) * 0.5;
                    var a01 = - this.direction.dot( segDir );
                    var b0 = diff.dot( this.direction );
                    var b1 = - diff.dot( segDir );
                    var c = diff.lengthSq();
                    var det = Math.abs( 1 - a01 * a01 );
                    var s0, s1, sqrDist, extDet;
    
                    if ( det > 0 ) {
    
                        // The ray and segment are not parallel.
    
                        s0 = a01 * b1 - b0;
                        s1 = a01 * b0 - b1;
                        extDet = segExtent * det;
    
                        if ( s0 >= 0 ) {
    
                            if ( s1 >= - extDet ) {
    
                                if ( s1 <= extDet ) {
    
                                    // region 0
                                    // Minimum at interior points of ray and segment.
    
                                    var invDet = 1 / det;
                                    s0 *= invDet;
                                    s1 *= invDet;
                                    sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
    
                                } else {
    
                                    // region 1
    
                                    s1 = segExtent;
                                    s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                                    sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                                }
    
                            } else {
    
                                // region 5
    
                                s1 = - segExtent;
                                s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                                sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                            }
    
                        } else {
    
                            if ( s1 <= - extDet ) {
    
                                // region 4
    
                                s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
                                s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
                                sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                            } else if ( s1 <= extDet ) {
    
                                // region 3
    
                                s0 = 0;
                                s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
                                sqrDist = s1 * ( s1 + 2 * b1 ) + c;
    
                            } else {
    
                                // region 2
    
                                s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
                                s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
                                sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                            }
    
                        }
    
                    } else {
    
                        // Ray and segment are parallel.
    
                        s1 = ( a01 > 0 ) ? - segExtent : segExtent;
                        s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                        sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                    }
    
                    if ( optionalPointOnRay ) {
    
                        optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
    
                    }
    
                    if ( optionalPointOnSegment ) {
    
                        optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );
    
                    }
    
                    return sqrDist;
    
                };
    
            }(),
    
            intersectSphere: function () {
    
                var v1 = new Vector3();
    
                return function intersectSphere( sphere, target ) {
    
                    v1.subVectors( sphere.center, this.origin );
                    var tca = v1.dot( this.direction );
                    var d2 = v1.dot( v1 ) - tca * tca;
                    var radius2 = sphere.radius * sphere.radius;
    
                    if ( d2 > radius2 ) return null;
    
                    var thc = Math.sqrt( radius2 - d2 );
    
                    // t0 = first intersect point - entrance on front of sphere
                    var t0 = tca - thc;
    
                    // t1 = second intersect point - exit point on back of sphere
                    var t1 = tca + thc;
    
                    // test to see if both t0 and t1 are behind the ray - if so, return null
                    if ( t0 < 0 && t1 < 0 ) return null;
    
                    // test to see if t0 is behind the ray:
                    // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
                    // in order to always return an intersect point that is in front of the ray.
                    if ( t0 < 0 ) return this.at( t1, target );
    
                    // else t0 is in front of the ray, so return the first collision point scaled by t0
                    return this.at( t0, target );
    
                };
    
            }(),
    
            intersectsSphere: function ( sphere ) {
    
                return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );
    
            },
    
            distanceToPlane: function ( plane ) {
    
                var denominator = plane.normal.dot( this.direction );
    
                if ( denominator === 0 ) {
    
                    // line is coplanar, return origin
                    if ( plane.distanceToPoint( this.origin ) === 0 ) {
    
                        return 0;
    
                    }
    
                    // Null is preferable to undefined since undefined means.... it is undefined
    
                    return null;
    
                }
    
                var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
    
                // Return if the ray never intersects the plane
    
                return t >= 0 ? t : null;
    
            },
    
            intersectPlane: function ( plane, target ) {
    
                var t = this.distanceToPlane( plane );
    
                if ( t === null ) {
    
                    return null;
    
                }
    
                return this.at( t, target );
    
            },
    
            intersectsPlane: function ( plane ) {
    
                // check if the ray lies on the plane first
    
                var distToPoint = plane.distanceToPoint( this.origin );
    
                if ( distToPoint === 0 ) {
    
                    return true;
    
                }
    
                var denominator = plane.normal.dot( this.direction );
    
                if ( denominator * distToPoint < 0 ) {
    
                    return true;
    
                }
    
                // ray origin is behind the plane (and is pointing behind it)
    
                return false;
    
            },
    
            intersectBox: function ( box, target ) {
    
                var tmin, tmax, tymin, tymax, tzmin, tzmax;
    
                var invdirx = 1 / this.direction.x,
                    invdiry = 1 / this.direction.y,
                    invdirz = 1 / this.direction.z;
    
                var origin = this.origin;
    
                if ( invdirx >= 0 ) {
    
                    tmin = ( box.min.x - origin.x ) * invdirx;
                    tmax = ( box.max.x - origin.x ) * invdirx;
    
                } else {
    
                    tmin = ( box.max.x - origin.x ) * invdirx;
                    tmax = ( box.min.x - origin.x ) * invdirx;
    
                }
    
                if ( invdiry >= 0 ) {
    
                    tymin = ( box.min.y - origin.y ) * invdiry;
                    tymax = ( box.max.y - origin.y ) * invdiry;
    
                } else {
    
                    tymin = ( box.max.y - origin.y ) * invdiry;
                    tymax = ( box.min.y - origin.y ) * invdiry;
    
                }
    
                if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
    
                // These lines also handle the case where tmin or tmax is NaN
                // (result of 0 * Infinity). x !== x returns true if x is NaN
    
                if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
    
                if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
    
                if ( invdirz >= 0 ) {
    
                    tzmin = ( box.min.z - origin.z ) * invdirz;
                    tzmax = ( box.max.z - origin.z ) * invdirz;
    
                } else {
    
                    tzmin = ( box.max.z - origin.z ) * invdirz;
                    tzmax = ( box.min.z - origin.z ) * invdirz;
    
                }
    
                if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
    
                if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
    
                if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
    
                //return point closest to the ray (positive side)
    
                if ( tmax < 0 ) return null;
    
                return this.at( tmin >= 0 ? tmin : tmax, target );
    
            },
    
            intersectsBox: ( function () {
    
                var v = new Vector3();
    
                return function intersectsBox( box ) {
    
                    return this.intersectBox( box, v ) !== null;
    
                };
    
            } )(),
    
            intersectTriangle: function () {
    
                // Compute the offset origin, edges, and normal.
                var diff = new Vector3();
                var edge1 = new Vector3();
                var edge2 = new Vector3();
                var normal = new Vector3();
    
                return function intersectTriangle( a, b, c, backfaceCulling, target ) {
    
                    // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
    
                    edge1.subVectors( b, a );
                    edge2.subVectors( c, a );
                    normal.crossVectors( edge1, edge2 );
    
                    // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
                    // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
                    //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
                    //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
                    //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
                    var DdN = this.direction.dot( normal );
                    var sign;
    
                    if ( DdN > 0 ) {
    
                        if ( backfaceCulling ) return null;
                        sign = 1;
    
                    } else if ( DdN < 0 ) {
    
                        sign = - 1;
                        DdN = - DdN;
    
                    } else {
    
                        return null;
    
                    }
    
                    diff.subVectors( this.origin, a );
                    var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );
    
                    // b1 < 0, no intersection
                    if ( DdQxE2 < 0 ) {
    
                        return null;
    
                    }
    
                    var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );
    
                    // b2 < 0, no intersection
                    if ( DdE1xQ < 0 ) {
    
                        return null;
    
                    }
    
                    // b1+b2 > 1, no intersection
                    if ( DdQxE2 + DdE1xQ > DdN ) {
    
                        return null;
    
                    }
    
                    // Line intersects triangle, check if ray does.
                    var QdN = - sign * diff.dot( normal );
    
                    // t < 0, no intersection
                    if ( QdN < 0 ) {
    
                        return null;
    
                    }
    
                    // Ray intersects triangle.
                    return this.at( QdN / DdN, target );
    
                };
    
            }(),
    
            applyMatrix4: function ( matrix4 ) {
    
                this.origin.applyMatrix4( matrix4 );
                this.direction.transformDirection( matrix4 );
    
                return this;
    
            },
    
            equals: function ( ray ) {
    
                return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
    
            }
    
        } );
    
        /**
         * @author bhouston / http://clara.io
         * @author mrdoob / http://mrdoob.com/
         */
    
        function Triangle( a, b, c ) {
    
            this.a = ( a !== undefined ) ? a : new Vector3();
            this.b = ( b !== undefined ) ? b : new Vector3();
            this.c = ( c !== undefined ) ? c : new Vector3();
    
        }
    
        Object.assign( Triangle, {
    
            getNormal: function () {
    
                var v0 = new Vector3();
    
                return function getNormal( a, b, c, target ) {
    
                    if ( target === undefined ) {
    
                        console.warn( 'THREE.Triangle: .getNormal() target is now required' );
                        target = new Vector3();
    
                    }
    
                    target.subVectors( c, b );
                    v0.subVectors( a, b );
                    target.cross( v0 );
    
                    var targetLengthSq = target.lengthSq();
                    if ( targetLengthSq > 0 ) {
    
                        return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );
    
                    }
    
                    return target.set( 0, 0, 0 );
    
                };
    
            }(),
    
            // static/instance method to calculate barycentric coordinates
            // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
            getBarycoord: function () {
    
                var v0 = new Vector3();
                var v1 = new Vector3();
                var v2 = new Vector3();
    
                return function getBarycoord( point, a, b, c, target ) {
    
                    v0.subVectors( c, a );
                    v1.subVectors( b, a );
                    v2.subVectors( point, a );
    
                    var dot00 = v0.dot( v0 );
                    var dot01 = v0.dot( v1 );
                    var dot02 = v0.dot( v2 );
                    var dot11 = v1.dot( v1 );
                    var dot12 = v1.dot( v2 );
    
                    var denom = ( dot00 * dot11 - dot01 * dot01 );
    
                    if ( target === undefined ) {
    
                        console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
                        target = new Vector3();
    
                    }
    
                    // collinear or singular triangle
                    if ( denom === 0 ) {
    
                        // arbitrary location outside of triangle?
                        // not sure if this is the best idea, maybe should be returning undefined
                        return target.set( - 2, - 1, - 1 );
    
                    }
    
                    var invDenom = 1 / denom;
                    var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
                    var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
    
                    // barycentric coordinates must always sum to 1
                    return target.set( 1 - u - v, v, u );
    
                };
    
            }(),
    
            containsPoint: function () {
    
                var v1 = new Vector3();
    
                return function containsPoint( point, a, b, c ) {
    
                    Triangle.getBarycoord( point, a, b, c, v1 );
    
                    return ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );
    
                };
    
            }(),
    
            getUV: function () {
    
                var barycoord = new Vector3();
    
                return function getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {
    
                    this.getBarycoord( point, p1, p2, p3, barycoord );
    
                    target.set( 0, 0 );
                    target.addScaledVector( uv1, barycoord.x );
                    target.addScaledVector( uv2, barycoord.y );
                    target.addScaledVector( uv3, barycoord.z );
    
                    return target;
    
                };
    
            }()
    
        } );
    
        Object.assign( Triangle.prototype, {
    
            set: function ( a, b, c ) {
    
                this.a.copy( a );
                this.b.copy( b );
                this.c.copy( c );
    
                return this;
    
            },
    
            setFromPointsAndIndices: function ( points, i0, i1, i2 ) {
    
                this.a.copy( points[ i0 ] );
                this.b.copy( points[ i1 ] );
                this.c.copy( points[ i2 ] );
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( triangle ) {
    
                this.a.copy( triangle.a );
                this.b.copy( triangle.b );
                this.c.copy( triangle.c );
    
                return this;
    
            },
    
            getArea: function () {
    
                var v0 = new Vector3();
                var v1 = new Vector3();
    
                return function getArea() {
    
                    v0.subVectors( this.c, this.b );
                    v1.subVectors( this.a, this.b );
    
                    return v0.cross( v1 ).length() * 0.5;
    
                };
    
            }(),
    
            getMidpoint: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
    
            },
    
            getNormal: function ( target ) {
    
                return Triangle.getNormal( this.a, this.b, this.c, target );
    
            },
    
            getPlane: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Triangle: .getPlane() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.setFromCoplanarPoints( this.a, this.b, this.c );
    
            },
    
            getBarycoord: function ( point, target ) {
    
                return Triangle.getBarycoord( point, this.a, this.b, this.c, target );
    
            },
    
            containsPoint: function ( point ) {
    
                return Triangle.containsPoint( point, this.a, this.b, this.c );
    
            },
    
            getUV: function ( point, uv1, uv2, uv3, result ) {
    
                return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, result );
    
            },
    
            intersectsBox: function ( box ) {
    
                return box.intersectsTriangle( this );
    
            },
    
            closestPointToPoint: function () {
    
                var vab = new Vector3();
                var vac = new Vector3();
                var vbc = new Vector3();
                var vap = new Vector3();
                var vbp = new Vector3();
                var vcp = new Vector3();
    
                return function closestPointToPoint( p, target ) {
    
                    if ( target === undefined ) {
    
                        console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
                        target = new Vector3();
    
                    }
    
                    var a = this.a, b = this.b, c = this.c;
                    var v, w;
    
                    // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
                    // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
                    // under the accompanying license; see chapter 5.1.5 for detailed explanation.
                    // basically, we're distinguishing which of the voronoi regions of the triangle
                    // the point lies in with the minimum amount of redundant computation.
    
                    vab.subVectors( b, a );
                    vac.subVectors( c, a );
                    vap.subVectors( p, a );
                    var d1 = vab.dot( vap );
                    var d2 = vac.dot( vap );
                    if ( d1 <= 0 && d2 <= 0 ) {
    
                        // vertex region of A; barycentric coords (1, 0, 0)
                        return target.copy( a );
    
                    }
    
                    vbp.subVectors( p, b );
                    var d3 = vab.dot( vbp );
                    var d4 = vac.dot( vbp );
                    if ( d3 >= 0 && d4 <= d3 ) {
    
                        // vertex region of B; barycentric coords (0, 1, 0)
                        return target.copy( b );
    
                    }
    
                    var vc = d1 * d4 - d3 * d2;
                    if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {
    
                        v = d1 / ( d1 - d3 );
                        // edge region of AB; barycentric coords (1-v, v, 0)
                        return target.copy( a ).addScaledVector( vab, v );
    
                    }
    
                    vcp.subVectors( p, c );
                    var d5 = vab.dot( vcp );
                    var d6 = vac.dot( vcp );
                    if ( d6 >= 0 && d5 <= d6 ) {
    
                        // vertex region of C; barycentric coords (0, 0, 1)
                        return target.copy( c );
    
                    }
    
                    var vb = d5 * d2 - d1 * d6;
                    if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {
    
                        w = d2 / ( d2 - d6 );
                        // edge region of AC; barycentric coords (1-w, 0, w)
                        return target.copy( a ).addScaledVector( vac, w );
    
                    }
    
                    var va = d3 * d6 - d5 * d4;
                    if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {
    
                        vbc.subVectors( c, b );
                        w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
                        // edge region of BC; barycentric coords (0, 1-w, w)
                        return target.copy( b ).addScaledVector( vbc, w ); // edge region of BC
    
                    }
    
                    // face region
                    var denom = 1 / ( va + vb + vc );
                    // u = va * denom
                    v = vb * denom;
                    w = vc * denom;
                    return target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );
    
                };
    
            }(),
    
            equals: function ( triangle ) {
    
                return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *  map: new THREE.Texture( <Image> ),
         *
         *  lightMap: new THREE.Texture( <Image> ),
         *  lightMapIntensity: <float>
         *
         *  aoMap: new THREE.Texture( <Image> ),
         *  aoMapIntensity: <float>
         *
         *  specularMap: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
         *  combine: THREE.Multiply,
         *  reflectivity: <float>,
         *  refractionRatio: <float>,
         *
         *  depthTest: <bool>,
         *  depthWrite: <bool>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>
         * }
         */
    
        function MeshBasicMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'MeshBasicMaterial';
    
            this.color = new Color( 0xffffff ); // emissive
    
            this.map = null;
    
            this.lightMap = null;
            this.lightMapIntensity = 1.0;
    
            this.aoMap = null;
            this.aoMapIntensity = 1.0;
    
            this.specularMap = null;
    
            this.alphaMap = null;
    
            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;
    
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = 'round';
            this.wireframeLinejoin = 'round';
    
            this.skinning = false;
            this.morphTargets = false;
    
            this.lights = false;
    
            this.setValues( parameters );
    
        }
    
        MeshBasicMaterial.prototype = Object.create( Material.prototype );
        MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
    
        MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
    
        MeshBasicMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.color.copy( source.color );
    
            this.map = source.map;
    
            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;
    
            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;
    
            this.specularMap = source.specularMap;
    
            this.alphaMap = source.alphaMap;
    
            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;
    
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;
    
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
    
            return this;
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author mikael emtinger / http://gomo.se/
         * @author jonobr1 / http://jonobr1.com/
         */
    
        function Mesh( geometry, material ) {
    
            Object3D.call( this );
    
            this.type = 'Mesh';
    
            this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
            this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );
    
            this.drawMode = TrianglesDrawMode;
    
            this.updateMorphTargets();
    
        }
    
        Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Mesh,
    
            isMesh: true,
    
            setDrawMode: function ( value ) {
    
                this.drawMode = value;
    
            },
    
            copy: function ( source ) {
    
                Object3D.prototype.copy.call( this, source );
    
                this.drawMode = source.drawMode;
    
                if ( source.morphTargetInfluences !== undefined ) {
    
                    this.morphTargetInfluences = source.morphTargetInfluences.slice();
    
                }
    
                if ( source.morphTargetDictionary !== undefined ) {
    
                    this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );
    
                }
    
                return this;
    
            },
    
            updateMorphTargets: function () {
    
                var geometry = this.geometry;
                var m, ml, name;
    
                if ( geometry.isBufferGeometry ) {
    
                    var morphAttributes = geometry.morphAttributes;
                    var keys = Object.keys( morphAttributes );
    
                    if ( keys.length > 0 ) {
    
                        var morphAttribute = morphAttributes[ keys[ 0 ] ];
    
                        if ( morphAttribute !== undefined ) {
    
                            this.morphTargetInfluences = [];
                            this.morphTargetDictionary = {};
    
                            for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
    
                                name = morphAttribute[ m ].name || String( m );
    
                                this.morphTargetInfluences.push( 0 );
                                this.morphTargetDictionary[ name ] = m;
    
                            }
    
                        }
    
                    }
    
                } else {
    
                    var morphTargets = geometry.morphTargets;
    
                    if ( morphTargets !== undefined && morphTargets.length > 0 ) {
    
                        console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );
    
                    }
    
                }
    
            },
    
            raycast: ( function () {
    
                var inverseMatrix = new Matrix4();
                var ray = new Ray();
                var sphere = new Sphere();
    
                var vA = new Vector3();
                var vB = new Vector3();
                var vC = new Vector3();
    
                var tempA = new Vector3();
                var tempB = new Vector3();
                var tempC = new Vector3();
    
                var morphA = new Vector3();
                var morphB = new Vector3();
                var morphC = new Vector3();
    
                var uvA = new Vector2();
                var uvB = new Vector2();
                var uvC = new Vector2();
    
                var intersectionPoint = new Vector3();
                var intersectionPointWorld = new Vector3();
    
                function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {
    
                    var intersect;
    
                    if ( material.side === BackSide ) {
    
                        intersect = ray.intersectTriangle( pC, pB, pA, true, point );
    
                    } else {
    
                        intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );
    
                    }
    
                    if ( intersect === null ) return null;
    
                    intersectionPointWorld.copy( point );
                    intersectionPointWorld.applyMatrix4( object.matrixWorld );
    
                    var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );
    
                    if ( distance < raycaster.near || distance > raycaster.far ) return null;
    
                    return {
                        distance: distance,
                        point: intersectionPointWorld.clone(),
                        object: object
                    };
    
                }
    
                function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, uv, a, b, c ) {
    
                    vA.fromBufferAttribute( position, a );
                    vB.fromBufferAttribute( position, b );
                    vC.fromBufferAttribute( position, c );
    
                    var morphInfluences = object.morphTargetInfluences;
    
                    if ( material.morphTargets && morphPosition && morphInfluences ) {
    
                        morphA.set( 0, 0, 0 );
                        morphB.set( 0, 0, 0 );
                        morphC.set( 0, 0, 0 );
    
                        for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {
    
                            var influence = morphInfluences[ i ];
                            var morphAttribute = morphPosition[ i ];
    
                            if ( influence === 0 ) continue;
    
                            tempA.fromBufferAttribute( morphAttribute, a );
                            tempB.fromBufferAttribute( morphAttribute, b );
                            tempC.fromBufferAttribute( morphAttribute, c );
    
                            morphA.addScaledVector( tempA.sub( vA ), influence );
                            morphB.addScaledVector( tempB.sub( vB ), influence );
                            morphC.addScaledVector( tempC.sub( vC ), influence );
    
                        }
    
                        vA.add( morphA );
                        vB.add( morphB );
                        vC.add( morphC );
    
                    }
    
                    var intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );
    
                    if ( intersection ) {
    
                        if ( uv ) {
    
                            uvA.fromBufferAttribute( uv, a );
                            uvB.fromBufferAttribute( uv, b );
                            uvC.fromBufferAttribute( uv, c );
    
                            intersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() );
    
                        }
    
                        var face = new Face3( a, b, c );
                        Triangle.getNormal( vA, vB, vC, face.normal );
    
                        intersection.face = face;
    
                    }
    
                    return intersection;
    
                }
    
                return function raycast( raycaster, intersects ) {
    
                    var geometry = this.geometry;
                    var material = this.material;
                    var matrixWorld = this.matrixWorld;
    
                    if ( material === undefined ) return;
    
                    // Checking boundingSphere distance to ray
    
                    if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
    
                    sphere.copy( geometry.boundingSphere );
                    sphere.applyMatrix4( matrixWorld );
    
                    if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
    
                    //
    
                    inverseMatrix.getInverse( matrixWorld );
                    ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
    
                    // Check boundingBox before continuing
    
                    if ( geometry.boundingBox !== null ) {
    
                        if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;
    
                    }
    
                    var intersection;
    
                    if ( geometry.isBufferGeometry ) {
    
                        var a, b, c;
                        var index = geometry.index;
                        var position = geometry.attributes.position;
                        var morphPosition = geometry.morphAttributes.position;
                        var uv = geometry.attributes.uv;
                        var groups = geometry.groups;
                        var drawRange = geometry.drawRange;
                        var i, j, il, jl;
                        var group, groupMaterial;
                        var start, end;
    
                        if ( index !== null ) {
    
                            // indexed buffer geometry
    
                            if ( Array.isArray( material ) ) {
    
                                for ( i = 0, il = groups.length; i < il; i ++ ) {
    
                                    group = groups[ i ];
                                    groupMaterial = material[ group.materialIndex ];
    
                                    start = Math.max( group.start, drawRange.start );
                                    end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );
    
                                    for ( j = start, jl = end; j < jl; j += 3 ) {
    
                                        a = index.getX( j );
                                        b = index.getX( j + 1 );
                                        c = index.getX( j + 2 );
    
                                        intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, morphPosition, uv, a, b, c );
    
                                        if ( intersection ) {
    
                                            intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
                                            intersection.face.materialIndex = group.materialIndex;
                                            intersects.push( intersection );
    
                                        }
    
                                    }
    
                                }
    
                            } else {
    
                                start = Math.max( 0, drawRange.start );
                                end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
    
                                for ( i = start, il = end; i < il; i += 3 ) {
    
                                    a = index.getX( i );
                                    b = index.getX( i + 1 );
                                    c = index.getX( i + 2 );
    
                                    intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, morphPosition, uv, a, b, c );
    
                                    if ( intersection ) {
    
                                        intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
                                        intersects.push( intersection );
    
                                    }
    
                                }
    
                            }
    
                        } else if ( position !== undefined ) {
    
                            // non-indexed buffer geometry
    
                            if ( Array.isArray( material ) ) {
    
                                for ( i = 0, il = groups.length; i < il; i ++ ) {
    
                                    group = groups[ i ];
                                    groupMaterial = material[ group.materialIndex ];
    
                                    start = Math.max( group.start, drawRange.start );
                                    end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );
    
                                    for ( j = start, jl = end; j < jl; j += 3 ) {
    
                                        a = j;
                                        b = j + 1;
                                        c = j + 2;
    
                                        intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, morphPosition, uv, a, b, c );
    
                                        if ( intersection ) {
    
                                            intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
                                            intersection.face.materialIndex = group.materialIndex;
                                            intersects.push( intersection );
    
                                        }
    
                                    }
    
                                }
    
                            } else {
    
                                start = Math.max( 0, drawRange.start );
                                end = Math.min( position.count, ( drawRange.start + drawRange.count ) );
    
                                for ( i = start, il = end; i < il; i += 3 ) {
    
                                    a = i;
                                    b = i + 1;
                                    c = i + 2;
    
                                    intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, morphPosition, uv, a, b, c );
    
                                    if ( intersection ) {
    
                                        intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
                                        intersects.push( intersection );
    
                                    }
    
                                }
    
                            }
    
                        }
    
                    } else if ( geometry.isGeometry ) {
    
                        var fvA, fvB, fvC;
                        var isMultiMaterial = Array.isArray( material );
    
                        var vertices = geometry.vertices;
                        var faces = geometry.faces;
                        var uvs;
    
                        var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
                        if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;
    
                        for ( var f = 0, fl = faces.length; f < fl; f ++ ) {
    
                            var face = faces[ f ];
                            var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;
    
                            if ( faceMaterial === undefined ) continue;
    
                            fvA = vertices[ face.a ];
                            fvB = vertices[ face.b ];
                            fvC = vertices[ face.c ];
    
                            intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );
    
                            if ( intersection ) {
    
                                if ( uvs && uvs[ f ] ) {
    
                                    var uvs_f = uvs[ f ];
                                    uvA.copy( uvs_f[ 0 ] );
                                    uvB.copy( uvs_f[ 1 ] );
                                    uvC.copy( uvs_f[ 2 ] );
    
                                    intersection.uv = Triangle.getUV( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC, new Vector2() );
    
                                }
    
                                intersection.face = face;
                                intersection.faceIndex = f;
                                intersects.push( intersection );
    
                            }
    
                        }
    
                    }
    
                };
    
            }() ),
    
            clone: function () {
    
                return new this.constructor( this.geometry, this.material ).copy( this );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {
    
            var clearColor = new Color( 0x000000 );
            var clearAlpha = 0;
    
            var planeMesh;
            var boxMesh;
            // Store the current background texture and its `version`
            // so we can recompile the material accordingly.
            var currentBackground = null;
            var currentBackgroundVersion = 0;
    
            function render( renderList, scene, camera, forceClear ) {
    
                var background = scene.background;
    
                // Ignore background in AR
                // TODO: Reconsider this.
    
                var vr = renderer.vr;
                var session = vr.getSession && vr.getSession();
    
                if ( session && session.environmentBlendMode === 'additive' ) {
    
                    background = null;
    
                }
    
                if ( background === null ) {
    
                    setClear( clearColor, clearAlpha );
                    currentBackground = null;
                    currentBackgroundVersion = 0;
    
                } else if ( background && background.isColor ) {
    
                    setClear( background, 1 );
                    forceClear = true;
                    currentBackground = null;
                    currentBackgroundVersion = 0;
    
                }
    
                if ( renderer.autoClear || forceClear ) {
    
                    renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
    
                }
    
                if ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {
    
                    if ( boxMesh === undefined ) {
    
                        boxMesh = new Mesh(
                            new BoxBufferGeometry( 1, 1, 1 ),
                            new ShaderMaterial( {
                                type: 'BackgroundCubeMaterial',
                                uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
                                vertexShader: ShaderLib.cube.vertexShader,
                                fragmentShader: ShaderLib.cube.fragmentShader,
                                side: BackSide,
                                depthTest: false,
                                depthWrite: false,
                                fog: false
                            } )
                        );
    
                        boxMesh.geometry.removeAttribute( 'normal' );
                        boxMesh.geometry.removeAttribute( 'uv' );
    
                        boxMesh.onBeforeRender = function ( renderer, scene, camera ) {
    
                            this.matrixWorld.copyPosition( camera.matrixWorld );
    
                        };
    
                        // enable code injection for non-built-in material
                        Object.defineProperty( boxMesh.material, 'map', {
    
                            get: function () {
    
                                return this.uniforms.tCube.value;
    
                            }
    
                        } );
    
                        objects.update( boxMesh );
    
                    }
    
                    var texture = background.isWebGLRenderTargetCube ? background.texture : background;
                    boxMesh.material.uniforms.tCube.value = texture;
                    boxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;
    
                    if ( currentBackground !== background ||
                         currentBackgroundVersion !== texture.version ) {
    
                        boxMesh.material.needsUpdate = true;
    
                        currentBackground = background;
                        currentBackgroundVersion = texture.version;
    
                    }
    
                    // push to the pre-sorted opaque render list
                    renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );
    
                } else if ( background && background.isTexture ) {
    
                    if ( planeMesh === undefined ) {
    
                        planeMesh = new Mesh(
                            new PlaneBufferGeometry( 2, 2 ),
                            new ShaderMaterial( {
                                type: 'BackgroundMaterial',
                                uniforms: cloneUniforms( ShaderLib.background.uniforms ),
                                vertexShader: ShaderLib.background.vertexShader,
                                fragmentShader: ShaderLib.background.fragmentShader,
                                side: FrontSide,
                                depthTest: false,
                                depthWrite: false,
                                fog: false
                            } )
                        );
    
                        planeMesh.geometry.removeAttribute( 'normal' );
    
                        // enable code injection for non-built-in material
                        Object.defineProperty( planeMesh.material, 'map', {
    
                            get: function () {
    
                                return this.uniforms.t2D.value;
    
                            }
    
                        } );
    
                        objects.update( planeMesh );
    
                    }
    
                    planeMesh.material.uniforms.t2D.value = background;
    
                    if ( background.matrixAutoUpdate === true ) {
    
                        background.updateMatrix();
    
                    }
    
                    planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );
    
                    if ( currentBackground !== background ||
                           currentBackgroundVersion !== background.version ) {
    
                        planeMesh.material.needsUpdate = true;
    
                        currentBackground = background;
                        currentBackgroundVersion = background.version;
    
                    }
    
    
                    // push to the pre-sorted opaque render list
                    renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );
    
                }
    
            }
    
            function setClear( color, alpha ) {
    
                state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );
    
            }
    
            return {
    
                getClearColor: function () {
    
                    return clearColor;
    
                },
                setClearColor: function ( color, alpha ) {
    
                    clearColor.set( color );
                    clearAlpha = alpha !== undefined ? alpha : 1;
                    setClear( clearColor, clearAlpha );
    
                },
                getClearAlpha: function () {
    
                    return clearAlpha;
    
                },
                setClearAlpha: function ( alpha ) {
    
                    clearAlpha = alpha;
                    setClear( clearColor, clearAlpha );
    
                },
                render: render
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLBufferRenderer( gl, extensions, info, capabilities ) {
    
            var mode;
    
            function setMode( value ) {
    
                mode = value;
    
            }
    
            function render( start, count ) {
    
                gl.drawArrays( mode, start, count );
    
                info.update( count, mode );
    
            }
    
            function renderInstances( geometry, start, count ) {
    
                var extension;
    
                if ( capabilities.isWebGL2 ) {
    
                    extension = gl;
    
                } else {
    
                    extension = extensions.get( 'ANGLE_instanced_arrays' );
    
                    if ( extension === null ) {
    
                        console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
                        return;
    
                    }
    
                }
    
                extension[ capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE' ]( mode, start, count, geometry.maxInstancedCount );
    
                info.update( count, mode, geometry.maxInstancedCount );
    
            }
    
            //
    
            this.setMode = setMode;
            this.render = render;
            this.renderInstances = renderInstances;
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLCapabilities( gl, extensions, parameters ) {
    
            var maxAnisotropy;
    
            function getMaxAnisotropy() {
    
                if ( maxAnisotropy !== undefined ) return maxAnisotropy;
    
                var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
    
                if ( extension !== null ) {
    
                    maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
    
                } else {
    
                    maxAnisotropy = 0;
    
                }
    
                return maxAnisotropy;
    
            }
    
            function getMaxPrecision( precision ) {
    
                if ( precision === 'highp' ) {
    
                    if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
                         gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {
    
                        return 'highp';
    
                    }
    
                    precision = 'mediump';
    
                }
    
                if ( precision === 'mediump' ) {
    
                    if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
                         gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {
    
                        return 'mediump';
    
                    }
    
                }
    
                return 'lowp';
    
            }
    
            var isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;
    
            var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
            var maxPrecision = getMaxPrecision( precision );
    
            if ( maxPrecision !== precision ) {
    
                console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
                precision = maxPrecision;
    
            }
    
            var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    
            var maxTextures = gl.getParameter( 34930 );
            var maxVertexTextures = gl.getParameter( 35660 );
            var maxTextureSize = gl.getParameter( 3379 );
            var maxCubemapSize = gl.getParameter( 34076 );
    
            var maxAttributes = gl.getParameter( 34921 );
            var maxVertexUniforms = gl.getParameter( 36347 );
            var maxVaryings = gl.getParameter( 36348 );
            var maxFragmentUniforms = gl.getParameter( 36349 );
    
            var vertexTextures = maxVertexTextures > 0;
            var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
            var floatVertexTextures = vertexTextures && floatFragmentTextures;
    
            var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;
    
            return {
    
                isWebGL2: isWebGL2,
    
                getMaxAnisotropy: getMaxAnisotropy,
                getMaxPrecision: getMaxPrecision,
    
                precision: precision,
                logarithmicDepthBuffer: logarithmicDepthBuffer,
    
                maxTextures: maxTextures,
                maxVertexTextures: maxVertexTextures,
                maxTextureSize: maxTextureSize,
                maxCubemapSize: maxCubemapSize,
    
                maxAttributes: maxAttributes,
                maxVertexUniforms: maxVertexUniforms,
                maxVaryings: maxVaryings,
                maxFragmentUniforms: maxFragmentUniforms,
    
                vertexTextures: vertexTextures,
                floatFragmentTextures: floatFragmentTextures,
                floatVertexTextures: floatVertexTextures,
    
                maxSamples: maxSamples
    
            };
    
        }
    
        /**
         * @author tschw
         */
    
        function WebGLClipping() {
    
            var scope = this,
    
                globalState = null,
                numGlobalPlanes = 0,
                localClippingEnabled = false,
                renderingShadows = false,
    
                plane = new Plane(),
                viewNormalMatrix = new Matrix3(),
    
                uniform = { value: null, needsUpdate: false };
    
            this.uniform = uniform;
            this.numPlanes = 0;
            this.numIntersection = 0;
    
            this.init = function ( planes, enableLocalClipping, camera ) {
    
                var enabled =
                    planes.length !== 0 ||
                    enableLocalClipping ||
                    // enable state of previous frame - the clipping code has to
                    // run another frame in order to reset the state:
                    numGlobalPlanes !== 0 ||
                    localClippingEnabled;
    
                localClippingEnabled = enableLocalClipping;
    
                globalState = projectPlanes( planes, camera, 0 );
                numGlobalPlanes = planes.length;
    
                return enabled;
    
            };
    
            this.beginShadows = function () {
    
                renderingShadows = true;
                projectPlanes( null );
    
            };
    
            this.endShadows = function () {
    
                renderingShadows = false;
                resetGlobalState();
    
            };
    
            this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {
    
                if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {
    
                    // there's no local clipping
    
                    if ( renderingShadows ) {
    
                        // there's no global clipping
    
                        projectPlanes( null );
    
                    } else {
    
                        resetGlobalState();
    
                    }
    
                } else {
    
                    var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
                        lGlobal = nGlobal * 4,
    
                        dstArray = cache.clippingState || null;
    
                    uniform.value = dstArray; // ensure unique state
    
                    dstArray = projectPlanes( planes, camera, lGlobal, fromCache );
    
                    for ( var i = 0; i !== lGlobal; ++ i ) {
    
                        dstArray[ i ] = globalState[ i ];
    
                    }
    
                    cache.clippingState = dstArray;
                    this.numIntersection = clipIntersection ? this.numPlanes : 0;
                    this.numPlanes += nGlobal;
    
                }
    
    
            };
    
            function resetGlobalState() {
    
                if ( uniform.value !== globalState ) {
    
                    uniform.value = globalState;
                    uniform.needsUpdate = numGlobalPlanes > 0;
    
                }
    
                scope.numPlanes = numGlobalPlanes;
                scope.numIntersection = 0;
    
            }
    
            function projectPlanes( planes, camera, dstOffset, skipTransform ) {
    
                var nPlanes = planes !== null ? planes.length : 0,
                    dstArray = null;
    
                if ( nPlanes !== 0 ) {
    
                    dstArray = uniform.value;
    
                    if ( skipTransform !== true || dstArray === null ) {
    
                        var flatSize = dstOffset + nPlanes * 4,
                            viewMatrix = camera.matrixWorldInverse;
    
                        viewNormalMatrix.getNormalMatrix( viewMatrix );
    
                        if ( dstArray === null || dstArray.length < flatSize ) {
    
                            dstArray = new Float32Array( flatSize );
    
                        }
    
                        for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {
    
                            plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );
    
                            plane.normal.toArray( dstArray, i4 );
                            dstArray[ i4 + 3 ] = plane.constant;
    
                        }
    
                    }
    
                    uniform.value = dstArray;
                    uniform.needsUpdate = true;
    
                }
    
                scope.numPlanes = nPlanes;
    
                return dstArray;
    
            }
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLExtensions( gl ) {
    
            var extensions = {};
    
            return {
    
                get: function ( name ) {
    
                    if ( extensions[ name ] !== undefined ) {
    
                        return extensions[ name ];
    
                    }
    
                    var extension;
    
                    switch ( name ) {
    
                        case 'WEBGL_depth_texture':
                            extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
                            break;
    
                        case 'EXT_texture_filter_anisotropic':
                            extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
                            break;
    
                        case 'WEBGL_compressed_texture_s3tc':
                            extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
                            break;
    
                        case 'WEBGL_compressed_texture_pvrtc':
                            extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
                            break;
    
                        default:
                            extension = gl.getExtension( name );
    
                    }
    
                    if ( extension === null ) {
    
                        console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
    
                    }
    
                    extensions[ name ] = extension;
    
                    return extension;
    
                }
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLGeometries( gl, attributes, info ) {
    
            var geometries = {};
            var wireframeAttributes = {};
    
            function onGeometryDispose( event ) {
    
                var geometry = event.target;
                var buffergeometry = geometries[ geometry.id ];
    
                if ( buffergeometry.index !== null ) {
    
                    attributes.remove( buffergeometry.index );
    
                }
    
                for ( var name in buffergeometry.attributes ) {
    
                    attributes.remove( buffergeometry.attributes[ name ] );
    
                }
    
                geometry.removeEventListener( 'dispose', onGeometryDispose );
    
                delete geometries[ geometry.id ];
    
                var attribute = wireframeAttributes[ buffergeometry.id ];
    
                if ( attribute ) {
    
                    attributes.remove( attribute );
                    delete wireframeAttributes[ buffergeometry.id ];
    
                }
    
                //
    
                info.memory.geometries --;
    
            }
    
            function get( object, geometry ) {
    
                var buffergeometry = geometries[ geometry.id ];
    
                if ( buffergeometry ) return buffergeometry;
    
                geometry.addEventListener( 'dispose', onGeometryDispose );
    
                if ( geometry.isBufferGeometry ) {
    
                    buffergeometry = geometry;
    
                } else if ( geometry.isGeometry ) {
    
                    if ( geometry._bufferGeometry === undefined ) {
    
                        geometry._bufferGeometry = new BufferGeometry().setFromObject( object );
    
                    }
    
                    buffergeometry = geometry._bufferGeometry;
    
                }
    
                geometries[ geometry.id ] = buffergeometry;
    
                info.memory.geometries ++;
    
                return buffergeometry;
    
            }
    
            function update( geometry ) {
    
                var index = geometry.index;
                var geometryAttributes = geometry.attributes;
    
                if ( index !== null ) {
    
                    attributes.update( index, 34963 );
    
                }
    
                for ( var name in geometryAttributes ) {
    
                    attributes.update( geometryAttributes[ name ], 34962 );
    
                }
    
                // morph targets
    
                var morphAttributes = geometry.morphAttributes;
    
                for ( var name in morphAttributes ) {
    
                    var array = morphAttributes[ name ];
    
                    for ( var i = 0, l = array.length; i < l; i ++ ) {
    
                        attributes.update( array[ i ], 34962 );
    
                    }
    
                }
    
            }
    
            function getWireframeAttribute( geometry ) {
    
                var attribute = wireframeAttributes[ geometry.id ];
    
                if ( attribute ) return attribute;
    
                var indices = [];
    
                var geometryIndex = geometry.index;
                var geometryAttributes = geometry.attributes;
    
                // console.time( 'wireframe' );
    
                if ( geometryIndex !== null ) {
    
                    var array = geometryIndex.array;
    
                    for ( var i = 0, l = array.length; i < l; i += 3 ) {
    
                        var a = array[ i + 0 ];
                        var b = array[ i + 1 ];
                        var c = array[ i + 2 ];
    
                        indices.push( a, b, b, c, c, a );
    
                    }
    
                } else {
    
                    var array = geometryAttributes.position.array;
    
                    for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
    
                        var a = i + 0;
                        var b = i + 1;
                        var c = i + 2;
    
                        indices.push( a, b, b, c, c, a );
    
                    }
    
                }
    
                // console.timeEnd( 'wireframe' );
    
                attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
    
                attributes.update( attribute, 34963 );
    
                wireframeAttributes[ geometry.id ] = attribute;
    
                return attribute;
    
            }
    
            return {
    
                get: get,
                update: update,
    
                getWireframeAttribute: getWireframeAttribute
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {
    
            var mode;
    
            function setMode( value ) {
    
                mode = value;
    
            }
    
            var type, bytesPerElement;
    
            function setIndex( value ) {
    
                type = value.type;
                bytesPerElement = value.bytesPerElement;
    
            }
    
            function render( start, count ) {
    
                gl.drawElements( mode, count, type, start * bytesPerElement );
    
                info.update( count, mode );
    
            }
    
            function renderInstances( geometry, start, count ) {
    
                var extension;
    
                if ( capabilities.isWebGL2 ) {
    
                    extension = gl;
    
                } else {
    
                    var extension = extensions.get( 'ANGLE_instanced_arrays' );
    
                    if ( extension === null ) {
    
                        console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
                        return;
    
                    }
    
                }
    
                extension[ capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE' ]( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );
    
                info.update( count, mode, geometry.maxInstancedCount );
    
            }
    
            //
    
            this.setMode = setMode;
            this.setIndex = setIndex;
            this.render = render;
            this.renderInstances = renderInstances;
    
        }
    
        /**
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        function WebGLInfo( gl ) {
    
            var memory = {
                geometries: 0,
                textures: 0
            };
    
            var render = {
                frame: 0,
                calls: 0,
                triangles: 0,
                points: 0,
                lines: 0
            };
    
            function update( count, mode, instanceCount ) {
    
                instanceCount = instanceCount || 1;
    
                render.calls ++;
    
                switch ( mode ) {
    
                    case 4:
                        render.triangles += instanceCount * ( count / 3 );
                        break;
    
                    case 5:
                    case 6:
                        render.triangles += instanceCount * ( count - 2 );
                        break;
    
                    case 1:
                        render.lines += instanceCount * ( count / 2 );
                        break;
    
                    case 3:
                        render.lines += instanceCount * ( count - 1 );
                        break;
    
                    case 2:
                        render.lines += instanceCount * count;
                        break;
    
                    case 0:
                        render.points += instanceCount * count;
                        break;
    
                    default:
                        console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
                        break;
    
                }
    
            }
    
            function reset() {
    
                render.frame ++;
                render.calls = 0;
                render.triangles = 0;
                render.points = 0;
                render.lines = 0;
    
            }
    
            return {
                memory: memory,
                render: render,
                programs: null,
                autoReset: true,
                reset: reset,
                update: update
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function absNumericalSort( a, b ) {
    
            return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );
    
        }
    
        function WebGLMorphtargets( gl ) {
    
            var influencesList = {};
            var morphInfluences = new Float32Array( 8 );
    
            function update( object, geometry, material, program ) {
    
                var objectInfluences = object.morphTargetInfluences;
    
                var length = objectInfluences.length;
    
                var influences = influencesList[ geometry.id ];
    
                if ( influences === undefined ) {
    
                    // initialise list
    
                    influences = [];
    
                    for ( var i = 0; i < length; i ++ ) {
    
                        influences[ i ] = [ i, 0 ];
    
                    }
    
                    influencesList[ geometry.id ] = influences;
    
                }
    
                var morphTargets = material.morphTargets && geometry.morphAttributes.position;
                var morphNormals = material.morphNormals && geometry.morphAttributes.normal;
    
                // Remove current morphAttributes
    
                for ( var i = 0; i < length; i ++ ) {
    
                    var influence = influences[ i ];
    
                    if ( influence[ 1 ] !== 0 ) {
    
                        if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
                        if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );
    
                    }
    
                }
    
                // Collect influences
    
                for ( var i = 0; i < length; i ++ ) {
    
                    var influence = influences[ i ];
    
                    influence[ 0 ] = i;
                    influence[ 1 ] = objectInfluences[ i ];
    
                }
    
                influences.sort( absNumericalSort );
    
                // Add morphAttributes
    
                for ( var i = 0; i < 8; i ++ ) {
    
                    var influence = influences[ i ];
    
                    if ( influence ) {
    
                        var index = influence[ 0 ];
                        var value = influence[ 1 ];
    
                        if ( value ) {
    
                            if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
                            if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );
    
                            morphInfluences[ i ] = value;
                            continue;
    
                        }
    
                    }
    
                    morphInfluences[ i ] = 0;
    
                }
    
                program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );
    
            }
    
            return {
    
                update: update
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLObjects( geometries, info ) {
    
            var updateList = {};
    
            function update( object ) {
    
                var frame = info.render.frame;
    
                var geometry = object.geometry;
                var buffergeometry = geometries.get( object, geometry );
    
                // Update once per frame
    
                if ( updateList[ buffergeometry.id ] !== frame ) {
    
                    if ( geometry.isGeometry ) {
    
                        buffergeometry.updateFromObject( object );
    
                    }
    
                    geometries.update( buffergeometry );
    
                    updateList[ buffergeometry.id ] = frame;
    
                }
    
                return buffergeometry;
    
            }
    
            function dispose() {
    
                updateList = {};
    
            }
    
            return {
    
                update: update,
                dispose: dispose
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
    
            images = images !== undefined ? images : [];
            mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
            format = format !== undefined ? format : RGBFormat;
    
            Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
    
            this.flipY = false;
    
        }
    
        CubeTexture.prototype = Object.create( Texture.prototype );
        CubeTexture.prototype.constructor = CubeTexture;
    
        CubeTexture.prototype.isCubeTexture = true;
    
        Object.defineProperty( CubeTexture.prototype, 'images', {
    
            get: function () {
    
                return this.image;
    
            },
    
            set: function ( value ) {
    
                this.image = value;
    
            }
    
        } );
    
        /**
         * @author Takahiro https://github.com/takahirox
         */
    
        function DataTexture2DArray( data, width, height, depth ) {
    
            Texture.call( this, null );
    
            this.image = { data: data, width: width, height: height, depth: depth };
    
            this.magFilter = NearestFilter;
            this.minFilter = NearestFilter;
    
            this.wrapR = ClampToEdgeWrapping;
    
            this.generateMipmaps = false;
            this.flipY = false;
    
        }
    
        DataTexture2DArray.prototype = Object.create( Texture.prototype );
        DataTexture2DArray.prototype.constructor = DataTexture2DArray;
        DataTexture2DArray.prototype.isDataTexture2DArray = true;
    
        /**
         * @author Artur Trzesiok
         */
    
        function DataTexture3D( data, width, height, depth ) {
    
            // We're going to add .setXXX() methods for setting properties later.
            // Users can still set in DataTexture3D directly.
            //
            //	var texture = new THREE.DataTexture3D( data, width, height, depth );
            // 	texture.anisotropy = 16;
            //
            // See #14839
    
            Texture.call( this, null );
    
            this.image = { data: data, width: width, height: height, depth: depth };
    
            this.magFilter = NearestFilter;
            this.minFilter = NearestFilter;
    
            this.wrapR = ClampToEdgeWrapping;
    
            this.generateMipmaps = false;
            this.flipY = false;
    
        }
    
        DataTexture3D.prototype = Object.create( Texture.prototype );
        DataTexture3D.prototype.constructor = DataTexture3D;
        DataTexture3D.prototype.isDataTexture3D = true;
    
        /**
         * @author tschw
         * @author Mugen87 / https://github.com/Mugen87
         * @author mrdoob / http://mrdoob.com/
         *
         * Uniforms of a program.
         * Those form a tree structure with a special top-level container for the root,
         * which you get by calling 'new WebGLUniforms( gl, program )'.
         *
         *
         * Properties of inner nodes including the top-level container:
         *
         * .seq - array of nested uniforms
         * .map - nested uniforms by name
         *
         *
         * Methods of all nodes except the top-level container:
         *
         * .setValue( gl, value, [textures] )
         *
         * 		uploads a uniform value(s)
         *  	the 'textures' parameter is needed for sampler uniforms
         *
         *
         * Static methods of the top-level container (textures factorizations):
         *
         * .upload( gl, seq, values, textures )
         *
         * 		sets uniforms in 'seq' to 'values[id].value'
         *
         * .seqWithValue( seq, values ) : filteredSeq
         *
         * 		filters 'seq' entries with corresponding entry in values
         *
         *
         * Methods of the top-level container (textures factorizations):
         *
         * .setValue( gl, name, value, textures )
         *
         * 		sets uniform with  name 'name' to 'value'
         *
         * .setOptional( gl, obj, prop )
         *
         * 		like .set for an optional property of the object
         *
         */
    
        var emptyTexture = new Texture();
        var emptyTexture2dArray = new DataTexture2DArray();
        var emptyTexture3d = new DataTexture3D();
        var emptyCubeTexture = new CubeTexture();
    
        // --- Utilities ---
    
        // Array Caches (provide typed arrays for temporary by size)
    
        var arrayCacheF32 = [];
        var arrayCacheI32 = [];
    
        // Float32Array caches used for uploading Matrix uniforms
    
        var mat4array = new Float32Array( 16 );
        var mat3array = new Float32Array( 9 );
        var mat2array = new Float32Array( 4 );
    
        // Flattening for arrays of vectors and matrices
    
        function flatten( array, nBlocks, blockSize ) {
    
            var firstElem = array[ 0 ];
    
            if ( firstElem <= 0 || firstElem > 0 ) return array;
            // unoptimized: ! isNaN( firstElem )
            // see http://jacksondunstan.com/articles/983
    
            var n = nBlocks * blockSize,
                r = arrayCacheF32[ n ];
    
            if ( r === undefined ) {
    
                r = new Float32Array( n );
                arrayCacheF32[ n ] = r;
    
            }
    
            if ( nBlocks !== 0 ) {
    
                firstElem.toArray( r, 0 );
    
                for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {
    
                    offset += blockSize;
                    array[ i ].toArray( r, offset );
    
                }
    
            }
    
            return r;
    
        }
    
        function arraysEqual( a, b ) {
    
            if ( a.length !== b.length ) return false;
    
            for ( var i = 0, l = a.length; i < l; i ++ ) {
    
                if ( a[ i ] !== b[ i ] ) return false;
    
            }
    
            return true;
    
        }
    
        function copyArray( a, b ) {
    
            for ( var i = 0, l = b.length; i < l; i ++ ) {
    
                a[ i ] = b[ i ];
    
            }
    
        }
    
        // Texture unit allocation
    
        function allocTexUnits( textures, n ) {
    
            var r = arrayCacheI32[ n ];
    
            if ( r === undefined ) {
    
                r = new Int32Array( n );
                arrayCacheI32[ n ] = r;
    
            }
    
            for ( var i = 0; i !== n; ++ i )
                r[ i ] = textures.allocateTextureUnit();
    
            return r;
    
        }
    
        // --- Setters ---
    
        // Note: Defining these methods externally, because they come in a bunch
        // and this way their names minify.
    
        // Single scalar
    
        function setValue1f( gl, v ) {
    
            var cache = this.cache;
    
            if ( cache[ 0 ] === v ) return;
    
            gl.uniform1f( this.addr, v );
    
            cache[ 0 ] = v;
    
        }
    
        function setValue1i( gl, v ) {
    
            var cache = this.cache;
    
            if ( cache[ 0 ] === v ) return;
    
            gl.uniform1i( this.addr, v );
    
            cache[ 0 ] = v;
    
        }
    
        // Single float vector (from flat array or THREE.VectorN)
    
        function setValue2fv( gl, v ) {
    
            var cache = this.cache;
    
            if ( v.x !== undefined ) {
    
                if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {
    
                    gl.uniform2f( this.addr, v.x, v.y );
    
                    cache[ 0 ] = v.x;
                    cache[ 1 ] = v.y;
    
                }
    
            } else {
    
                if ( arraysEqual( cache, v ) ) return;
    
                gl.uniform2fv( this.addr, v );
    
                copyArray( cache, v );
    
            }
    
        }
    
        function setValue3fv( gl, v ) {
    
            var cache = this.cache;
    
            if ( v.x !== undefined ) {
    
                if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {
    
                    gl.uniform3f( this.addr, v.x, v.y, v.z );
    
                    cache[ 0 ] = v.x;
                    cache[ 1 ] = v.y;
                    cache[ 2 ] = v.z;
    
                }
    
            } else if ( v.r !== undefined ) {
    
                if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {
    
                    gl.uniform3f( this.addr, v.r, v.g, v.b );
    
                    cache[ 0 ] = v.r;
                    cache[ 1 ] = v.g;
                    cache[ 2 ] = v.b;
    
                }
    
            } else {
    
                if ( arraysEqual( cache, v ) ) return;
    
                gl.uniform3fv( this.addr, v );
    
                copyArray( cache, v );
    
            }
    
        }
    
        function setValue4fv( gl, v ) {
    
            var cache = this.cache;
    
            if ( v.x !== undefined ) {
    
                if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {
    
                    gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );
    
                    cache[ 0 ] = v.x;
                    cache[ 1 ] = v.y;
                    cache[ 2 ] = v.z;
                    cache[ 3 ] = v.w;
    
                }
    
            } else {
    
                if ( arraysEqual( cache, v ) ) return;
    
                gl.uniform4fv( this.addr, v );
    
                copyArray( cache, v );
    
            }
    
        }
    
        // Single matrix (from flat array or MatrixN)
    
        function setValue2fm( gl, v ) {
    
            var cache = this.cache;
            var elements = v.elements;
    
            if ( elements === undefined ) {
    
                if ( arraysEqual( cache, v ) ) return;
    
                gl.uniformMatrix2fv( this.addr, false, v );
    
                copyArray( cache, v );
    
            } else {
    
                if ( arraysEqual( cache, elements ) ) return;
    
                mat2array.set( elements );
    
                gl.uniformMatrix2fv( this.addr, false, mat2array );
    
                copyArray( cache, elements );
    
            }
    
        }
    
        function setValue3fm( gl, v ) {
    
            var cache = this.cache;
            var elements = v.elements;
    
            if ( elements === undefined ) {
    
                if ( arraysEqual( cache, v ) ) return;
    
                gl.uniformMatrix3fv( this.addr, false, v );
    
                copyArray( cache, v );
    
            } else {
    
                if ( arraysEqual( cache, elements ) ) return;
    
                mat3array.set( elements );
    
                gl.uniformMatrix3fv( this.addr, false, mat3array );
    
                copyArray( cache, elements );
    
            }
    
        }
    
        function setValue4fm( gl, v ) {
    
            var cache = this.cache;
            var elements = v.elements;
    
            if ( elements === undefined ) {
    
                if ( arraysEqual( cache, v ) ) return;
    
                gl.uniformMatrix4fv( this.addr, false, v );
    
                copyArray( cache, v );
    
            } else {
    
                if ( arraysEqual( cache, elements ) ) return;
    
                mat4array.set( elements );
    
                gl.uniformMatrix4fv( this.addr, false, mat4array );
    
                copyArray( cache, elements );
    
            }
    
        }
    
        // Single texture (2D / Cube)
    
        function setValueT1( gl, v, textures ) {
    
            var cache = this.cache;
            var unit = textures.allocateTextureUnit();
    
            if ( cache[ 0 ] !== unit ) {
    
                gl.uniform1i( this.addr, unit );
                cache[ 0 ] = unit;
    
            }
    
            textures.safeSetTexture2D( v || emptyTexture, unit );
    
        }
    
        function setValueT2DArray1( gl, v, textures ) {
    
            var cache = this.cache;
            var unit = textures.allocateTextureUnit();
    
            if ( cache[ 0 ] !== unit ) {
    
                gl.uniform1i( this.addr, unit );
                cache[ 0 ] = unit;
    
            }
    
            textures.setTexture2DArray( v || emptyTexture2dArray, unit );
    
        }
    
        function setValueT3D1( gl, v, textures ) {
    
            var cache = this.cache;
            var unit = textures.allocateTextureUnit();
    
            if ( cache[ 0 ] !== unit ) {
    
                gl.uniform1i( this.addr, unit );
                cache[ 0 ] = unit;
    
            }
    
            textures.setTexture3D( v || emptyTexture3d, unit );
    
        }
    
        function setValueT6( gl, v, textures ) {
    
            var cache = this.cache;
            var unit = textures.allocateTextureUnit();
    
            if ( cache[ 0 ] !== unit ) {
    
                gl.uniform1i( this.addr, unit );
                cache[ 0 ] = unit;
    
            }
    
            textures.safeSetTextureCube( v || emptyCubeTexture, unit );
    
        }
    
        // Integer / Boolean vectors or arrays thereof (always flat arrays)
    
        function setValue2iv( gl, v ) {
    
            var cache = this.cache;
    
            if ( arraysEqual( cache, v ) ) return;
    
            gl.uniform2iv( this.addr, v );
    
            copyArray( cache, v );
    
        }
    
        function setValue3iv( gl, v ) {
    
            var cache = this.cache;
    
            if ( arraysEqual( cache, v ) ) return;
    
            gl.uniform3iv( this.addr, v );
    
            copyArray( cache, v );
    
        }
    
        function setValue4iv( gl, v ) {
    
            var cache = this.cache;
    
            if ( arraysEqual( cache, v ) ) return;
    
            gl.uniform4iv( this.addr, v );
    
            copyArray( cache, v );
    
        }
    
        // Helper to pick the right setter for the singular case
    
        function getSingularSetter( type ) {
    
            switch ( type ) {
    
                case 0x1406: return setValue1f; // FLOAT
                case 0x8b50: return setValue2fv; // _VEC2
                case 0x8b51: return setValue3fv; // _VEC3
                case 0x8b52: return setValue4fv; // _VEC4
    
                case 0x8b5a: return setValue2fm; // _MAT2
                case 0x8b5b: return setValue3fm; // _MAT3
                case 0x8b5c: return setValue4fm; // _MAT4
    
                case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
                case 0x8b5f: return setValueT3D1; // SAMPLER_3D
                case 0x8b60: return setValueT6; // SAMPLER_CUBE
                case 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY
    
                case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
                case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
                case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
                case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4
    
            }
    
        }
    
        // Array of scalars
    
        function setValue1fv( gl, v ) {
    
            var cache = this.cache;
    
            if ( arraysEqual( cache, v ) ) return;
    
            gl.uniform1fv( this.addr, v );
    
            copyArray( cache, v );
    
        }
        function setValue1iv( gl, v ) {
    
            var cache = this.cache;
    
            if ( arraysEqual( cache, v ) ) return;
    
            gl.uniform1iv( this.addr, v );
    
            copyArray( cache, v );
    
        }
    
        // Array of vectors (flat or from THREE classes)
    
        function setValueV2a( gl, v ) {
    
            var cache = this.cache;
            var data = flatten( v, this.size, 2 );
    
            if ( arraysEqual( cache, data ) ) return;
    
            gl.uniform2fv( this.addr, data );
    
            this.updateCache( data );
    
        }
    
        function setValueV3a( gl, v ) {
    
            var cache = this.cache;
            var data = flatten( v, this.size, 3 );
    
            if ( arraysEqual( cache, data ) ) return;
    
            gl.uniform3fv( this.addr, data );
    
            this.updateCache( data );
    
        }
    
        function setValueV4a( gl, v ) {
    
            var cache = this.cache;
            var data = flatten( v, this.size, 4 );
    
            if ( arraysEqual( cache, data ) ) return;
    
            gl.uniform4fv( this.addr, data );
    
            this.updateCache( data );
    
        }
    
        // Array of matrices (flat or from THREE clases)
    
        function setValueM2a( gl, v ) {
    
            var cache = this.cache;
            var data = flatten( v, this.size, 4 );
    
            if ( arraysEqual( cache, data ) ) return;
    
            gl.uniformMatrix2fv( this.addr, false, data );
    
            this.updateCache( data );
    
        }
    
        function setValueM3a( gl, v ) {
    
            var cache = this.cache;
            var data = flatten( v, this.size, 9 );
    
            if ( arraysEqual( cache, data ) ) return;
    
            gl.uniformMatrix3fv( this.addr, false, data );
    
            this.updateCache( data );
    
        }
    
        function setValueM4a( gl, v ) {
    
            var cache = this.cache;
            var data = flatten( v, this.size, 16 );
    
            if ( arraysEqual( cache, data ) ) return;
    
            gl.uniformMatrix4fv( this.addr, false, data );
    
            this.updateCache( data );
    
        }
    
        // Array of textures (2D / Cube)
    
        function setValueT1a( gl, v, textures ) {
    
            var cache = this.cache;
            var n = v.length;
    
            var units = allocTexUnits( textures, n );
    
            if ( arraysEqual( cache, units ) === false ) {
    
                gl.uniform1iv( this.addr, units );
                copyArray( cache, units );
    
            }
    
            for ( var i = 0; i !== n; ++ i ) {
    
                textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );
    
            }
    
        }
    
        function setValueT6a( gl, v, textures ) {
    
            var cache = this.cache;
            var n = v.length;
    
            var units = allocTexUnits( textures, n );
    
            if ( arraysEqual( cache, units ) === false ) {
    
                gl.uniform1iv( this.addr, units );
                copyArray( cache, units );
    
            }
    
            for ( var i = 0; i !== n; ++ i ) {
    
                textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );
    
            }
    
        }
    
        // Helper to pick the right setter for a pure (bottom-level) array
    
        function getPureArraySetter( type ) {
    
            switch ( type ) {
    
                case 0x1406: return setValue1fv; // FLOAT
                case 0x8b50: return setValueV2a; // _VEC2
                case 0x8b51: return setValueV3a; // _VEC3
                case 0x8b52: return setValueV4a; // _VEC4
    
                case 0x8b5a: return setValueM2a; // _MAT2
                case 0x8b5b: return setValueM3a; // _MAT3
                case 0x8b5c: return setValueM4a; // _MAT4
    
                case 0x8b5e: return setValueT1a; // SAMPLER_2D
                case 0x8b60: return setValueT6a; // SAMPLER_CUBE
    
                case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
                case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
                case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
                case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4
    
            }
    
        }
    
        // --- Uniform Classes ---
    
        function SingleUniform( id, activeInfo, addr ) {
    
            this.id = id;
            this.addr = addr;
            this.cache = [];
            this.setValue = getSingularSetter( activeInfo.type );
    
            // this.path = activeInfo.name; // DEBUG
    
        }
    
        function PureArrayUniform( id, activeInfo, addr ) {
    
            this.id = id;
            this.addr = addr;
            this.cache = [];
            this.size = activeInfo.size;
            this.setValue = getPureArraySetter( activeInfo.type );
    
            // this.path = activeInfo.name; // DEBUG
    
        }
    
        PureArrayUniform.prototype.updateCache = function ( data ) {
    
            var cache = this.cache;
    
            if ( data instanceof Float32Array && cache.length !== data.length ) {
    
                this.cache = new Float32Array( data.length );
    
            }
    
            copyArray( cache, data );
    
        };
    
        function StructuredUniform( id ) {
    
            this.id = id;
    
            this.seq = [];
            this.map = {};
    
        }
    
        StructuredUniform.prototype.setValue = function ( gl, value, textures ) {
    
            var seq = this.seq;
    
            for ( var i = 0, n = seq.length; i !== n; ++ i ) {
    
                var u = seq[ i ];
                u.setValue( gl, value[ u.id ], textures );
    
            }
    
        };
    
        // --- Top-level ---
    
        // Parser - builds up the property tree from the path strings
    
        var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
    
        // extracts
        // 	- the identifier (member name or array index)
        //  - followed by an optional right bracket (found when array index)
        //  - followed by an optional left bracket or dot (type of subscript)
        //
        // Note: These portions can be read in a non-overlapping fashion and
        // allow straightforward parsing of the hierarchy that WebGL encodes
        // in the uniform names.
    
        function addUniform( container, uniformObject ) {
    
            container.seq.push( uniformObject );
            container.map[ uniformObject.id ] = uniformObject;
    
        }
    
        function parseUniform( activeInfo, addr, container ) {
    
            var path = activeInfo.name,
                pathLength = path.length;
    
            // reset RegExp object, because of the early exit of a previous run
            RePathPart.lastIndex = 0;
    
            while ( true ) {
    
                var match = RePathPart.exec( path ),
                    matchEnd = RePathPart.lastIndex,
    
                    id = match[ 1 ],
                    idIsIndex = match[ 2 ] === ']',
                    subscript = match[ 3 ];
    
                if ( idIsIndex ) id = id | 0; // convert to integer
    
                if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {
    
                    // bare name or "pure" bottom-level array "[0]" suffix
    
                    addUniform( container, subscript === undefined ?
                        new SingleUniform( id, activeInfo, addr ) :
                        new PureArrayUniform( id, activeInfo, addr ) );
    
                    break;
    
                } else {
    
                    // step into inner node / create it in case it doesn't exist
    
                    var map = container.map, next = map[ id ];
    
                    if ( next === undefined ) {
    
                        next = new StructuredUniform( id );
                        addUniform( container, next );
    
                    }
    
                    container = next;
    
                }
    
            }
    
        }
    
        // Root Container
    
        function WebGLUniforms( gl, program ) {
    
            this.seq = [];
            this.map = {};
    
            var n = gl.getProgramParameter( program, 35718 );
    
            for ( var i = 0; i < n; ++ i ) {
    
                var info = gl.getActiveUniform( program, i ),
                    addr = gl.getUniformLocation( program, info.name );
    
                parseUniform( info, addr, this );
    
            }
    
        }
    
        WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {
    
            var u = this.map[ name ];
    
            if ( u !== undefined ) u.setValue( gl, value, textures );
    
        };
    
        WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {
    
            var v = object[ name ];
    
            if ( v !== undefined ) this.setValue( gl, name, v );
    
        };
    
    
        // Static interface
    
        WebGLUniforms.upload = function ( gl, seq, values, textures ) {
    
            for ( var i = 0, n = seq.length; i !== n; ++ i ) {
    
                var u = seq[ i ],
                    v = values[ u.id ];
    
                if ( v.needsUpdate !== false ) {
    
                    // note: always updating when .needsUpdate is undefined
                    u.setValue( gl, v.value, textures );
    
                }
    
            }
    
        };
    
        WebGLUniforms.seqWithValue = function ( seq, values ) {
    
            var r = [];
    
            for ( var i = 0, n = seq.length; i !== n; ++ i ) {
    
                var u = seq[ i ];
                if ( u.id in values ) r.push( u );
    
            }
    
            return r;
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function addLineNumbers( string ) {
    
            var lines = string.split( '\n' );
    
            for ( var i = 0; i < lines.length; i ++ ) {
    
                lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];
    
            }
    
            return lines.join( '\n' );
    
        }
    
        function WebGLShader( gl, type, string ) {
    
            var shader = gl.createShader( type );
    
            gl.shaderSource( shader, string );
            gl.compileShader( shader );
    
            if ( gl.getShaderParameter( shader, 35713 ) === false ) {
    
                console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );
    
            }
    
            if ( gl.getShaderInfoLog( shader ) !== '' ) {
    
                console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === 35633 ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );
    
            }
    
            // --enable-privileged-webgl-extension
            // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
    
            return shader;
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        var programIdCount = 0;
    
        function getEncodingComponents( encoding ) {
    
            switch ( encoding ) {
    
                case LinearEncoding:
                    return [ 'Linear', '( value )' ];
                case sRGBEncoding:
                    return [ 'sRGB', '( value )' ];
                case RGBEEncoding:
                    return [ 'RGBE', '( value )' ];
                case RGBM7Encoding:
                    return [ 'RGBM', '( value, 7.0 )' ];
                case RGBM16Encoding:
                    return [ 'RGBM', '( value, 16.0 )' ];
                case RGBDEncoding:
                    return [ 'RGBD', '( value, 256.0 )' ];
                case GammaEncoding:
                    return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
                default:
                    throw new Error( 'unsupported encoding: ' + encoding );
    
            }
    
        }
    
        function getTexelDecodingFunction( functionName, encoding ) {
    
            var components = getEncodingComponents( encoding );
            return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';
    
        }
    
        function getTexelEncodingFunction( functionName, encoding ) {
    
            var components = getEncodingComponents( encoding );
            return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';
    
        }
    
        function getToneMappingFunction( functionName, toneMapping ) {
    
            var toneMappingName;
    
            switch ( toneMapping ) {
    
                case LinearToneMapping:
                    toneMappingName = 'Linear';
                    break;
    
                case ReinhardToneMapping:
                    toneMappingName = 'Reinhard';
                    break;
    
                case Uncharted2ToneMapping:
                    toneMappingName = 'Uncharted2';
                    break;
    
                case CineonToneMapping:
                    toneMappingName = 'OptimizedCineon';
                    break;
    
                case ACESFilmicToneMapping:
                    toneMappingName = 'ACESFilmic';
                    break;
    
                default:
                    throw new Error( 'unsupported toneMapping: ' + toneMapping );
    
            }
    
            return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
    
        }
    
        function generateExtensions( extensions, parameters, rendererExtensions ) {
    
            extensions = extensions || {};
    
            var chunks = [
                ( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || ( parameters.normalMap && ! parameters.objectSpaceNormalMap ) || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
                ( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
                ( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
                ( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
            ];
    
            return chunks.filter( filterEmptyLine ).join( '\n' );
    
        }
    
        function generateDefines( defines ) {
    
            var chunks = [];
    
            for ( var name in defines ) {
    
                var value = defines[ name ];
    
                if ( value === false ) continue;
    
                chunks.push( '#define ' + name + ' ' + value );
    
            }
    
            return chunks.join( '\n' );
    
        }
    
        function fetchAttributeLocations( gl, program ) {
    
            var attributes = {};
    
            var n = gl.getProgramParameter( program, 35721 );
    
            for ( var i = 0; i < n; i ++ ) {
    
                var info = gl.getActiveAttrib( program, i );
                var name = info.name;
    
                // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
    
                attributes[ name ] = gl.getAttribLocation( program, name );
    
            }
    
            return attributes;
    
        }
    
        function filterEmptyLine( string ) {
    
            return string !== '';
    
        }
    
        function replaceLightNums( string, parameters ) {
    
            return string
                .replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
                .replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
                .replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
                .replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
                .replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );
    
        }
    
        function replaceClippingPlaneNums( string, parameters ) {
    
            return string
                .replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
                .replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );
    
        }
    
        function parseIncludes( string ) {
    
            var pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
    
            function replace( match, include ) {
    
                var replace = ShaderChunk[ include ];
    
                if ( replace === undefined ) {
    
                    throw new Error( 'Can not resolve #include <' + include + '>' );
    
                }
    
                return parseIncludes( replace );
    
            }
    
            return string.replace( pattern, replace );
    
        }
    
        function unrollLoops( string ) {
    
            var pattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
    
            function replace( match, start, end, snippet ) {
    
                var unroll = '';
    
                for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {
    
                    unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );
    
                }
    
                return unroll;
    
            }
    
            return string.replace( pattern, replace );
    
        }
    
        function WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities, textures ) {
    
            var gl = renderer.context;
    
            var defines = material.defines;
    
            var vertexShader = shader.vertexShader;
            var fragmentShader = shader.fragmentShader;
    
            var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
    
            if ( parameters.shadowMapType === PCFShadowMap ) {
    
                shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
    
            } else if ( parameters.shadowMapType === PCFSoftShadowMap ) {
    
                shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
    
            }
    
            var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
            var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
            var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
    
            if ( parameters.envMap ) {
    
                switch ( material.envMap.mapping ) {
    
                    case CubeReflectionMapping:
                    case CubeRefractionMapping:
                        envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
                        break;
    
                    case CubeUVReflectionMapping:
                    case CubeUVRefractionMapping:
                        envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
                        break;
    
                    case EquirectangularReflectionMapping:
                    case EquirectangularRefractionMapping:
                        envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
                        break;
    
                    case SphericalReflectionMapping:
                        envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
                        break;
    
                }
    
                switch ( material.envMap.mapping ) {
    
                    case CubeRefractionMapping:
                    case EquirectangularRefractionMapping:
                        envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
                        break;
    
                }
    
                switch ( material.combine ) {
    
                    case MultiplyOperation:
                        envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
                        break;
    
                    case MixOperation:
                        envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
                        break;
    
                    case AddOperation:
                        envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
                        break;
    
                }
    
            }
    
            var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;
    
            // console.log( 'building new program ' );
    
            //
    
            var customExtensions = capabilities.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );
    
            var customDefines = generateDefines( defines );
    
            //
    
            var program = gl.createProgram();
    
            var prefixVertex, prefixFragment;
    
            if ( material.isRawShaderMaterial ) {
    
                prefixVertex = [
    
                    customDefines
    
                ].filter( filterEmptyLine ).join( '\n' );
    
                if ( prefixVertex.length > 0 ) {
    
                    prefixVertex += '\n';
    
                }
    
                prefixFragment = [
    
                    customExtensions,
                    customDefines
    
                ].filter( filterEmptyLine ).join( '\n' );
    
                if ( prefixFragment.length > 0 ) {
    
                    prefixFragment += '\n';
    
                }
    
            } else {
    
                prefixVertex = [
    
                    'precision ' + parameters.precision + ' float;',
                    'precision ' + parameters.precision + ' int;',
    
                    '#define SHADER_NAME ' + shader.name,
    
                    customDefines,
    
                    parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
    
                    '#define GAMMA_FACTOR ' + gammaFactorDefine,
    
                    '#define MAX_BONES ' + parameters.maxBones,
                    ( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
                    ( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',
    
                    parameters.map ? '#define USE_MAP' : '',
                    parameters.envMap ? '#define USE_ENVMAP' : '',
                    parameters.envMap ? '#define ' + envMapModeDefine : '',
                    parameters.lightMap ? '#define USE_LIGHTMAP' : '',
                    parameters.aoMap ? '#define USE_AOMAP' : '',
                    parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                    parameters.bumpMap ? '#define USE_BUMPMAP' : '',
                    parameters.normalMap ? '#define USE_NORMALMAP' : '',
                    ( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
                    parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
                    parameters.specularMap ? '#define USE_SPECULARMAP' : '',
                    parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                    parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
                    parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
    
                    parameters.vertexTangents ? '#define USE_TANGENT' : '',
                    parameters.vertexColors ? '#define USE_COLOR' : '',
    
                    parameters.flatShading ? '#define FLAT_SHADED' : '',
    
                    parameters.skinning ? '#define USE_SKINNING' : '',
                    parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
    
                    parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
                    parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
                    parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
                    parameters.flipSided ? '#define FLIP_SIDED' : '',
    
                    parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                    parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
    
                    parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
    
                    parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
                    parameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
    
                    'uniform mat4 modelMatrix;',
                    'uniform mat4 modelViewMatrix;',
                    'uniform mat4 projectionMatrix;',
                    'uniform mat4 viewMatrix;',
                    'uniform mat3 normalMatrix;',
                    'uniform vec3 cameraPosition;',
    
                    'attribute vec3 position;',
                    'attribute vec3 normal;',
                    'attribute vec2 uv;',
    
                    '#ifdef USE_TANGENT',
    
                    '	attribute vec4 tangent;',
    
                    '#endif',
    
                    '#ifdef USE_COLOR',
    
                    '	attribute vec3 color;',
    
                    '#endif',
    
                    '#ifdef USE_MORPHTARGETS',
    
                    '	attribute vec3 morphTarget0;',
                    '	attribute vec3 morphTarget1;',
                    '	attribute vec3 morphTarget2;',
                    '	attribute vec3 morphTarget3;',
    
                    '	#ifdef USE_MORPHNORMALS',
    
                    '		attribute vec3 morphNormal0;',
                    '		attribute vec3 morphNormal1;',
                    '		attribute vec3 morphNormal2;',
                    '		attribute vec3 morphNormal3;',
    
                    '	#else',
    
                    '		attribute vec3 morphTarget4;',
                    '		attribute vec3 morphTarget5;',
                    '		attribute vec3 morphTarget6;',
                    '		attribute vec3 morphTarget7;',
    
                    '	#endif',
    
                    '#endif',
    
                    '#ifdef USE_SKINNING',
    
                    '	attribute vec4 skinIndex;',
                    '	attribute vec4 skinWeight;',
    
                    '#endif',
    
                    '\n'
    
                ].filter( filterEmptyLine ).join( '\n' );
    
                prefixFragment = [
    
                    customExtensions,
    
                    'precision ' + parameters.precision + ' float;',
                    'precision ' + parameters.precision + ' int;',
    
                    '#define SHADER_NAME ' + shader.name,
    
                    customDefines,
    
                    parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer
    
                    '#define GAMMA_FACTOR ' + gammaFactorDefine,
    
                    ( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
                    ( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',
    
                    parameters.map ? '#define USE_MAP' : '',
                    parameters.matcap ? '#define USE_MATCAP' : '',
                    parameters.envMap ? '#define USE_ENVMAP' : '',
                    parameters.envMap ? '#define ' + envMapTypeDefine : '',
                    parameters.envMap ? '#define ' + envMapModeDefine : '',
                    parameters.envMap ? '#define ' + envMapBlendingDefine : '',
                    parameters.lightMap ? '#define USE_LIGHTMAP' : '',
                    parameters.aoMap ? '#define USE_AOMAP' : '',
                    parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                    parameters.bumpMap ? '#define USE_BUMPMAP' : '',
                    parameters.normalMap ? '#define USE_NORMALMAP' : '',
                    ( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
                    parameters.specularMap ? '#define USE_SPECULARMAP' : '',
                    parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                    parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
                    parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
    
                    parameters.vertexTangents ? '#define USE_TANGENT' : '',
                    parameters.vertexColors ? '#define USE_COLOR' : '',
    
                    parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
    
                    parameters.flatShading ? '#define FLAT_SHADED' : '',
    
                    parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
                    parameters.flipSided ? '#define FLIP_SIDED' : '',
    
                    parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                    parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
    
                    parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
    
                    parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
    
                    parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
                    parameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
    
                    parameters.envMap && ( capabilities.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',
    
                    'uniform mat4 viewMatrix;',
                    'uniform vec3 cameraPosition;',
    
                    ( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
                    ( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
                    ( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',
    
                    parameters.dithering ? '#define DITHERING' : '',
    
                    ( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?
                        ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
                    parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
                    parameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
                    parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
                    parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
                    parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',
    
                    parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',
    
                    '\n'
    
                ].filter( filterEmptyLine ).join( '\n' );
    
            }
    
            vertexShader = parseIncludes( vertexShader );
            vertexShader = replaceLightNums( vertexShader, parameters );
            vertexShader = replaceClippingPlaneNums( vertexShader, parameters );
    
            fragmentShader = parseIncludes( fragmentShader );
            fragmentShader = replaceLightNums( fragmentShader, parameters );
            fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );
    
            vertexShader = unrollLoops( vertexShader );
            fragmentShader = unrollLoops( fragmentShader );
    
            if ( capabilities.isWebGL2 && ! material.isRawShaderMaterial ) {
    
                var isGLSL3ShaderMaterial = false;
    
                var versionRegex = /^\s*#version\s+300\s+es\s*\n/;
    
                if ( material.isShaderMaterial &&
                    vertexShader.match( versionRegex ) !== null &&
                    fragmentShader.match( versionRegex ) !== null ) {
    
                    isGLSL3ShaderMaterial = true;
    
                    vertexShader = vertexShader.replace( versionRegex, '' );
                    fragmentShader = fragmentShader.replace( versionRegex, '' );
    
                }
    
                // GLSL 3.0 conversion
                prefixVertex = [
                    '#version 300 es\n',
                    '#define attribute in',
                    '#define varying out',
                    '#define texture2D texture'
                ].join( '\n' ) + '\n' + prefixVertex;
    
                prefixFragment = [
                    '#version 300 es\n',
                    '#define varying in',
                    isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
                    isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
                    '#define gl_FragDepthEXT gl_FragDepth',
                    '#define texture2D texture',
                    '#define textureCube texture',
                    '#define texture2DProj textureProj',
                    '#define texture2DLodEXT textureLod',
                    '#define texture2DProjLodEXT textureProjLod',
                    '#define textureCubeLodEXT textureLod',
                    '#define texture2DGradEXT textureGrad',
                    '#define texture2DProjGradEXT textureProjGrad',
                    '#define textureCubeGradEXT textureGrad'
                ].join( '\n' ) + '\n' + prefixFragment;
    
            }
    
            var vertexGlsl = prefixVertex + vertexShader;
            var fragmentGlsl = prefixFragment + fragmentShader;
    
            // console.log( '*VERTEX*', vertexGlsl );
            // console.log( '*FRAGMENT*', fragmentGlsl );
    
            var glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
            var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );
    
            gl.attachShader( program, glVertexShader );
            gl.attachShader( program, glFragmentShader );
    
            // Force a particular attribute to index 0.
    
            if ( material.index0AttributeName !== undefined ) {
    
                gl.bindAttribLocation( program, 0, material.index0AttributeName );
    
            } else if ( parameters.morphTargets === true ) {
    
                // programs with morphTargets displace position out of attribute 0
                gl.bindAttribLocation( program, 0, 'position' );
    
            }
    
            gl.linkProgram( program );
    
            var programLog = gl.getProgramInfoLog( program ).trim();
            var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
            var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();
    
            var runnable = true;
            var haveDiagnostics = true;
    
            // console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
            // console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );
    
            if ( gl.getProgramParameter( program, 35714 ) === false ) {
    
                runnable = false;
    
                console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );
    
            } else if ( programLog !== '' ) {
    
                console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );
    
            } else if ( vertexLog === '' || fragmentLog === '' ) {
    
                haveDiagnostics = false;
    
            }
    
            if ( haveDiagnostics ) {
    
                this.diagnostics = {
    
                    runnable: runnable,
                    material: material,
    
                    programLog: programLog,
    
                    vertexShader: {
    
                        log: vertexLog,
                        prefix: prefixVertex
    
                    },
    
                    fragmentShader: {
    
                        log: fragmentLog,
                        prefix: prefixFragment
    
                    }
    
                };
    
            }
    
            // clean up
    
            gl.deleteShader( glVertexShader );
            gl.deleteShader( glFragmentShader );
    
            // set up caching for uniform locations
    
            var cachedUniforms;
    
            this.getUniforms = function () {
    
                if ( cachedUniforms === undefined ) {
    
                    cachedUniforms = new WebGLUniforms( gl, program, textures );
    
                }
    
                return cachedUniforms;
    
            };
    
            // set up caching for attribute locations
    
            var cachedAttributes;
    
            this.getAttributes = function () {
    
                if ( cachedAttributes === undefined ) {
    
                    cachedAttributes = fetchAttributeLocations( gl, program );
    
                }
    
                return cachedAttributes;
    
            };
    
            // free resource
    
            this.destroy = function () {
    
                gl.deleteProgram( program );
                this.program = undefined;
    
            };
    
            // DEPRECATED
    
            Object.defineProperties( this, {
    
                uniforms: {
                    get: function () {
    
                        console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
                        return this.getUniforms();
    
                    }
                },
    
                attributes: {
                    get: function () {
    
                        console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
                        return this.getAttributes();
    
                    }
                }
    
            } );
    
    
            //
    
            this.name = shader.name;
            this.id = programIdCount ++;
            this.code = code;
            this.usedTimes = 1;
            this.program = program;
            this.vertexShader = glVertexShader;
            this.fragmentShader = glFragmentShader;
    
            return this;
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLPrograms( renderer, extensions, capabilities, textures ) {
    
            var programs = [];
    
            var shaderIDs = {
                MeshDepthMaterial: 'depth',
                MeshDistanceMaterial: 'distanceRGBA',
                MeshNormalMaterial: 'normal',
                MeshBasicMaterial: 'basic',
                MeshLambertMaterial: 'lambert',
                MeshPhongMaterial: 'phong',
                MeshToonMaterial: 'phong',
                MeshStandardMaterial: 'physical',
                MeshPhysicalMaterial: 'physical',
                MeshMatcapMaterial: 'matcap',
                LineBasicMaterial: 'basic',
                LineDashedMaterial: 'dashed',
                PointsMaterial: 'points',
                ShadowMaterial: 'shadow',
                SpriteMaterial: 'sprite'
            };
    
            var parameterNames = [
                "precision", "supportsVertexTextures", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding",
                "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap",
                "roughnessMap", "metalnessMap", "gradientMap",
                "alphaMap", "combine", "vertexColors", "vertexTangents", "fog", "useFog", "fogExp",
                "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
                "maxBones", "useVertexTexture", "morphTargets", "morphNormals",
                "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
                "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
                "shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
                "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
            ];
    
    
            function allocateBones( object ) {
    
                var skeleton = object.skeleton;
                var bones = skeleton.bones;
    
                if ( capabilities.floatVertexTextures ) {
    
                    return 1024;
    
                } else {
    
                    // default for when object is not specified
                    // ( for example when prebuilding shader to be used with multiple objects )
                    //
                    //  - leave some extra space for other uniforms
                    //  - limit here is ANGLE's 254 max uniform vectors
                    //    (up to 54 should be safe)
    
                    var nVertexUniforms = capabilities.maxVertexUniforms;
                    var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );
    
                    var maxBones = Math.min( nVertexMatrices, bones.length );
    
                    if ( maxBones < bones.length ) {
    
                        console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
                        return 0;
    
                    }
    
                    return maxBones;
    
                }
    
            }
    
            function getTextureEncodingFromMap( map, gammaOverrideLinear ) {
    
                var encoding;
    
                if ( ! map ) {
    
                    encoding = LinearEncoding;
    
                } else if ( map.isTexture ) {
    
                    encoding = map.encoding;
    
                } else if ( map.isWebGLRenderTarget ) {
    
                    console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
                    encoding = map.texture.encoding;
    
                }
    
                // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
                if ( encoding === LinearEncoding && gammaOverrideLinear ) {
    
                    encoding = GammaEncoding;
    
                }
    
                return encoding;
    
            }
    
            this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {
    
                var shaderID = shaderIDs[ material.type ];
    
                // heuristics to create shader parameters according to lights in the scene
                // (not to blow over maxLights budget)
    
                var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
                var precision = capabilities.precision;
    
                if ( material.precision !== null ) {
    
                    precision = capabilities.getMaxPrecision( material.precision );
    
                    if ( precision !== material.precision ) {
    
                        console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );
    
                    }
    
                }
    
                var currentRenderTarget = renderer.getRenderTarget();
    
                var parameters = {
    
                    shaderID: shaderID,
    
                    precision: precision,
                    supportsVertexTextures: capabilities.vertexTextures,
                    outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
                    map: !! material.map,
                    mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
                    matcap: !! material.matcap,
                    matcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),
                    envMap: !! material.envMap,
                    envMapMode: material.envMap && material.envMap.mapping,
                    envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
                    envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
                    lightMap: !! material.lightMap,
                    aoMap: !! material.aoMap,
                    emissiveMap: !! material.emissiveMap,
                    emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
                    bumpMap: !! material.bumpMap,
                    normalMap: !! material.normalMap,
                    objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
                    displacementMap: !! material.displacementMap,
                    roughnessMap: !! material.roughnessMap,
                    metalnessMap: !! material.metalnessMap,
                    specularMap: !! material.specularMap,
                    alphaMap: !! material.alphaMap,
    
                    gradientMap: !! material.gradientMap,
    
                    combine: material.combine,
    
                    vertexTangents: ( material.normalMap && material.vertexTangents ),
                    vertexColors: material.vertexColors,
    
                    fog: !! fog,
                    useFog: material.fog,
                    fogExp: ( fog && fog.isFogExp2 ),
    
                    flatShading: material.flatShading,
    
                    sizeAttenuation: material.sizeAttenuation,
                    logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,
    
                    skinning: material.skinning && maxBones > 0,
                    maxBones: maxBones,
                    useVertexTexture: capabilities.floatVertexTextures,
    
                    morphTargets: material.morphTargets,
                    morphNormals: material.morphNormals,
                    maxMorphTargets: renderer.maxMorphTargets,
                    maxMorphNormals: renderer.maxMorphNormals,
    
                    numDirLights: lights.directional.length,
                    numPointLights: lights.point.length,
                    numSpotLights: lights.spot.length,
                    numRectAreaLights: lights.rectArea.length,
                    numHemiLights: lights.hemi.length,
    
                    numClippingPlanes: nClipPlanes,
                    numClipIntersection: nClipIntersection,
    
                    dithering: material.dithering,
    
                    shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
                    shadowMapType: renderer.shadowMap.type,
    
                    toneMapping: renderer.toneMapping,
                    physicallyCorrectLights: renderer.physicallyCorrectLights,
    
                    premultipliedAlpha: material.premultipliedAlpha,
    
                    alphaTest: material.alphaTest,
                    doubleSided: material.side === DoubleSide,
                    flipSided: material.side === BackSide,
    
                    depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false
    
                };
    
                return parameters;
    
            };
    
            this.getProgramCode = function ( material, parameters ) {
    
                var array = [];
    
                if ( parameters.shaderID ) {
    
                    array.push( parameters.shaderID );
    
                } else {
    
                    array.push( material.fragmentShader );
                    array.push( material.vertexShader );
    
                }
    
                if ( material.defines !== undefined ) {
    
                    for ( var name in material.defines ) {
    
                        array.push( name );
                        array.push( material.defines[ name ] );
    
                    }
    
                }
    
                for ( var i = 0; i < parameterNames.length; i ++ ) {
    
                    array.push( parameters[ parameterNames[ i ] ] );
    
                }
    
                array.push( material.onBeforeCompile.toString() );
    
                array.push( renderer.gammaOutput );
    
                array.push( renderer.gammaFactor );
    
                return array.join();
    
            };
    
            this.acquireProgram = function ( material, shader, parameters, code ) {
    
                var program;
    
                // Check if code has been already compiled
                for ( var p = 0, pl = programs.length; p < pl; p ++ ) {
    
                    var programInfo = programs[ p ];
    
                    if ( programInfo.code === code ) {
    
                        program = programInfo;
                        ++ program.usedTimes;
    
                        break;
    
                    }
    
                }
    
                if ( program === undefined ) {
    
                    program = new WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities, textures );
                    programs.push( program );
    
                }
    
                return program;
    
            };
    
            this.releaseProgram = function ( program ) {
    
                if ( -- program.usedTimes === 0 ) {
    
                    // Remove from unordered set
                    var i = programs.indexOf( program );
                    programs[ i ] = programs[ programs.length - 1 ];
                    programs.pop();
    
                    // Free WebGL resources
                    program.destroy();
    
                }
    
            };
    
            // Exposed for resource monitoring & error feedback via renderer.info:
            this.programs = programs;
    
        }
    
        /**
         * @author fordacious / fordacious.github.io
         */
    
        function WebGLProperties() {
    
            var properties = new WeakMap();
    
            function get( object ) {
    
                var map = properties.get( object );
    
                if ( map === undefined ) {
    
                    map = {};
                    properties.set( object, map );
    
                }
    
                return map;
    
            }
    
            function remove( object ) {
    
                properties.delete( object );
    
            }
    
            function update( object, key, value ) {
    
                properties.get( object )[ key ] = value;
    
            }
    
            function dispose() {
    
                properties = new WeakMap();
    
            }
    
            return {
                get: get,
                remove: remove,
                update: update,
                dispose: dispose
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function painterSortStable( a, b ) {
    
            if ( a.groupOrder !== b.groupOrder ) {
    
                return a.groupOrder - b.groupOrder;
    
            } else if ( a.renderOrder !== b.renderOrder ) {
    
                return a.renderOrder - b.renderOrder;
    
            } else if ( a.program !== b.program ) {
    
                return a.program.id - b.program.id;
    
            } else if ( a.material.id !== b.material.id ) {
    
                return a.material.id - b.material.id;
    
            } else if ( a.z !== b.z ) {
    
                return a.z - b.z;
    
            } else {
    
                return a.id - b.id;
    
            }
    
        }
    
        function reversePainterSortStable( a, b ) {
    
            if ( a.groupOrder !== b.groupOrder ) {
    
                return a.groupOrder - b.groupOrder;
    
            } else if ( a.renderOrder !== b.renderOrder ) {
    
                return a.renderOrder - b.renderOrder;
    
            } else if ( a.z !== b.z ) {
    
                return b.z - a.z;
    
            } else {
    
                return a.id - b.id;
    
            }
    
        }
    
    
        function WebGLRenderList() {
    
            var renderItems = [];
            var renderItemsIndex = 0;
    
            var opaque = [];
            var transparent = [];
    
            var defaultProgram = { id: - 1 };
    
            function init() {
    
                renderItemsIndex = 0;
    
                opaque.length = 0;
                transparent.length = 0;
    
            }
    
            function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {
    
                var renderItem = renderItems[ renderItemsIndex ];
    
                if ( renderItem === undefined ) {
    
                    renderItem = {
                        id: object.id,
                        object: object,
                        geometry: geometry,
                        material: material,
                        program: material.program || defaultProgram,
                        groupOrder: groupOrder,
                        renderOrder: object.renderOrder,
                        z: z,
                        group: group
                    };
    
                    renderItems[ renderItemsIndex ] = renderItem;
    
                } else {
    
                    renderItem.id = object.id;
                    renderItem.object = object;
                    renderItem.geometry = geometry;
                    renderItem.material = material;
                    renderItem.program = material.program || defaultProgram;
                    renderItem.groupOrder = groupOrder;
                    renderItem.renderOrder = object.renderOrder;
                    renderItem.z = z;
                    renderItem.group = group;
    
                }
    
                renderItemsIndex ++;
    
                return renderItem;
    
            }
    
            function push( object, geometry, material, groupOrder, z, group ) {
    
                var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
    
                ( material.transparent === true ? transparent : opaque ).push( renderItem );
    
            }
    
            function unshift( object, geometry, material, groupOrder, z, group ) {
    
                var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
    
                ( material.transparent === true ? transparent : opaque ).unshift( renderItem );
    
            }
    
            function sort() {
    
                if ( opaque.length > 1 ) opaque.sort( painterSortStable );
                if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );
    
            }
    
            return {
                opaque: opaque,
                transparent: transparent,
    
                init: init,
                push: push,
                unshift: unshift,
    
                sort: sort
            };
    
        }
    
        function WebGLRenderLists() {
    
            var lists = {};
    
            function onSceneDispose( event ) {
    
                var scene = event.target;
    
                scene.removeEventListener( 'dispose', onSceneDispose );
    
                delete lists[ scene.id ];
    
            }
    
            function get( scene, camera ) {
    
                var cameras = lists[ scene.id ];
                var list;
                if ( cameras === undefined ) {
    
                    list = new WebGLRenderList();
                    lists[ scene.id ] = {};
                    lists[ scene.id ][ camera.id ] = list;
    
                    scene.addEventListener( 'dispose', onSceneDispose );
    
                } else {
    
                    list = cameras[ camera.id ];
                    if ( list === undefined ) {
    
                        list = new WebGLRenderList();
                        cameras[ camera.id ] = list;
    
                    }
    
                }
    
                return list;
    
            }
    
            function dispose() {
    
                lists = {};
    
            }
    
            return {
                get: get,
                dispose: dispose
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function UniformsCache() {
    
            var lights = {};
    
            return {
    
                get: function ( light ) {
    
                    if ( lights[ light.id ] !== undefined ) {
    
                        return lights[ light.id ];
    
                    }
    
                    var uniforms;
    
                    switch ( light.type ) {
    
                        case 'DirectionalLight':
                            uniforms = {
                                direction: new Vector3(),
                                color: new Color(),
    
                                shadow: false,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Vector2()
                            };
                            break;
    
                        case 'SpotLight':
                            uniforms = {
                                position: new Vector3(),
                                direction: new Vector3(),
                                color: new Color(),
                                distance: 0,
                                coneCos: 0,
                                penumbraCos: 0,
                                decay: 0,
    
                                shadow: false,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Vector2()
                            };
                            break;
    
                        case 'PointLight':
                            uniforms = {
                                position: new Vector3(),
                                color: new Color(),
                                distance: 0,
                                decay: 0,
    
                                shadow: false,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Vector2(),
                                shadowCameraNear: 1,
                                shadowCameraFar: 1000
                            };
                            break;
    
                        case 'HemisphereLight':
                            uniforms = {
                                direction: new Vector3(),
                                skyColor: new Color(),
                                groundColor: new Color()
                            };
                            break;
    
                        case 'RectAreaLight':
                            uniforms = {
                                color: new Color(),
                                position: new Vector3(),
                                halfWidth: new Vector3(),
                                halfHeight: new Vector3()
                                // TODO (abelnation): set RectAreaLight shadow uniforms
                            };
                            break;
    
                    }
    
                    lights[ light.id ] = uniforms;
    
                    return uniforms;
    
                }
    
            };
    
        }
    
        var count = 0;
    
        function WebGLLights() {
    
            var cache = new UniformsCache();
    
            var state = {
    
                id: count ++,
    
                hash: {
                    stateID: - 1,
                    directionalLength: - 1,
                    pointLength: - 1,
                    spotLength: - 1,
                    rectAreaLength: - 1,
                    hemiLength: - 1,
                    shadowsLength: - 1
                },
    
                ambient: [ 0, 0, 0 ],
                directional: [],
                directionalShadowMap: [],
                directionalShadowMatrix: [],
                spot: [],
                spotShadowMap: [],
                spotShadowMatrix: [],
                rectArea: [],
                point: [],
                pointShadowMap: [],
                pointShadowMatrix: [],
                hemi: []
    
            };
    
            var vector3 = new Vector3();
            var matrix4 = new Matrix4();
            var matrix42 = new Matrix4();
    
            function setup( lights, shadows, camera ) {
    
                var r = 0, g = 0, b = 0;
    
                var directionalLength = 0;
                var pointLength = 0;
                var spotLength = 0;
                var rectAreaLength = 0;
                var hemiLength = 0;
    
                var viewMatrix = camera.matrixWorldInverse;
    
                for ( var i = 0, l = lights.length; i < l; i ++ ) {
    
                    var light = lights[ i ];
    
                    var color = light.color;
                    var intensity = light.intensity;
                    var distance = light.distance;
    
                    var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;
    
                    if ( light.isAmbientLight ) {
    
                        r += color.r * intensity;
                        g += color.g * intensity;
                        b += color.b * intensity;
    
                    } else if ( light.isDirectionalLight ) {
    
                        var uniforms = cache.get( light );
    
                        uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
                        uniforms.direction.setFromMatrixPosition( light.matrixWorld );
                        vector3.setFromMatrixPosition( light.target.matrixWorld );
                        uniforms.direction.sub( vector3 );
                        uniforms.direction.transformDirection( viewMatrix );
    
                        uniforms.shadow = light.castShadow;
    
                        if ( light.castShadow ) {
    
                            var shadow = light.shadow;
    
                            uniforms.shadowBias = shadow.bias;
                            uniforms.shadowRadius = shadow.radius;
                            uniforms.shadowMapSize = shadow.mapSize;
    
                        }
    
                        state.directionalShadowMap[ directionalLength ] = shadowMap;
                        state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
                        state.directional[ directionalLength ] = uniforms;
    
                        directionalLength ++;
    
                    } else if ( light.isSpotLight ) {
    
                        var uniforms = cache.get( light );
    
                        uniforms.position.setFromMatrixPosition( light.matrixWorld );
                        uniforms.position.applyMatrix4( viewMatrix );
    
                        uniforms.color.copy( color ).multiplyScalar( intensity );
                        uniforms.distance = distance;
    
                        uniforms.direction.setFromMatrixPosition( light.matrixWorld );
                        vector3.setFromMatrixPosition( light.target.matrixWorld );
                        uniforms.direction.sub( vector3 );
                        uniforms.direction.transformDirection( viewMatrix );
    
                        uniforms.coneCos = Math.cos( light.angle );
                        uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
                        uniforms.decay = light.decay;
    
                        uniforms.shadow = light.castShadow;
    
                        if ( light.castShadow ) {
    
                            var shadow = light.shadow;
    
                            uniforms.shadowBias = shadow.bias;
                            uniforms.shadowRadius = shadow.radius;
                            uniforms.shadowMapSize = shadow.mapSize;
    
                        }
    
                        state.spotShadowMap[ spotLength ] = shadowMap;
                        state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
                        state.spot[ spotLength ] = uniforms;
    
                        spotLength ++;
    
                    } else if ( light.isRectAreaLight ) {
    
                        var uniforms = cache.get( light );
    
                        // (a) intensity is the total visible light emitted
                        //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
    
                        // (b) intensity is the brightness of the light
                        uniforms.color.copy( color ).multiplyScalar( intensity );
    
                        uniforms.position.setFromMatrixPosition( light.matrixWorld );
                        uniforms.position.applyMatrix4( viewMatrix );
    
                        // extract local rotation of light to derive width/height half vectors
                        matrix42.identity();
                        matrix4.copy( light.matrixWorld );
                        matrix4.premultiply( viewMatrix );
                        matrix42.extractRotation( matrix4 );
    
                        uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
                        uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
    
                        uniforms.halfWidth.applyMatrix4( matrix42 );
                        uniforms.halfHeight.applyMatrix4( matrix42 );
    
                        // TODO (abelnation): RectAreaLight distance?
                        // uniforms.distance = distance;
    
                        state.rectArea[ rectAreaLength ] = uniforms;
    
                        rectAreaLength ++;
    
                    } else if ( light.isPointLight ) {
    
                        var uniforms = cache.get( light );
    
                        uniforms.position.setFromMatrixPosition( light.matrixWorld );
                        uniforms.position.applyMatrix4( viewMatrix );
    
                        uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
                        uniforms.distance = light.distance;
                        uniforms.decay = light.decay;
    
                        uniforms.shadow = light.castShadow;
    
                        if ( light.castShadow ) {
    
                            var shadow = light.shadow;
    
                            uniforms.shadowBias = shadow.bias;
                            uniforms.shadowRadius = shadow.radius;
                            uniforms.shadowMapSize = shadow.mapSize;
                            uniforms.shadowCameraNear = shadow.camera.near;
                            uniforms.shadowCameraFar = shadow.camera.far;
    
                        }
    
                        state.pointShadowMap[ pointLength ] = shadowMap;
                        state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
                        state.point[ pointLength ] = uniforms;
    
                        pointLength ++;
    
                    } else if ( light.isHemisphereLight ) {
    
                        var uniforms = cache.get( light );
    
                        uniforms.direction.setFromMatrixPosition( light.matrixWorld );
                        uniforms.direction.transformDirection( viewMatrix );
                        uniforms.direction.normalize();
    
                        uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
                        uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );
    
                        state.hemi[ hemiLength ] = uniforms;
    
                        hemiLength ++;
    
                    }
    
                }
    
                state.ambient[ 0 ] = r;
                state.ambient[ 1 ] = g;
                state.ambient[ 2 ] = b;
    
                state.directional.length = directionalLength;
                state.spot.length = spotLength;
                state.rectArea.length = rectAreaLength;
                state.point.length = pointLength;
                state.hemi.length = hemiLength;
    
                state.hash.stateID = state.id;
                state.hash.directionalLength = directionalLength;
                state.hash.pointLength = pointLength;
                state.hash.spotLength = spotLength;
                state.hash.rectAreaLength = rectAreaLength;
                state.hash.hemiLength = hemiLength;
                state.hash.shadowsLength = shadows.length;
    
            }
    
            return {
                setup: setup,
                state: state
            };
    
        }
    
        /**
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        function WebGLRenderState() {
    
            var lights = new WebGLLights();
    
            var lightsArray = [];
            var shadowsArray = [];
    
            function init() {
    
                lightsArray.length = 0;
                shadowsArray.length = 0;
    
            }
    
            function pushLight( light ) {
    
                lightsArray.push( light );
    
            }
    
            function pushShadow( shadowLight ) {
    
                shadowsArray.push( shadowLight );
    
            }
    
            function setupLights( camera ) {
    
                lights.setup( lightsArray, shadowsArray, camera );
    
            }
    
            var state = {
                lightsArray: lightsArray,
                shadowsArray: shadowsArray,
    
                lights: lights
            };
    
            return {
                init: init,
                state: state,
                setupLights: setupLights,
    
                pushLight: pushLight,
                pushShadow: pushShadow
            };
    
        }
    
        function WebGLRenderStates() {
    
            var renderStates = {};
    
            function onSceneDispose( event ) {
    
                var scene = event.target;
    
                scene.removeEventListener( 'dispose', onSceneDispose );
    
                delete renderStates[ scene.id ];
    
            }
    
            function get( scene, camera ) {
    
                var renderState;
    
                if ( renderStates[ scene.id ] === undefined ) {
    
                    renderState = new WebGLRenderState();
                    renderStates[ scene.id ] = {};
                    renderStates[ scene.id ][ camera.id ] = renderState;
    
                    scene.addEventListener( 'dispose', onSceneDispose );
    
                } else {
    
                    if ( renderStates[ scene.id ][ camera.id ] === undefined ) {
    
                        renderState = new WebGLRenderState();
                        renderStates[ scene.id ][ camera.id ] = renderState;
    
                    } else {
    
                        renderState = renderStates[ scene.id ][ camera.id ];
    
                    }
    
                }
    
                return renderState;
    
            }
    
            function dispose() {
    
                renderStates = {};
    
            }
    
            return {
                get: get,
                dispose: dispose
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author bhouston / https://clara.io
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *
         *  opacity: <float>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>
         * }
         */
    
        function MeshDepthMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'MeshDepthMaterial';
    
            this.depthPacking = BasicDepthPacking;
    
            this.skinning = false;
            this.morphTargets = false;
    
            this.map = null;
    
            this.alphaMap = null;
    
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
    
            this.wireframe = false;
            this.wireframeLinewidth = 1;
    
            this.fog = false;
            this.lights = false;
    
            this.setValues( parameters );
    
        }
    
        MeshDepthMaterial.prototype = Object.create( Material.prototype );
        MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
    
        MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
    
        MeshDepthMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.depthPacking = source.depthPacking;
    
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
    
            this.map = source.map;
    
            this.alphaMap = source.alphaMap;
    
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
    
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
    
            return this;
    
        };
    
        /**
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *
         *  referencePosition: <float>,
         *  nearDistance: <float>,
         *  farDistance: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>
         *
         * }
         */
    
        function MeshDistanceMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'MeshDistanceMaterial';
    
            this.referencePosition = new Vector3();
            this.nearDistance = 1;
            this.farDistance = 1000;
    
            this.skinning = false;
            this.morphTargets = false;
    
            this.map = null;
    
            this.alphaMap = null;
    
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
    
            this.fog = false;
            this.lights = false;
    
            this.setValues( parameters );
    
        }
    
        MeshDistanceMaterial.prototype = Object.create( Material.prototype );
        MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
    
        MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
    
        MeshDistanceMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.referencePosition.copy( source.referencePosition );
            this.nearDistance = source.nearDistance;
            this.farDistance = source.farDistance;
    
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
    
            this.map = source.map;
    
            this.alphaMap = source.alphaMap;
    
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
    
            return this;
    
        };
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {
    
            var _frustum = new Frustum(),
                _projScreenMatrix = new Matrix4(),
    
                _shadowMapSize = new Vector2(),
                _maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),
    
                _lookTarget = new Vector3(),
                _lightPositionWorld = new Vector3(),
    
                _MorphingFlag = 1,
                _SkinningFlag = 2,
    
                _NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,
    
                _depthMaterials = new Array( _NumberOfMaterialVariants ),
                _distanceMaterials = new Array( _NumberOfMaterialVariants ),
    
                _materialCache = {};
    
            var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
    
            var cubeDirections = [
                new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
                new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
            ];
    
            var cubeUps = [
                new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
                new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
            ];
    
            var cube2DViewPorts = [
                new Vector4(), new Vector4(), new Vector4(),
                new Vector4(), new Vector4(), new Vector4()
            ];
    
            // init
    
            for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {
    
                var useMorphing = ( i & _MorphingFlag ) !== 0;
                var useSkinning = ( i & _SkinningFlag ) !== 0;
    
                var depthMaterial = new MeshDepthMaterial( {
    
                    depthPacking: RGBADepthPacking,
    
                    morphTargets: useMorphing,
                    skinning: useSkinning
    
                } );
    
                _depthMaterials[ i ] = depthMaterial;
    
                //
    
                var distanceMaterial = new MeshDistanceMaterial( {
    
                    morphTargets: useMorphing,
                    skinning: useSkinning
    
                } );
    
                _distanceMaterials[ i ] = distanceMaterial;
    
            }
    
            //
    
            var scope = this;
    
            this.enabled = false;
    
            this.autoUpdate = true;
            this.needsUpdate = false;
    
            this.type = PCFShadowMap;
    
            this.render = function ( lights, scene, camera ) {
    
                if ( scope.enabled === false ) return;
                if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;
    
                if ( lights.length === 0 ) return;
    
                var currentRenderTarget = _renderer.getRenderTarget();
    
                var _state = _renderer.state;
    
                // Set GL state for depth map.
                _state.setBlending( NoBlending );
                _state.buffers.color.setClear( 1, 1, 1, 1 );
                _state.buffers.depth.setTest( true );
                _state.setScissorTest( false );
    
                // render depth map
    
                var faceCount;
    
                for ( var i = 0, il = lights.length; i < il; i ++ ) {
    
                    var light = lights[ i ];
                    var shadow = light.shadow;
                    var isPointLight = light && light.isPointLight;
    
                    if ( shadow === undefined ) {
    
                        console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
                        continue;
    
                    }
    
                    var shadowCamera = shadow.camera;
    
                    _shadowMapSize.copy( shadow.mapSize );
                    _shadowMapSize.min( _maxShadowMapSize );
    
                    if ( isPointLight ) {
    
                        var vpWidth = _shadowMapSize.x;
                        var vpHeight = _shadowMapSize.y;
    
                        // These viewports map a cube-map onto a 2D texture with the
                        // following orientation:
                        //
                        //  xzXZ
                        //   y Y
                        //
                        // X - Positive x direction
                        // x - Negative x direction
                        // Y - Positive y direction
                        // y - Negative y direction
                        // Z - Positive z direction
                        // z - Negative z direction
    
                        // positive X
                        cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
                        // negative X
                        cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
                        // positive Z
                        cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
                        // negative Z
                        cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
                        // positive Y
                        cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
                        // negative Y
                        cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );
    
                        _shadowMapSize.x *= 4.0;
                        _shadowMapSize.y *= 2.0;
    
                    }
    
                    if ( shadow.map === null ) {
    
                        var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
    
                        shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
                        shadow.map.texture.name = light.name + ".shadowMap";
    
                        shadowCamera.updateProjectionMatrix();
    
                    }
    
                    if ( shadow.isSpotLightShadow ) {
    
                        shadow.update( light );
    
                    }
    
                    var shadowMap = shadow.map;
                    var shadowMatrix = shadow.matrix;
    
                    _lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
                    shadowCamera.position.copy( _lightPositionWorld );
    
                    if ( isPointLight ) {
    
                        faceCount = 6;
    
                        // for point lights we set the shadow matrix to be a translation-only matrix
                        // equal to inverse of the light's position
    
                        shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );
    
                    } else {
    
                        faceCount = 1;
    
                        _lookTarget.setFromMatrixPosition( light.target.matrixWorld );
                        shadowCamera.lookAt( _lookTarget );
                        shadowCamera.updateMatrixWorld();
    
                        // compute shadow matrix
    
                        shadowMatrix.set(
                            0.5, 0.0, 0.0, 0.5,
                            0.0, 0.5, 0.0, 0.5,
                            0.0, 0.0, 0.5, 0.5,
                            0.0, 0.0, 0.0, 1.0
                        );
    
                        shadowMatrix.multiply( shadowCamera.projectionMatrix );
                        shadowMatrix.multiply( shadowCamera.matrixWorldInverse );
    
                    }
    
                    _renderer.setRenderTarget( shadowMap );
                    _renderer.clear();
    
                    // render shadow map for each cube face (if omni-directional) or
                    // run a single pass if not
    
                    for ( var face = 0; face < faceCount; face ++ ) {
    
                        if ( isPointLight ) {
    
                            _lookTarget.copy( shadowCamera.position );
                            _lookTarget.add( cubeDirections[ face ] );
                            shadowCamera.up.copy( cubeUps[ face ] );
                            shadowCamera.lookAt( _lookTarget );
                            shadowCamera.updateMatrixWorld();
    
                            var vpDimensions = cube2DViewPorts[ face ];
                            _state.viewport( vpDimensions );
    
                        }
    
                        // update camera matrices and frustum
    
                        _projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
                        _frustum.setFromMatrix( _projScreenMatrix );
    
                        // set object matrices & frustum culling
    
                        renderObject( scene, camera, shadowCamera, isPointLight );
    
                    }
    
                }
    
                scope.needsUpdate = false;
    
                _renderer.setRenderTarget( currentRenderTarget );
    
            };
    
            function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {
    
                var geometry = object.geometry;
    
                var result = null;
    
                var materialVariants = _depthMaterials;
                var customMaterial = object.customDepthMaterial;
    
                if ( isPointLight ) {
    
                    materialVariants = _distanceMaterials;
                    customMaterial = object.customDistanceMaterial;
    
                }
    
                if ( ! customMaterial ) {
    
                    var useMorphing = false;
    
                    if ( material.morphTargets ) {
    
                        if ( geometry && geometry.isBufferGeometry ) {
    
                            useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
    
                        } else if ( geometry && geometry.isGeometry ) {
    
                            useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;
    
                        }
    
                    }
    
                    if ( object.isSkinnedMesh && material.skinning === false ) {
    
                        console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );
    
                    }
    
                    var useSkinning = object.isSkinnedMesh && material.skinning;
    
                    var variantIndex = 0;
    
                    if ( useMorphing ) variantIndex |= _MorphingFlag;
                    if ( useSkinning ) variantIndex |= _SkinningFlag;
    
                    result = materialVariants[ variantIndex ];
    
                } else {
    
                    result = customMaterial;
    
                }
    
                if ( _renderer.localClippingEnabled &&
                        material.clipShadows === true &&
                        material.clippingPlanes.length !== 0 ) {
    
                    // in this case we need a unique material instance reflecting the
                    // appropriate state
    
                    var keyA = result.uuid, keyB = material.uuid;
    
                    var materialsForVariant = _materialCache[ keyA ];
    
                    if ( materialsForVariant === undefined ) {
    
                        materialsForVariant = {};
                        _materialCache[ keyA ] = materialsForVariant;
    
                    }
    
                    var cachedMaterial = materialsForVariant[ keyB ];
    
                    if ( cachedMaterial === undefined ) {
    
                        cachedMaterial = result.clone();
                        materialsForVariant[ keyB ] = cachedMaterial;
    
                    }
    
                    result = cachedMaterial;
    
                }
    
                result.visible = material.visible;
                result.wireframe = material.wireframe;
    
                result.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];
    
                result.clipShadows = material.clipShadows;
                result.clippingPlanes = material.clippingPlanes;
                result.clipIntersection = material.clipIntersection;
    
                result.wireframeLinewidth = material.wireframeLinewidth;
                result.linewidth = material.linewidth;
    
                if ( isPointLight && result.isMeshDistanceMaterial ) {
    
                    result.referencePosition.copy( lightPositionWorld );
                    result.nearDistance = shadowCameraNear;
                    result.farDistance = shadowCameraFar;
    
                }
    
                return result;
    
            }
    
            function renderObject( object, camera, shadowCamera, isPointLight ) {
    
                if ( object.visible === false ) return;
    
                var visible = object.layers.test( camera.layers );
    
                if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {
    
                    if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {
    
                        object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
    
                        var geometry = _objects.update( object );
                        var material = object.material;
    
                        if ( Array.isArray( material ) ) {
    
                            var groups = geometry.groups;
    
                            for ( var k = 0, kl = groups.length; k < kl; k ++ ) {
    
                                var group = groups[ k ];
                                var groupMaterial = material[ group.materialIndex ];
    
                                if ( groupMaterial && groupMaterial.visible ) {
    
                                    var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
                                    _renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );
    
                                }
    
                            }
    
                        } else if ( material.visible ) {
    
                            var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
                            _renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );
    
                        }
    
                    }
    
                }
    
                var children = object.children;
    
                for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                    renderObject( children[ i ], camera, shadowCamera, isPointLight );
    
                }
    
            }
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLState( gl, extensions, utils, capabilities ) {
    
            function ColorBuffer() {
    
                var locked = false;
    
                var color = new Vector4();
                var currentColorMask = null;
                var currentColorClear = new Vector4( 0, 0, 0, 0 );
    
                return {
    
                    setMask: function ( colorMask ) {
    
                        if ( currentColorMask !== colorMask && ! locked ) {
    
                            gl.colorMask( colorMask, colorMask, colorMask, colorMask );
                            currentColorMask = colorMask;
    
                        }
    
                    },
    
                    setLocked: function ( lock ) {
    
                        locked = lock;
    
                    },
    
                    setClear: function ( r, g, b, a, premultipliedAlpha ) {
    
                        if ( premultipliedAlpha === true ) {
    
                            r *= a; g *= a; b *= a;
    
                        }
    
                        color.set( r, g, b, a );
    
                        if ( currentColorClear.equals( color ) === false ) {
    
                            gl.clearColor( r, g, b, a );
                            currentColorClear.copy( color );
    
                        }
    
                    },
    
                    reset: function () {
    
                        locked = false;
    
                        currentColorMask = null;
                        currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state
    
                    }
    
                };
    
            }
    
            function DepthBuffer() {
    
                var locked = false;
    
                var currentDepthMask = null;
                var currentDepthFunc = null;
                var currentDepthClear = null;
    
                return {
    
                    setTest: function ( depthTest ) {
    
                        if ( depthTest ) {
    
                            enable( 2929 );
    
                        } else {
    
                            disable( 2929 );
    
                        }
    
                    },
    
                    setMask: function ( depthMask ) {
    
                        if ( currentDepthMask !== depthMask && ! locked ) {
    
                            gl.depthMask( depthMask );
                            currentDepthMask = depthMask;
    
                        }
    
                    },
    
                    setFunc: function ( depthFunc ) {
    
                        if ( currentDepthFunc !== depthFunc ) {
    
                            if ( depthFunc ) {
    
                                switch ( depthFunc ) {
    
                                    case NeverDepth:
    
                                        gl.depthFunc( 512 );
                                        break;
    
                                    case AlwaysDepth:
    
                                        gl.depthFunc( 519 );
                                        break;
    
                                    case LessDepth:
    
                                        gl.depthFunc( 513 );
                                        break;
    
                                    case LessEqualDepth:
    
                                        gl.depthFunc( 515 );
                                        break;
    
                                    case EqualDepth:
    
                                        gl.depthFunc( 514 );
                                        break;
    
                                    case GreaterEqualDepth:
    
                                        gl.depthFunc( 518 );
                                        break;
    
                                    case GreaterDepth:
    
                                        gl.depthFunc( 516 );
                                        break;
    
                                    case NotEqualDepth:
    
                                        gl.depthFunc( 517 );
                                        break;
    
                                    default:
    
                                        gl.depthFunc( 515 );
    
                                }
    
                            } else {
    
                                gl.depthFunc( 515 );
    
                            }
    
                            currentDepthFunc = depthFunc;
    
                        }
    
                    },
    
                    setLocked: function ( lock ) {
    
                        locked = lock;
    
                    },
    
                    setClear: function ( depth ) {
    
                        if ( currentDepthClear !== depth ) {
    
                            gl.clearDepth( depth );
                            currentDepthClear = depth;
    
                        }
    
                    },
    
                    reset: function () {
    
                        locked = false;
    
                        currentDepthMask = null;
                        currentDepthFunc = null;
                        currentDepthClear = null;
    
                    }
    
                };
    
            }
    
            function StencilBuffer() {
    
                var locked = false;
    
                var currentStencilMask = null;
                var currentStencilFunc = null;
                var currentStencilRef = null;
                var currentStencilFuncMask = null;
                var currentStencilFail = null;
                var currentStencilZFail = null;
                var currentStencilZPass = null;
                var currentStencilClear = null;
    
                return {
    
                    setTest: function ( stencilTest ) {
    
                        if ( stencilTest ) {
    
                            enable( 2960 );
    
                        } else {
    
                            disable( 2960 );
    
                        }
    
                    },
    
                    setMask: function ( stencilMask ) {
    
                        if ( currentStencilMask !== stencilMask && ! locked ) {
    
                            gl.stencilMask( stencilMask );
                            currentStencilMask = stencilMask;
    
                        }
    
                    },
    
                    setFunc: function ( stencilFunc, stencilRef, stencilMask ) {
    
                        if ( currentStencilFunc !== stencilFunc ||
                             currentStencilRef 	!== stencilRef 	||
                             currentStencilFuncMask !== stencilMask ) {
    
                            gl.stencilFunc( stencilFunc, stencilRef, stencilMask );
    
                            currentStencilFunc = stencilFunc;
                            currentStencilRef = stencilRef;
                            currentStencilFuncMask = stencilMask;
    
                        }
    
                    },
    
                    setOp: function ( stencilFail, stencilZFail, stencilZPass ) {
    
                        if ( currentStencilFail	 !== stencilFail 	||
                             currentStencilZFail !== stencilZFail ||
                             currentStencilZPass !== stencilZPass ) {
    
                            gl.stencilOp( stencilFail, stencilZFail, stencilZPass );
    
                            currentStencilFail = stencilFail;
                            currentStencilZFail = stencilZFail;
                            currentStencilZPass = stencilZPass;
    
                        }
    
                    },
    
                    setLocked: function ( lock ) {
    
                        locked = lock;
    
                    },
    
                    setClear: function ( stencil ) {
    
                        if ( currentStencilClear !== stencil ) {
    
                            gl.clearStencil( stencil );
                            currentStencilClear = stencil;
    
                        }
    
                    },
    
                    reset: function () {
    
                        locked = false;
    
                        currentStencilMask = null;
                        currentStencilFunc = null;
                        currentStencilRef = null;
                        currentStencilFuncMask = null;
                        currentStencilFail = null;
                        currentStencilZFail = null;
                        currentStencilZPass = null;
                        currentStencilClear = null;
    
                    }
    
                };
    
            }
    
            //
    
            var colorBuffer = new ColorBuffer();
            var depthBuffer = new DepthBuffer();
            var stencilBuffer = new StencilBuffer();
    
            var maxVertexAttributes = gl.getParameter( 34921 );
            var newAttributes = new Uint8Array( maxVertexAttributes );
            var enabledAttributes = new Uint8Array( maxVertexAttributes );
            var attributeDivisors = new Uint8Array( maxVertexAttributes );
    
            var enabledCapabilities = {};
    
            var compressedTextureFormats = null;
    
            var currentProgram = null;
    
            var currentBlendingEnabled = null;
            var currentBlending = null;
            var currentBlendEquation = null;
            var currentBlendSrc = null;
            var currentBlendDst = null;
            var currentBlendEquationAlpha = null;
            var currentBlendSrcAlpha = null;
            var currentBlendDstAlpha = null;
            var currentPremultipledAlpha = false;
    
            var currentFlipSided = null;
            var currentCullFace = null;
    
            var currentLineWidth = null;
    
            var currentPolygonOffsetFactor = null;
            var currentPolygonOffsetUnits = null;
    
            var maxTextures = gl.getParameter( 35661 );
    
            var lineWidthAvailable = false;
            var version = 0;
            var glVersion = gl.getParameter( 7938 );
    
            if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {
    
                version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
                lineWidthAvailable = ( version >= 1.0 );
    
            } else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {
    
                version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
                lineWidthAvailable = ( version >= 2.0 );
    
            }
    
            var currentTextureSlot = null;
            var currentBoundTextures = {};
    
            var currentScissor = new Vector4();
            var currentViewport = new Vector4();
    
            function createTexture( type, target, count ) {
    
                var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
                var texture = gl.createTexture();
    
                gl.bindTexture( type, texture );
                gl.texParameteri( type, 10241, 9728 );
                gl.texParameteri( type, 10240, 9728 );
    
                for ( var i = 0; i < count; i ++ ) {
    
                    gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );
    
                }
    
                return texture;
    
            }
    
            var emptyTextures = {};
            emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
            emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );
    
            // init
    
            colorBuffer.setClear( 0, 0, 0, 1 );
            depthBuffer.setClear( 1 );
            stencilBuffer.setClear( 0 );
    
            enable( 2929 );
            depthBuffer.setFunc( LessEqualDepth );
    
            setFlipSided( false );
            setCullFace( CullFaceBack );
            enable( 2884 );
    
            setBlending( NoBlending );
    
            //
    
            function initAttributes() {
    
                for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {
    
                    newAttributes[ i ] = 0;
    
                }
    
            }
    
            function enableAttribute( attribute ) {
    
                enableAttributeAndDivisor( attribute, 0 );
    
            }
    
            function enableAttributeAndDivisor( attribute, meshPerAttribute ) {
    
                newAttributes[ attribute ] = 1;
    
                if ( enabledAttributes[ attribute ] === 0 ) {
    
                    gl.enableVertexAttribArray( attribute );
                    enabledAttributes[ attribute ] = 1;
    
                }
    
                if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
    
                    var extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );
    
                    extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
                    attributeDivisors[ attribute ] = meshPerAttribute;
    
                }
    
            }
    
            function disableUnusedAttributes() {
    
                for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {
    
                    if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
    
                        gl.disableVertexAttribArray( i );
                        enabledAttributes[ i ] = 0;
    
                    }
    
                }
    
            }
    
            function enable( id ) {
    
                if ( enabledCapabilities[ id ] !== true ) {
    
                    gl.enable( id );
                    enabledCapabilities[ id ] = true;
    
                }
    
            }
    
            function disable( id ) {
    
                if ( enabledCapabilities[ id ] !== false ) {
    
                    gl.disable( id );
                    enabledCapabilities[ id ] = false;
    
                }
    
            }
    
            function getCompressedTextureFormats() {
    
                if ( compressedTextureFormats === null ) {
    
                    compressedTextureFormats = [];
    
                    if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
                         extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
                         extensions.get( 'WEBGL_compressed_texture_etc1' ) ||
                         extensions.get( 'WEBGL_compressed_texture_astc' ) ) {
    
                        var formats = gl.getParameter( 34467 );
    
                        for ( var i = 0; i < formats.length; i ++ ) {
    
                            compressedTextureFormats.push( formats[ i ] );
    
                        }
    
                    }
    
                }
    
                return compressedTextureFormats;
    
            }
    
            function useProgram( program ) {
    
                if ( currentProgram !== program ) {
    
                    gl.useProgram( program );
    
                    currentProgram = program;
    
                    return true;
    
                }
    
                return false;
    
            }
    
            function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {
    
                if ( blending === NoBlending ) {
    
                    if ( currentBlendingEnabled ) {
    
                        disable( 3042 );
                        currentBlendingEnabled = false;
    
                    }
    
                    return;
    
                }
    
                if ( ! currentBlendingEnabled ) {
    
                    enable( 3042 );
                    currentBlendingEnabled = true;
    
                }
    
                if ( blending !== CustomBlending ) {
    
                    if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {
    
                        if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {
    
                            gl.blendEquation( 32774 );
    
                            currentBlendEquation = AddEquation;
                            currentBlendEquationAlpha = AddEquation;
    
                        }
    
                        if ( premultipliedAlpha ) {
    
                            switch ( blending ) {
    
                                case NormalBlending:
                                    gl.blendFuncSeparate( 1, 771, 1, 771 );
                                    break;
    
                                case AdditiveBlending:
                                    gl.blendFunc( 1, 1 );
                                    break;
    
                                case SubtractiveBlending:
                                    gl.blendFuncSeparate( 0, 0, 769, 771 );
                                    break;
    
                                case MultiplyBlending:
                                    gl.blendFuncSeparate( 0, 768, 0, 770 );
                                    break;
    
                                default:
                                    console.error( 'THREE.WebGLState: Invalid blending: ', blending );
                                    break;
    
                            }
    
                        } else {
    
                            switch ( blending ) {
    
                                case NormalBlending:
                                    gl.blendFuncSeparate( 770, 771, 1, 771 );
                                    break;
    
                                case AdditiveBlending:
                                    gl.blendFunc( 770, 1 );
                                    break;
    
                                case SubtractiveBlending:
                                    gl.blendFunc( 0, 769 );
                                    break;
    
                                case MultiplyBlending:
                                    gl.blendFunc( 0, 768 );
                                    break;
    
                                default:
                                    console.error( 'THREE.WebGLState: Invalid blending: ', blending );
                                    break;
    
                            }
    
                        }
    
                        currentBlendSrc = null;
                        currentBlendDst = null;
                        currentBlendSrcAlpha = null;
                        currentBlendDstAlpha = null;
    
                        currentBlending = blending;
                        currentPremultipledAlpha = premultipliedAlpha;
    
                    }
    
                    return;
    
                }
    
                // custom blending
    
                blendEquationAlpha = blendEquationAlpha || blendEquation;
                blendSrcAlpha = blendSrcAlpha || blendSrc;
                blendDstAlpha = blendDstAlpha || blendDst;
    
                if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
    
                    gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );
    
                    currentBlendEquation = blendEquation;
                    currentBlendEquationAlpha = blendEquationAlpha;
    
                }
    
                if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
    
                    gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );
    
                    currentBlendSrc = blendSrc;
                    currentBlendDst = blendDst;
                    currentBlendSrcAlpha = blendSrcAlpha;
                    currentBlendDstAlpha = blendDstAlpha;
    
                }
    
                currentBlending = blending;
                currentPremultipledAlpha = null;
    
            }
    
            function setMaterial( material, frontFaceCW ) {
    
                material.side === DoubleSide
                    ? disable( 2884 )
                    : enable( 2884 );
    
                var flipSided = ( material.side === BackSide );
                if ( frontFaceCW ) flipSided = ! flipSided;
    
                setFlipSided( flipSided );
    
                ( material.blending === NormalBlending && material.transparent === false )
                    ? setBlending( NoBlending )
                    : setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
    
                depthBuffer.setFunc( material.depthFunc );
                depthBuffer.setTest( material.depthTest );
                depthBuffer.setMask( material.depthWrite );
                colorBuffer.setMask( material.colorWrite );
    
                setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
    
            }
    
            //
    
            function setFlipSided( flipSided ) {
    
                if ( currentFlipSided !== flipSided ) {
    
                    if ( flipSided ) {
    
                        gl.frontFace( 2304 );
    
                    } else {
    
                        gl.frontFace( 2305 );
    
                    }
    
                    currentFlipSided = flipSided;
    
                }
    
            }
    
            function setCullFace( cullFace ) {
    
                if ( cullFace !== CullFaceNone ) {
    
                    enable( 2884 );
    
                    if ( cullFace !== currentCullFace ) {
    
                        if ( cullFace === CullFaceBack ) {
    
                            gl.cullFace( 1029 );
    
                        } else if ( cullFace === CullFaceFront ) {
    
                            gl.cullFace( 1028 );
    
                        } else {
    
                            gl.cullFace( 1032 );
    
                        }
    
                    }
    
                } else {
    
                    disable( 2884 );
    
                }
    
                currentCullFace = cullFace;
    
            }
    
            function setLineWidth( width ) {
    
                if ( width !== currentLineWidth ) {
    
                    if ( lineWidthAvailable ) gl.lineWidth( width );
    
                    currentLineWidth = width;
    
                }
    
            }
    
            function setPolygonOffset( polygonOffset, factor, units ) {
    
                if ( polygonOffset ) {
    
                    enable( 32823 );
    
                    if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {
    
                        gl.polygonOffset( factor, units );
    
                        currentPolygonOffsetFactor = factor;
                        currentPolygonOffsetUnits = units;
    
                    }
    
                } else {
    
                    disable( 32823 );
    
                }
    
            }
    
            function setScissorTest( scissorTest ) {
    
                if ( scissorTest ) {
    
                    enable( 3089 );
    
                } else {
    
                    disable( 3089 );
    
                }
    
            }
    
            // texture
    
            function activeTexture( webglSlot ) {
    
                if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;
    
                if ( currentTextureSlot !== webglSlot ) {
    
                    gl.activeTexture( webglSlot );
                    currentTextureSlot = webglSlot;
    
                }
    
            }
    
            function bindTexture( webglType, webglTexture ) {
    
                if ( currentTextureSlot === null ) {
    
                    activeTexture();
    
                }
    
                var boundTexture = currentBoundTextures[ currentTextureSlot ];
    
                if ( boundTexture === undefined ) {
    
                    boundTexture = { type: undefined, texture: undefined };
                    currentBoundTextures[ currentTextureSlot ] = boundTexture;
    
                }
    
                if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
    
                    gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );
    
                    boundTexture.type = webglType;
                    boundTexture.texture = webglTexture;
    
                }
    
            }
    
            function compressedTexImage2D() {
    
                try {
    
                    gl.compressedTexImage2D.apply( gl, arguments );
    
                } catch ( error ) {
    
                    console.error( 'THREE.WebGLState:', error );
    
                }
    
            }
    
            function texImage2D() {
    
                try {
    
                    gl.texImage2D.apply( gl, arguments );
    
                } catch ( error ) {
    
                    console.error( 'THREE.WebGLState:', error );
    
                }
    
            }
    
            function texImage3D() {
    
                try {
    
                    gl.texImage3D.apply( gl, arguments );
    
                } catch ( error ) {
    
                    console.error( 'THREE.WebGLState:', error );
    
                }
    
            }
    
            //
    
            function scissor( scissor ) {
    
                if ( currentScissor.equals( scissor ) === false ) {
    
                    gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
                    currentScissor.copy( scissor );
    
                }
    
            }
    
            function viewport( viewport ) {
    
                if ( currentViewport.equals( viewport ) === false ) {
    
                    gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
                    currentViewport.copy( viewport );
    
                }
    
            }
    
            //
    
            function reset() {
    
                for ( var i = 0; i < enabledAttributes.length; i ++ ) {
    
                    if ( enabledAttributes[ i ] === 1 ) {
    
                        gl.disableVertexAttribArray( i );
                        enabledAttributes[ i ] = 0;
    
                    }
    
                }
    
                enabledCapabilities = {};
    
                compressedTextureFormats = null;
    
                currentTextureSlot = null;
                currentBoundTextures = {};
    
                currentProgram = null;
    
                currentBlending = null;
    
                currentFlipSided = null;
                currentCullFace = null;
    
                colorBuffer.reset();
                depthBuffer.reset();
                stencilBuffer.reset();
    
            }
    
            return {
    
                buffers: {
                    color: colorBuffer,
                    depth: depthBuffer,
                    stencil: stencilBuffer
                },
    
                initAttributes: initAttributes,
                enableAttribute: enableAttribute,
                enableAttributeAndDivisor: enableAttributeAndDivisor,
                disableUnusedAttributes: disableUnusedAttributes,
                enable: enable,
                disable: disable,
                getCompressedTextureFormats: getCompressedTextureFormats,
    
                useProgram: useProgram,
    
                setBlending: setBlending,
                setMaterial: setMaterial,
    
                setFlipSided: setFlipSided,
                setCullFace: setCullFace,
    
                setLineWidth: setLineWidth,
                setPolygonOffset: setPolygonOffset,
    
                setScissorTest: setScissorTest,
    
                activeTexture: activeTexture,
                bindTexture: bindTexture,
                compressedTexImage2D: compressedTexImage2D,
                texImage2D: texImage2D,
                texImage3D: texImage3D,
    
                scissor: scissor,
                viewport: viewport,
    
                reset: reset
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {
    
            var _videoTextures = {};
            var _canvas;
    
            //
    
            var useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';
    
            function createCanvas( width, height ) {
    
                // Use OffscreenCanvas when available. Specially needed in web workers
    
                return useOffscreenCanvas ?
                    new OffscreenCanvas( width, height ) :
                    document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
    
            }
    
            function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {
    
                var scale = 1;
    
                // handle case if texture exceeds max size
    
                if ( image.width > maxSize || image.height > maxSize ) {
    
                    scale = maxSize / Math.max( image.width, image.height );
    
                }
    
                // only perform resize if necessary
    
                if ( scale < 1 || needsPowerOfTwo === true ) {
    
                    // only perform resize for certain image types
    
                    if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
                        ( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
                        ( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
    
                        var floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;
    
                        var width = floor( scale * image.width );
                        var height = floor( scale * image.height );
    
                        if ( _canvas === undefined ) _canvas = createCanvas( width, height );
    
                        // cube textures can't reuse the same canvas
    
                        var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;
    
                        canvas.width = width;
                        canvas.height = height;
    
                        var context = canvas.getContext( '2d' );
                        context.drawImage( image, 0, 0, width, height );
    
                        console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );
    
                        return canvas;
    
                    } else {
    
                        if ( 'data' in image ) {
    
                            console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );
    
                        }
    
                        return image;
    
                    }
    
                }
    
                return image;
    
            }
    
            function isPowerOfTwo( image ) {
    
                return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );
    
            }
    
            function textureNeedsPowerOfTwo( texture ) {
    
                if ( capabilities.isWebGL2 ) return false;
    
                return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
                    ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );
    
            }
    
            function textureNeedsGenerateMipmaps( texture, supportsMips ) {
    
                return texture.generateMipmaps && supportsMips &&
                    texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    
            }
    
            function generateMipmap( target, texture, width, height ) {
    
                _gl.generateMipmap( target );
    
                var textureProperties = properties.get( texture );
    
                // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
                textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;
    
            }
    
            function getInternalFormat( glFormat, glType ) {
    
                if ( ! capabilities.isWebGL2 ) return glFormat;
    
                var internalFormat = glFormat;
    
                if ( glFormat === 6403 ) {
    
                    if ( glType === 5126 ) internalFormat = 33326;
                    if ( glType === 5131 ) internalFormat = 33325;
                    if ( glType === 5121 ) internalFormat = 33321;
    
                }
    
                if ( glFormat === 6407 ) {
    
                    if ( glType === 5126 ) internalFormat = 34837;
                    if ( glType === 5131 ) internalFormat = 34843;
                    if ( glType === 5121 ) internalFormat = 32849;
    
                }
    
                if ( glFormat === 6408 ) {
    
                    if ( glType === 5126 ) internalFormat = 34836;
                    if ( glType === 5131 ) internalFormat = 34842;
                    if ( glType === 5121 ) internalFormat = 32856;
    
                }
    
                if ( internalFormat === 33325 || internalFormat === 33326 ||
                    internalFormat === 34842 || internalFormat === 34836 ) {
    
                    extensions.get( 'EXT_color_buffer_float' );
    
                } else if ( internalFormat === 34843 || internalFormat === 34837 ) {
    
                    console.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );
    
                }
    
                return internalFormat;
    
            }
    
            // Fallback filters for non-power-of-2 textures
    
            function filterFallback( f ) {
    
                if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {
    
                    return 9728;
    
                }
    
                return 9729;
    
            }
    
            //
    
            function onTextureDispose( event ) {
    
                var texture = event.target;
    
                texture.removeEventListener( 'dispose', onTextureDispose );
    
                deallocateTexture( texture );
    
                if ( texture.isVideoTexture ) {
    
                    delete _videoTextures[ texture.id ];
    
                }
    
                info.memory.textures --;
    
            }
    
            function onRenderTargetDispose( event ) {
    
                var renderTarget = event.target;
    
                renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
    
                deallocateRenderTarget( renderTarget );
    
                info.memory.textures --;
    
            }
    
            //
    
            function deallocateTexture( texture ) {
    
                var textureProperties = properties.get( texture );
    
                if ( textureProperties.__webglInit === undefined ) return;
    
                _gl.deleteTexture( textureProperties.__webglTexture );
    
                properties.remove( texture );
    
            }
    
            function deallocateRenderTarget( renderTarget ) {
    
                var renderTargetProperties = properties.get( renderTarget );
                var textureProperties = properties.get( renderTarget.texture );
    
                if ( ! renderTarget ) return;
    
                if ( textureProperties.__webglTexture !== undefined ) {
    
                    _gl.deleteTexture( textureProperties.__webglTexture );
    
                }
    
                if ( renderTarget.depthTexture ) {
    
                    renderTarget.depthTexture.dispose();
    
                }
    
                if ( renderTarget.isWebGLRenderTargetCube ) {
    
                    for ( var i = 0; i < 6; i ++ ) {
    
                        _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
                        if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );
    
                    }
    
                } else {
    
                    _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
                    if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
    
                }
    
                properties.remove( renderTarget.texture );
                properties.remove( renderTarget );
    
            }
    
            //
    
            var textureUnits = 0;
    
            function resetTextureUnits() {
    
                textureUnits = 0;
    
            }
    
            function allocateTextureUnit() {
    
                var textureUnit = textureUnits;
    
                if ( textureUnit >= capabilities.maxTextures ) {
    
                    console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );
    
                }
    
                textureUnits += 1;
    
                return textureUnit;
    
            }
    
            //
    
            function setTexture2D( texture, slot ) {
    
                var textureProperties = properties.get( texture );
    
                if ( texture.isVideoTexture ) updateVideoTexture( texture );
    
                if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
    
                    var image = texture.image;
    
                    if ( image === undefined ) {
    
                        console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );
    
                    } else if ( image.complete === false ) {
    
                        console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );
    
                    } else {
    
                        uploadTexture( textureProperties, texture, slot );
                        return;
    
                    }
    
                }
    
                state.activeTexture( 33984 + slot );
                state.bindTexture( 3553, textureProperties.__webglTexture );
    
            }
    
            function setTexture2DArray( texture, slot ) {
    
                var textureProperties = properties.get( texture );
    
                if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
    
                    uploadTexture( textureProperties, texture, slot );
                    return;
    
                }
    
                state.activeTexture( 33984 + slot );
                state.bindTexture( 35866, textureProperties.__webglTexture );
    
            }
    
            function setTexture3D( texture, slot ) {
    
                var textureProperties = properties.get( texture );
    
                if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
    
                    uploadTexture( textureProperties, texture, slot );
                    return;
    
                }
    
                state.activeTexture( 33984 + slot );
                state.bindTexture( 32879, textureProperties.__webglTexture );
    
            }
    
            function setTextureCube( texture, slot ) {
    
                var textureProperties = properties.get( texture );
    
                if ( texture.image.length === 6 ) {
    
                    if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
    
                        initTexture( textureProperties, texture );
    
                        state.activeTexture( 33984 + slot );
                        state.bindTexture( 34067, textureProperties.__webglTexture );
    
                        _gl.pixelStorei( 37440, texture.flipY );
    
                        var isCompressed = ( texture && texture.isCompressedTexture );
                        var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );
    
                        var cubeImage = [];
    
                        for ( var i = 0; i < 6; i ++ ) {
    
                            if ( ! isCompressed && ! isDataTexture ) {
    
                                cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, capabilities.maxCubemapSize );
    
                            } else {
    
                                cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
    
                            }
    
                        }
    
                        var image = cubeImage[ 0 ],
                            supportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,
                            glFormat = utils.convert( texture.format ),
                            glType = utils.convert( texture.type ),
                            glInternalFormat = getInternalFormat( glFormat, glType );
    
                        setTextureParameters( 34067, texture, supportsMips );
    
                        for ( var i = 0; i < 6; i ++ ) {
    
                            if ( ! isCompressed ) {
    
                                if ( isDataTexture ) {
    
                                    state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
    
                                } else {
    
                                    state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );
    
                                }
    
                            } else {
    
                                var mipmap, mipmaps = cubeImage[ i ].mipmaps;
    
                                for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {
    
                                    mipmap = mipmaps[ j ];
    
                                    if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
    
                                        if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
    
                                            state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
    
                                        } else {
    
                                            console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );
    
                                        }
    
                                    } else {
    
                                        state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
    
                                    }
    
                                }
    
                            }
    
                        }
    
                        if ( ! isCompressed ) {
    
                            textureProperties.__maxMipLevel = 0;
    
                        } else {
    
                            textureProperties.__maxMipLevel = mipmaps.length - 1;
    
                        }
    
                        if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
    
                            // We assume images for cube map have the same size.
                            generateMipmap( 34067, texture, image.width, image.height );
    
                        }
    
                        textureProperties.__version = texture.version;
    
                        if ( texture.onUpdate ) texture.onUpdate( texture );
    
                    } else {
    
                        state.activeTexture( 33984 + slot );
                        state.bindTexture( 34067, textureProperties.__webglTexture );
    
                    }
    
                }
    
            }
    
            function setTextureCubeDynamic( texture, slot ) {
    
                state.activeTexture( 33984 + slot );
                state.bindTexture( 34067, properties.get( texture ).__webglTexture );
    
            }
    
            function setTextureParameters( textureType, texture, supportsMips ) {
    
                var extension;
    
                if ( supportsMips ) {
    
                    _gl.texParameteri( textureType, 10242, utils.convert( texture.wrapS ) );
                    _gl.texParameteri( textureType, 10243, utils.convert( texture.wrapT ) );
    
                    if ( textureType === 32879 || textureType === 35866 ) {
    
                        _gl.texParameteri( textureType, 32882, utils.convert( texture.wrapR ) );
    
                    }
    
                    _gl.texParameteri( textureType, 10240, utils.convert( texture.magFilter ) );
                    _gl.texParameteri( textureType, 10241, utils.convert( texture.minFilter ) );
    
                } else {
    
                    _gl.texParameteri( textureType, 10242, 33071 );
                    _gl.texParameteri( textureType, 10243, 33071 );
    
                    if ( textureType === 32879 || textureType === 35866 ) {
    
                        _gl.texParameteri( textureType, 32882, 33071 );
    
                    }
    
                    if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {
    
                        console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );
    
                    }
    
                    _gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
                    _gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );
    
                    if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {
    
                        console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );
    
                    }
    
                }
    
                extension = extensions.get( 'EXT_texture_filter_anisotropic' );
    
                if ( extension ) {
    
                    if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
                    if ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;
    
                    if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
    
                        _gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
                        properties.get( texture ).__currentAnisotropy = texture.anisotropy;
    
                    }
    
                }
    
            }
    
            function initTexture( textureProperties, texture ) {
    
                if ( textureProperties.__webglInit === undefined ) {
    
                    textureProperties.__webglInit = true;
    
                    texture.addEventListener( 'dispose', onTextureDispose );
    
                    textureProperties.__webglTexture = _gl.createTexture();
    
                    info.memory.textures ++;
    
                }
    
            }
    
            function uploadTexture( textureProperties, texture, slot ) {
    
                var textureType = 3553;
    
                if ( texture.isDataTexture2DArray ) textureType = 35866;
                if ( texture.isDataTexture3D ) textureType = 32879;
    
                initTexture( textureProperties, texture );
    
                state.activeTexture( 33984 + slot );
                state.bindTexture( textureType, textureProperties.__webglTexture );
    
                _gl.pixelStorei( 37440, texture.flipY );
                _gl.pixelStorei( 37441, texture.premultiplyAlpha );
                _gl.pixelStorei( 3317, texture.unpackAlignment );
    
                var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
                var image = resizeImage( texture.image, needsPowerOfTwo, false, capabilities.maxTextureSize );
    
                var supportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,
                    glFormat = utils.convert( texture.format ),
                    glType = utils.convert( texture.type ),
                    glInternalFormat = getInternalFormat( glFormat, glType );
    
                setTextureParameters( textureType, texture, supportsMips );
    
                var mipmap, mipmaps = texture.mipmaps;
    
                if ( texture.isDepthTexture ) {
    
                    // populate depth texture with dummy data
    
                    glInternalFormat = 6402;
    
                    if ( texture.type === FloatType ) {
    
                        if ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
                        glInternalFormat = 36012;
    
                    } else if ( capabilities.isWebGL2 ) {
    
                        // WebGL 2.0 requires signed internalformat for glTexImage2D
                        glInternalFormat = 33189;
    
                    }
    
                    if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {
    
                        // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                        // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
                        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                        if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {
    
                            console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );
    
                            texture.type = UnsignedShortType;
                            glType = utils.convert( texture.type );
    
                        }
    
                    }
    
                    // Depth stencil textures need the DEPTH_STENCIL internal format
                    // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                    if ( texture.format === DepthStencilFormat ) {
    
                        glInternalFormat = 34041;
    
                        // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                        // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
                        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                        if ( texture.type !== UnsignedInt248Type ) {
    
                            console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );
    
                            texture.type = UnsignedInt248Type;
                            glType = utils.convert( texture.type );
    
                        }
    
                    }
    
                    state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );
    
                } else if ( texture.isDataTexture ) {
    
                    // use manually created mipmaps if available
                    // if there are no manual mipmaps
                    // set 0 level mipmap and then use GL to generate other mipmap levels
    
                    if ( mipmaps.length > 0 && supportsMips ) {
    
                        for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
    
                            mipmap = mipmaps[ i ];
                            state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
    
                        }
    
                        texture.generateMipmaps = false;
                        textureProperties.__maxMipLevel = mipmaps.length - 1;
    
                    } else {
    
                        state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
                        textureProperties.__maxMipLevel = 0;
    
                    }
    
                } else if ( texture.isCompressedTexture ) {
    
                    for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
    
                        mipmap = mipmaps[ i ];
    
                        if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
    
                            if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
    
                                state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
    
                            } else {
    
                                console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );
    
                            }
    
                        } else {
    
                            state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
    
                        }
    
                    }
    
                    textureProperties.__maxMipLevel = mipmaps.length - 1;
    
                } else if ( texture.isDataTexture2DArray ) {
    
                    state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
                    textureProperties.__maxMipLevel = 0;
    
                } else if ( texture.isDataTexture3D ) {
    
                    state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
                    textureProperties.__maxMipLevel = 0;
    
                } else {
    
                    // regular Texture (image, video, canvas)
    
                    // use manually created mipmaps if available
                    // if there are no manual mipmaps
                    // set 0 level mipmap and then use GL to generate other mipmap levels
    
                    if ( mipmaps.length > 0 && supportsMips ) {
    
                        for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
    
                            mipmap = mipmaps[ i ];
                            state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );
    
                        }
    
                        texture.generateMipmaps = false;
                        textureProperties.__maxMipLevel = mipmaps.length - 1;
    
                    } else {
    
                        state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
                        textureProperties.__maxMipLevel = 0;
    
                    }
    
                }
    
                if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
    
                    generateMipmap( 3553, texture, image.width, image.height );
    
                }
    
                textureProperties.__version = texture.version;
    
                if ( texture.onUpdate ) texture.onUpdate( texture );
    
            }
    
            // Render targets
    
            // Setup storage for target texture and bind it to correct framebuffer
            function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {
    
                var glFormat = utils.convert( renderTarget.texture.format );
                var glType = utils.convert( renderTarget.texture.type );
                var glInternalFormat = getInternalFormat( glFormat, glType );
                state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
                _gl.bindFramebuffer( 36160, framebuffer );
                _gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
                _gl.bindFramebuffer( 36160, null );
    
            }
    
            // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
            function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {
    
                _gl.bindRenderbuffer( 36161, renderbuffer );
    
                if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
    
                    if ( isMultisample ) {
    
                        var samples = getRenderTargetSamples( renderTarget );
    
                        _gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );
    
                    } else {
    
                        _gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );
    
                    }
    
                    _gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );
    
                } else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
    
                    if ( isMultisample ) {
    
                        var samples = getRenderTargetSamples( renderTarget );
    
                        _gl.renderbufferStorageMultisample( 36161, samples, 34041, renderTarget.width, renderTarget.height );
    
                    } else {
    
                        _gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );
    
                    }
    
    
                    _gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );
    
                } else {
    
                    var glFormat = utils.convert( renderTarget.texture.format );
                    var glType = utils.convert( renderTarget.texture.type );
                    var glInternalFormat = getInternalFormat( glFormat, glType );
    
                    if ( isMultisample ) {
    
                        var samples = getRenderTargetSamples( renderTarget );
    
                        _gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
    
                    } else {
    
                        _gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );
    
                    }
    
                }
    
                _gl.bindRenderbuffer( 36161, null );
    
            }
    
            // Setup resources for a Depth Texture for a FBO (needs an extension)
            function setupDepthTexture( framebuffer, renderTarget ) {
    
                var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
                if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );
    
                _gl.bindFramebuffer( 36160, framebuffer );
    
                if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {
    
                    throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );
    
                }
    
                // upload an empty depth texture with framebuffer size
                if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
                        renderTarget.depthTexture.image.width !== renderTarget.width ||
                        renderTarget.depthTexture.image.height !== renderTarget.height ) {
    
                    renderTarget.depthTexture.image.width = renderTarget.width;
                    renderTarget.depthTexture.image.height = renderTarget.height;
                    renderTarget.depthTexture.needsUpdate = true;
    
                }
    
                setTexture2D( renderTarget.depthTexture, 0 );
    
                var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
    
                if ( renderTarget.depthTexture.format === DepthFormat ) {
    
                    _gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );
    
                } else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {
    
                    _gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );
    
                } else {
    
                    throw new Error( 'Unknown depthTexture format' );
    
                }
    
            }
    
            // Setup GL resources for a non-texture depth buffer
            function setupDepthRenderbuffer( renderTarget ) {
    
                var renderTargetProperties = properties.get( renderTarget );
    
                var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
    
                if ( renderTarget.depthTexture ) {
    
                    if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );
    
                    setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );
    
                } else {
    
                    if ( isCube ) {
    
                        renderTargetProperties.__webglDepthbuffer = [];
    
                        for ( var i = 0; i < 6; i ++ ) {
    
                            _gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
                            renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
                            setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );
    
                        }
    
                    } else {
    
                        _gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
                        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
                        setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );
    
                    }
    
                }
    
                _gl.bindFramebuffer( 36160, null );
    
            }
    
            // Set up GL resources for the render target
            function setupRenderTarget( renderTarget ) {
    
                var renderTargetProperties = properties.get( renderTarget );
                var textureProperties = properties.get( renderTarget.texture );
    
                renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
    
                textureProperties.__webglTexture = _gl.createTexture();
    
                info.memory.textures ++;
    
                var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
                var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
                var supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;
    
                // Setup framebuffer
    
                if ( isCube ) {
    
                    renderTargetProperties.__webglFramebuffer = [];
    
                    for ( var i = 0; i < 6; i ++ ) {
    
                        renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
    
                    }
    
                } else {
    
                    renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
    
                    if ( isMultisample ) {
    
                        if ( capabilities.isWebGL2 ) {
    
                            renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
                            renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
    
                            _gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );
                            var glFormat = utils.convert( renderTarget.texture.format );
                            var glType = utils.convert( renderTarget.texture.type );
                            var glInternalFormat = getInternalFormat( glFormat, glType );
                            var samples = getRenderTargetSamples( renderTarget );
                            _gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
    
                            _gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
                            _gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
                            _gl.bindRenderbuffer( 36161, null );
    
                            if ( renderTarget.depthBuffer ) {
    
                                renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
                                setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );
    
                            }
    
                            _gl.bindFramebuffer( 36160, null );
    
    
                        } else {
    
                            console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );
    
                        }
    
                    }
    
                }
    
                // Setup color buffer
    
                if ( isCube ) {
    
                    state.bindTexture( 34067, textureProperties.__webglTexture );
                    setTextureParameters( 34067, renderTarget.texture, supportsMips );
    
                    for ( var i = 0; i < 6; i ++ ) {
    
                        setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );
    
                    }
    
                    if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {
    
                        generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );
    
                    }
    
                    state.bindTexture( 34067, null );
    
                } else {
    
                    state.bindTexture( 3553, textureProperties.__webglTexture );
                    setTextureParameters( 3553, renderTarget.texture, supportsMips );
                    setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );
    
                    if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {
    
                        generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );
    
                    }
    
                    state.bindTexture( 3553, null );
    
                }
    
                // Setup depth and stencil buffers
    
                if ( renderTarget.depthBuffer ) {
    
                    setupDepthRenderbuffer( renderTarget );
    
                }
    
            }
    
            function updateRenderTargetMipmap( renderTarget ) {
    
                var texture = renderTarget.texture;
                var supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;
    
                if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
    
                    var target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;
                    var webglTexture = properties.get( texture ).__webglTexture;
    
                    state.bindTexture( target, webglTexture );
                    generateMipmap( target, texture, renderTarget.width, renderTarget.height );
                    state.bindTexture( target, null );
    
                }
    
            }
    
            function updateMultisampleRenderTarget( renderTarget ) {
    
                if ( renderTarget.isWebGLMultisampleRenderTarget ) {
    
                    if ( capabilities.isWebGL2 ) {
    
                        var renderTargetProperties = properties.get( renderTarget );
    
                        _gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
                        _gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );
    
                        var width = renderTarget.width;
                        var height = renderTarget.height;
                        var mask = 16384;
    
                        if ( renderTarget.depthBuffer ) mask |= 256;
                        if ( renderTarget.stencilBuffer ) mask |= 1024;
    
                        _gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );
    
                    } else {
    
                        console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );
    
                    }
    
                }
    
            }
    
            function getRenderTargetSamples( renderTarget ) {
    
                return ( capabilities.isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
                    Math.min( capabilities.maxSamples, renderTarget.samples ) : 0;
    
            }
    
            function updateVideoTexture( texture ) {
    
                var id = texture.id;
                var frame = info.render.frame;
    
                // Check the last frame we updated the VideoTexture
    
                if ( _videoTextures[ id ] !== frame ) {
    
                    _videoTextures[ id ] = frame;
                    texture.update();
    
                }
    
            }
    
            // backwards compatibility
    
            var warnedTexture2D = false;
            var warnedTextureCube = false;
    
            function safeSetTexture2D( texture, slot ) {
    
                if ( texture && texture.isWebGLRenderTarget ) {
    
                    if ( warnedTexture2D === false ) {
    
                        console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
                        warnedTexture2D = true;
    
                    }
    
                    texture = texture.texture;
    
                }
    
                setTexture2D( texture, slot );
    
            }
    
            function safeSetTextureCube( texture, slot ) {
    
                if ( texture && texture.isWebGLRenderTargetCube ) {
    
                    if ( warnedTextureCube === false ) {
    
                        console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
                        warnedTextureCube = true;
    
                    }
    
                    texture = texture.texture;
    
                }
    
                // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
                // TODO: unify these code paths
                if ( ( texture && texture.isCubeTexture ) ||
                    ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {
    
                    // CompressedTexture can have Array in image :/
    
                    // this function alone should take care of cube textures
                    setTextureCube( texture, slot );
    
                } else {
    
                    // assumed: texture property of THREE.WebGLRenderTargetCube
                    setTextureCubeDynamic( texture, slot );
    
                }
    
            }
    
            //
    
            this.allocateTextureUnit = allocateTextureUnit;
            this.resetTextureUnits = resetTextureUnits;
    
            this.setTexture2D = setTexture2D;
            this.setTexture2DArray = setTexture2DArray;
            this.setTexture3D = setTexture3D;
            this.setTextureCube = setTextureCube;
            this.setTextureCubeDynamic = setTextureCubeDynamic;
            this.setupRenderTarget = setupRenderTarget;
            this.updateRenderTargetMipmap = updateRenderTargetMipmap;
            this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    
            this.safeSetTexture2D = safeSetTexture2D;
            this.safeSetTextureCube = safeSetTextureCube;
    
        }
    
        /**
         * @author thespite / http://www.twitter.com/thespite
         */
    
        function WebGLUtils( gl, extensions, capabilities ) {
    
            function convert( p ) {
    
                var extension;
    
                if ( p === RepeatWrapping ) return 10497;
                if ( p === ClampToEdgeWrapping ) return 33071;
                if ( p === MirroredRepeatWrapping ) return 33648;
    
                if ( p === NearestFilter ) return 9728;
                if ( p === NearestMipMapNearestFilter ) return 9984;
                if ( p === NearestMipMapLinearFilter ) return 9986;
    
                if ( p === LinearFilter ) return 9729;
                if ( p === LinearMipMapNearestFilter ) return 9985;
                if ( p === LinearMipMapLinearFilter ) return 9987;
    
                if ( p === UnsignedByteType ) return 5121;
                if ( p === UnsignedShort4444Type ) return 32819;
                if ( p === UnsignedShort5551Type ) return 32820;
                if ( p === UnsignedShort565Type ) return 33635;
    
                if ( p === ByteType ) return 5120;
                if ( p === ShortType ) return 5122;
                if ( p === UnsignedShortType ) return 5123;
                if ( p === IntType ) return 5124;
                if ( p === UnsignedIntType ) return 5125;
                if ( p === FloatType ) return 5126;
    
                if ( p === HalfFloatType ) {
    
                    if ( capabilities.isWebGL2 ) return 5131;
    
                    extension = extensions.get( 'OES_texture_half_float' );
    
                    if ( extension !== null ) return extension.HALF_FLOAT_OES;
    
                }
    
                if ( p === AlphaFormat ) return 6406;
                if ( p === RGBFormat ) return 6407;
                if ( p === RGBAFormat ) return 6408;
                if ( p === LuminanceFormat ) return 6409;
                if ( p === LuminanceAlphaFormat ) return 6410;
                if ( p === DepthFormat ) return 6402;
                if ( p === DepthStencilFormat ) return 34041;
                if ( p === RedFormat ) return 6403;
    
                if ( p === AddEquation ) return 32774;
                if ( p === SubtractEquation ) return 32778;
                if ( p === ReverseSubtractEquation ) return 32779;
    
                if ( p === ZeroFactor ) return 0;
                if ( p === OneFactor ) return 1;
                if ( p === SrcColorFactor ) return 768;
                if ( p === OneMinusSrcColorFactor ) return 769;
                if ( p === SrcAlphaFactor ) return 770;
                if ( p === OneMinusSrcAlphaFactor ) return 771;
                if ( p === DstAlphaFactor ) return 772;
                if ( p === OneMinusDstAlphaFactor ) return 773;
    
                if ( p === DstColorFactor ) return 774;
                if ( p === OneMinusDstColorFactor ) return 775;
                if ( p === SrcAlphaSaturateFactor ) return 776;
    
                if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
                    p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {
    
                    extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
    
                    if ( extension !== null ) {
    
                        if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                        if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                        if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                        if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
    
                    }
    
                }
    
                if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
                    p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {
    
                    extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
    
                    if ( extension !== null ) {
    
                        if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                        if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                        if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                        if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
    
                    }
    
                }
    
                if ( p === RGB_ETC1_Format ) {
    
                    extension = extensions.get( 'WEBGL_compressed_texture_etc1' );
    
                    if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;
    
                }
    
                if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
                    p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
                    p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
                    p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
                    p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {
    
                    extension = extensions.get( 'WEBGL_compressed_texture_astc' );
    
                    if ( extension !== null ) {
    
                        return p;
    
                    }
    
                }
    
                if ( p === MinEquation || p === MaxEquation ) {
    
                    if ( capabilities.isWebGL2 ) {
    
                        if ( p === MinEquation ) return 32775;
                        if ( p === MaxEquation ) return 32776;
    
                    }
    
                    extension = extensions.get( 'EXT_blend_minmax' );
    
                    if ( extension !== null ) {
    
                        if ( p === MinEquation ) return extension.MIN_EXT;
                        if ( p === MaxEquation ) return extension.MAX_EXT;
    
                    }
    
                }
    
                if ( p === UnsignedInt248Type ) {
    
                    if ( capabilities.isWebGL2 ) return 34042;
    
                    extension = extensions.get( 'WEBGL_depth_texture' );
    
                    if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;
    
                }
    
                return 0;
    
            }
    
            return { convert: convert };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function Group() {
    
            Object3D.call( this );
    
            this.type = 'Group';
    
        }
    
        Group.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Group,
    
            isGroup: true
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author mikael emtinger / http://gomo.se/
         * @author WestLangley / http://github.com/WestLangley
        */
    
        function Camera() {
    
            Object3D.call( this );
    
            this.type = 'Camera';
    
            this.matrixWorldInverse = new Matrix4();
    
            this.projectionMatrix = new Matrix4();
            this.projectionMatrixInverse = new Matrix4();
    
        }
    
        Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Camera,
    
            isCamera: true,
    
            copy: function ( source, recursive ) {
    
                Object3D.prototype.copy.call( this, source, recursive );
    
                this.matrixWorldInverse.copy( source.matrixWorldInverse );
    
                this.projectionMatrix.copy( source.projectionMatrix );
                this.projectionMatrixInverse.copy( source.projectionMatrixInverse );
    
                return this;
    
            },
    
            getWorldDirection: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
                    target = new Vector3();
    
                }
    
                this.updateMatrixWorld( true );
    
                var e = this.matrixWorld.elements;
    
                return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();
    
            },
    
            updateMatrixWorld: function ( force ) {
    
                Object3D.prototype.updateMatrixWorld.call( this, force );
    
                this.matrixWorldInverse.getInverse( this.matrixWorld );
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author greggman / http://games.greggman.com/
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * @author tschw
         */
    
        function PerspectiveCamera( fov, aspect, near, far ) {
    
            Camera.call( this );
    
            this.type = 'PerspectiveCamera';
    
            this.fov = fov !== undefined ? fov : 50;
            this.zoom = 1;
    
            this.near = near !== undefined ? near : 0.1;
            this.far = far !== undefined ? far : 2000;
            this.focus = 10;
    
            this.aspect = aspect !== undefined ? aspect : 1;
            this.view = null;
    
            this.filmGauge = 35;	// width of the film (default in millimeters)
            this.filmOffset = 0;	// horizontal film offset (same unit as gauge)
    
            this.updateProjectionMatrix();
    
        }
    
        PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
    
            constructor: PerspectiveCamera,
    
            isPerspectiveCamera: true,
    
            copy: function ( source, recursive ) {
    
                Camera.prototype.copy.call( this, source, recursive );
    
                this.fov = source.fov;
                this.zoom = source.zoom;
    
                this.near = source.near;
                this.far = source.far;
                this.focus = source.focus;
    
                this.aspect = source.aspect;
                this.view = source.view === null ? null : Object.assign( {}, source.view );
    
                this.filmGauge = source.filmGauge;
                this.filmOffset = source.filmOffset;
    
                return this;
    
            },
    
            /**
             * Sets the FOV by focal length in respect to the current .filmGauge.
             *
             * The default film gauge is 35, so that the focal length can be specified for
             * a 35mm (full frame) camera.
             *
             * Values for focal length and film gauge must have the same unit.
             */
            setFocalLength: function ( focalLength ) {
    
                // see http://www.bobatkins.com/photography/technical/field_of_view.html
                var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
    
                this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
                this.updateProjectionMatrix();
    
            },
    
            /**
             * Calculates the focal length from the current .fov and .filmGauge.
             */
            getFocalLength: function () {
    
                var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );
    
                return 0.5 * this.getFilmHeight() / vExtentSlope;
    
            },
    
            getEffectiveFOV: function () {
    
                return _Math.RAD2DEG * 2 * Math.atan(
                    Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );
    
            },
    
            getFilmWidth: function () {
    
                // film not completely covered in portrait format (aspect < 1)
                return this.filmGauge * Math.min( this.aspect, 1 );
    
            },
    
            getFilmHeight: function () {
    
                // film not completely covered in landscape format (aspect > 1)
                return this.filmGauge / Math.max( this.aspect, 1 );
    
            },
    
            /**
             * Sets an offset in a larger frustum. This is useful for multi-window or
             * multi-monitor/multi-machine setups.
             *
             * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
             * the monitors are in grid like this
             *
             *   +---+---+---+
             *   | A | B | C |
             *   +---+---+---+
             *   | D | E | F |
             *   +---+---+---+
             *
             * then for each monitor you would call it like this
             *
             *   var w = 1920;
             *   var h = 1080;
             *   var fullWidth = w * 3;
             *   var fullHeight = h * 2;
             *
             *   --A--
             *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
             *   --B--
             *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
             *   --C--
             *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
             *   --D--
             *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
             *   --E--
             *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
             *   --F--
             *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
             *
             *   Note there is no reason monitors have to be the same size or in a grid.
             */
            setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
    
                this.aspect = fullWidth / fullHeight;
    
                if ( this.view === null ) {
    
                    this.view = {
                        enabled: true,
                        fullWidth: 1,
                        fullHeight: 1,
                        offsetX: 0,
                        offsetY: 0,
                        width: 1,
                        height: 1
                    };
    
                }
    
                this.view.enabled = true;
                this.view.fullWidth = fullWidth;
                this.view.fullHeight = fullHeight;
                this.view.offsetX = x;
                this.view.offsetY = y;
                this.view.width = width;
                this.view.height = height;
    
                this.updateProjectionMatrix();
    
            },
    
            clearViewOffset: function () {
    
                if ( this.view !== null ) {
    
                    this.view.enabled = false;
    
                }
    
                this.updateProjectionMatrix();
    
            },
    
            updateProjectionMatrix: function () {
    
                var near = this.near,
                    top = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
                    height = 2 * top,
                    width = this.aspect * height,
                    left = - 0.5 * width,
                    view = this.view;
    
                if ( this.view !== null && this.view.enabled ) {
    
                    var fullWidth = view.fullWidth,
                        fullHeight = view.fullHeight;
    
                    left += view.offsetX * width / fullWidth;
                    top -= view.offsetY * height / fullHeight;
                    width *= view.width / fullWidth;
                    height *= view.height / fullHeight;
    
                }
    
                var skew = this.filmOffset;
                if ( skew !== 0 ) left += near * skew / this.getFilmWidth();
    
                this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );
    
                this.projectionMatrixInverse.getInverse( this.projectionMatrix );
    
            },
    
            toJSON: function ( meta ) {
    
                var data = Object3D.prototype.toJSON.call( this, meta );
    
                data.object.fov = this.fov;
                data.object.zoom = this.zoom;
    
                data.object.near = this.near;
                data.object.far = this.far;
                data.object.focus = this.focus;
    
                data.object.aspect = this.aspect;
    
                if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
    
                data.object.filmGauge = this.filmGauge;
                data.object.filmOffset = this.filmOffset;
    
                return data;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function ArrayCamera( array ) {
    
            PerspectiveCamera.call( this );
    
            this.cameras = array || [];
    
        }
    
        ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {
    
            constructor: ArrayCamera,
    
            isArrayCamera: true
    
        } );
    
        /**
         * @author jsantell / https://www.jsantell.com/
         * @author mrdoob / http://mrdoob.com/
         */
    
        var cameraLPos = new Vector3();
        var cameraRPos = new Vector3();
    
        /**
         * Assumes 2 cameras that are parallel and share an X-axis, and that
         * the cameras' projection and world matrices have already been set.
         * And that near and far planes are identical for both cameras.
         * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
         */
        function setProjectionFromUnion( camera, cameraL, cameraR ) {
    
            cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
            cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );
    
            var ipd = cameraLPos.distanceTo( cameraRPos );
    
            var projL = cameraL.projectionMatrix.elements;
            var projR = cameraR.projectionMatrix.elements;
    
            // VR systems will have identical far and near planes, and
            // most likely identical top and bottom frustum extents.
            // Use the left camera for these values.
            var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
            var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
            var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
            var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];
    
            var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
            var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
            var left = near * leftFov;
            var right = near * rightFov;
    
            // Calculate the new camera's position offset from the
            // left camera. xOffset should be roughly half `ipd`.
            var zOffset = ipd / ( - leftFov + rightFov );
            var xOffset = zOffset * - leftFov;
    
            // TODO: Better way to apply this offset?
            cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
            camera.translateX( xOffset );
            camera.translateZ( zOffset );
            camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
            camera.matrixWorldInverse.getInverse( camera.matrixWorld );
    
            // Find the union of the frustum values of the cameras and scale
            // the values so that the near plane's position does not change in world space,
            // although must now be relative to the new union camera.
            var near2 = near + zOffset;
            var far2 = far + zOffset;
            var left2 = left - xOffset;
            var right2 = right + ( ipd - xOffset );
            var top2 = topFov * far / far2 * near2;
            var bottom2 = bottomFov * far / far2 * near2;
    
            camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebVRManager( renderer ) {
    
            var scope = this;
    
            var device = null;
            var frameData = null;
    
            var poseTarget = null;
    
            var controllers = [];
            var standingMatrix = new Matrix4();
            var standingMatrixInverse = new Matrix4();
    
            var framebufferScaleFactor = 1.0;
    
            var frameOfReferenceType = 'stage';
    
            if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {
    
                frameData = new window.VRFrameData();
                window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );
    
            }
    
            var matrixWorldInverse = new Matrix4();
            var tempQuaternion = new Quaternion();
            var tempPosition = new Vector3();
    
            var cameraL = new PerspectiveCamera();
            cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
            cameraL.layers.enable( 1 );
    
            var cameraR = new PerspectiveCamera();
            cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
            cameraR.layers.enable( 2 );
    
            var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
            cameraVR.layers.enable( 1 );
            cameraVR.layers.enable( 2 );
    
            //
    
            function isPresenting() {
    
                return device !== null && device.isPresenting === true;
    
            }
    
            var currentSize = new Vector2(), currentPixelRatio;
    
            function onVRDisplayPresentChange() {
    
                if ( isPresenting() ) {
    
                    var eyeParameters = device.getEyeParameters( 'left' );
                    var renderWidth = eyeParameters.renderWidth * framebufferScaleFactor;
                    var renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;
    
                    currentPixelRatio = renderer.getPixelRatio();
                    renderer.getSize( currentSize );
    
                    renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );
    
                    animation.start();
    
                } else {
    
                    if ( scope.enabled ) {
    
                        renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );
    
                    }
    
                    animation.stop();
    
                }
    
            }
    
            //
    
            var triggers = [];
    
            function findGamepad( id ) {
    
                var gamepads = navigator.getGamepads && navigator.getGamepads();
    
                for ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {
    
                    var gamepad = gamepads[ i ];
    
                    if ( gamepad && ( gamepad.id === 'Daydream Controller' ||
                        gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||
                        gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||
                        gamepad.id.startsWith( 'Spatial Controller' ) ) ) {
    
                        if ( j === id ) return gamepad;
    
                        j ++;
    
                    }
    
                }
    
            }
    
            function updateControllers() {
    
                for ( var i = 0; i < controllers.length; i ++ ) {
    
                    var controller = controllers[ i ];
    
                    var gamepad = findGamepad( i );
    
                    if ( gamepad !== undefined && gamepad.pose !== undefined ) {
    
                        if ( gamepad.pose === null ) return;
    
                        //  Pose
    
                        var pose = gamepad.pose;
    
                        if ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );
    
                        if ( pose.position !== null ) controller.position.fromArray( pose.position );
                        if ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );
                        controller.matrix.compose( controller.position, controller.quaternion, controller.scale );
                        controller.matrix.premultiply( standingMatrix );
                        controller.matrix.decompose( controller.position, controller.quaternion, controller.scale );
                        controller.matrixWorldNeedsUpdate = true;
                        controller.visible = true;
    
                        //  Trigger
    
                        var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;
    
                        if ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {
    
                            triggers[ i ] = gamepad.buttons[ buttonId ].pressed;
    
                            if ( triggers[ i ] === true ) {
    
                                controller.dispatchEvent( { type: 'selectstart' } );
    
                            } else {
    
                                controller.dispatchEvent( { type: 'selectend' } );
                                controller.dispatchEvent( { type: 'select' } );
    
                            }
    
                        }
    
                    } else {
    
                        controller.visible = false;
    
                    }
    
                }
    
            }
    
            //
    
            this.enabled = false;
    
            this.getController = function ( id ) {
    
                var controller = controllers[ id ];
    
                if ( controller === undefined ) {
    
                    controller = new Group();
                    controller.matrixAutoUpdate = false;
                    controller.visible = false;
    
                    controllers[ id ] = controller;
    
                }
    
                return controller;
    
            };
    
            this.getDevice = function () {
    
                return device;
    
            };
    
            this.setDevice = function ( value ) {
    
                if ( value !== undefined ) device = value;
    
                animation.setContext( value );
    
            };
    
            this.setFramebufferScaleFactor = function ( value ) {
    
                framebufferScaleFactor = value;
    
            };
    
            this.setFrameOfReferenceType = function ( value ) {
    
                frameOfReferenceType = value;
    
            };
    
            this.setPoseTarget = function ( object ) {
    
                if ( object !== undefined ) poseTarget = object;
    
            };
    
            this.getCamera = function ( camera ) {
    
                var userHeight = frameOfReferenceType === 'stage' ? 1.6 : 0;
    
                if ( isPresenting() === false ) {
    
                    camera.position.set( 0, userHeight, 0 );
                    camera.rotation.set( 0, 0, 0 );
    
                    return camera;
    
                }
    
                device.depthNear = camera.near;
                device.depthFar = camera.far;
    
                device.getFrameData( frameData );
    
                //
    
                if ( frameOfReferenceType === 'stage' ) {
    
                    var stageParameters = device.stageParameters;
    
                    if ( stageParameters ) {
    
                        standingMatrix.fromArray( stageParameters.sittingToStandingTransform );
    
                    } else {
    
                        standingMatrix.makeTranslation( 0, userHeight, 0 );
    
                    }
    
                }
    
    
                var pose = frameData.pose;
                var poseObject = poseTarget !== null ? poseTarget : camera;
    
                // We want to manipulate poseObject by its position and quaternion components since users may rely on them.
                poseObject.matrix.copy( standingMatrix );
                poseObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );
    
                if ( pose.orientation !== null ) {
    
                    tempQuaternion.fromArray( pose.orientation );
                    poseObject.quaternion.multiply( tempQuaternion );
    
                }
    
                if ( pose.position !== null ) {
    
                    tempQuaternion.setFromRotationMatrix( standingMatrix );
                    tempPosition.fromArray( pose.position );
                    tempPosition.applyQuaternion( tempQuaternion );
                    poseObject.position.add( tempPosition );
    
                }
    
                poseObject.updateMatrixWorld();
    
                //
    
                cameraL.near = camera.near;
                cameraR.near = camera.near;
    
                cameraL.far = camera.far;
                cameraR.far = camera.far;
    
                cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
                cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );
    
                // TODO (mrdoob) Double check this code
    
                standingMatrixInverse.getInverse( standingMatrix );
    
                if ( frameOfReferenceType === 'stage' ) {
    
                    cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
                    cameraR.matrixWorldInverse.multiply( standingMatrixInverse );
    
                }
    
                var parent = poseObject.parent;
    
                if ( parent !== null ) {
    
                    matrixWorldInverse.getInverse( parent.matrixWorld );
    
                    cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
                    cameraR.matrixWorldInverse.multiply( matrixWorldInverse );
    
                }
    
                // envMap and Mirror needs camera.matrixWorld
    
                cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
                cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );
    
                cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
                cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );
    
                setProjectionFromUnion( cameraVR, cameraL, cameraR );
    
                //
    
                var layers = device.getLayers();
    
                if ( layers.length ) {
    
                    var layer = layers[ 0 ];
    
                    if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {
    
                        cameraL.bounds.fromArray( layer.leftBounds );
    
                    }
    
                    if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {
    
                        cameraR.bounds.fromArray( layer.rightBounds );
    
                    }
    
                }
    
                updateControllers();
    
                return cameraVR;
    
            };
    
            this.getStandingMatrix = function () {
    
                return standingMatrix;
    
            };
    
            this.isPresenting = isPresenting;
    
            // Animation Loop
    
            var animation = new WebGLAnimation();
    
            this.setAnimationLoop = function ( callback ) {
    
                animation.setAnimationLoop( callback );
    
                if ( isPresenting() ) animation.start();
    
            };
    
            this.submitFrame = function () {
    
                if ( isPresenting() ) device.submitFrame();
    
            };
    
            this.dispose = function () {
    
                if ( typeof window !== 'undefined' ) {
    
                    window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );
    
                }
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function WebXRManager( renderer ) {
    
            var gl = renderer.context;
    
            var device = null;
            var session = null;
    
            var framebufferScaleFactor = 1.0;
    
            var frameOfReference = null;
            var frameOfReferenceType = 'stage';
    
            var pose = null;
    
            var controllers = [];
            var inputSources = [];
    
            function isPresenting() {
    
                return session !== null && frameOfReference !== null;
    
            }
    
            //
    
            var cameraL = new PerspectiveCamera();
            cameraL.layers.enable( 1 );
            cameraL.viewport = new Vector4();
    
            var cameraR = new PerspectiveCamera();
            cameraR.layers.enable( 2 );
            cameraR.viewport = new Vector4();
    
            var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
            cameraVR.layers.enable( 1 );
            cameraVR.layers.enable( 2 );
    
            //
    
            this.enabled = false;
    
            this.getController = function ( id ) {
    
                var controller = controllers[ id ];
    
                if ( controller === undefined ) {
    
                    controller = new Group();
                    controller.matrixAutoUpdate = false;
                    controller.visible = false;
    
                    controllers[ id ] = controller;
    
                }
    
                return controller;
    
            };
    
            this.getDevice = function () {
    
                return device;
    
            };
    
            this.setDevice = function ( value ) {
    
                if ( value !== undefined ) device = value;
                if ( value instanceof XRDevice ) gl.setCompatibleXRDevice( value );
    
            };
    
            //
    
            function onSessionEvent( event ) {
    
                var controller = controllers[ inputSources.indexOf( event.inputSource ) ];
                if ( controller ) controller.dispatchEvent( { type: event.type } );
    
            }
    
            function onSessionEnd() {
    
                renderer.setFramebuffer( null );
                renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
                animation.stop();
    
            }
    
            this.setFramebufferScaleFactor = function ( value ) {
    
                framebufferScaleFactor = value;
    
            };
    
            this.setFrameOfReferenceType = function ( value ) {
    
                frameOfReferenceType = value;
    
            };
    
            this.setSession = function ( value ) {
    
                session = value;
    
                if ( session !== null ) {
    
                    session.addEventListener( 'select', onSessionEvent );
                    session.addEventListener( 'selectstart', onSessionEvent );
                    session.addEventListener( 'selectend', onSessionEvent );
                    session.addEventListener( 'end', onSessionEnd );
    
                    session.baseLayer = new XRWebGLLayer( session, gl, { framebufferScaleFactor: framebufferScaleFactor } );
                    session.requestFrameOfReference( frameOfReferenceType ).then( function ( value ) {
    
                        frameOfReference = value;
    
                        renderer.setFramebuffer( session.baseLayer.framebuffer );
    
                        animation.setContext( session );
                        animation.start();
    
                    } );
    
                    //
    
                    inputSources = session.getInputSources();
    
                    session.addEventListener( 'inputsourceschange', function () {
    
                        inputSources = session.getInputSources();
                        console.log( inputSources );
    
                        for ( var i = 0; i < controllers.length; i ++ ) {
    
                            var controller = controllers[ i ];
                            controller.userData.inputSource = inputSources[ i ];
    
                        }
    
                    } );
    
                }
    
            };
    
            function updateCamera( camera, parent ) {
    
                if ( parent === null ) {
    
                    camera.matrixWorld.copy( camera.matrix );
    
                } else {
    
                    camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );
    
                }
    
                camera.matrixWorldInverse.getInverse( camera.matrixWorld );
    
            }
    
            this.getCamera = function ( camera ) {
    
                if ( isPresenting() ) {
    
                    var parent = camera.parent;
                    var cameras = cameraVR.cameras;
    
                    updateCamera( cameraVR, parent );
    
                    for ( var i = 0; i < cameras.length; i ++ ) {
    
                        updateCamera( cameras[ i ], parent );
    
                    }
    
                    // update camera and its children
    
                    camera.matrixWorld.copy( cameraVR.matrixWorld );
    
                    var children = camera.children;
    
                    for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                        children[ i ].updateMatrixWorld( true );
    
                    }
    
                    setProjectionFromUnion( cameraVR, cameraL, cameraR );
    
                    return cameraVR;
    
                }
    
                return camera;
    
            };
    
            this.isPresenting = isPresenting;
    
            // Animation Loop
    
            var onAnimationFrameCallback = null;
    
            function onAnimationFrame( time, frame ) {
    
                pose = frame.getDevicePose( frameOfReference );
    
                if ( pose !== null ) {
    
                    var layer = session.baseLayer;
                    var views = frame.views;
    
                    for ( var i = 0; i < views.length; i ++ ) {
    
                        var view = views[ i ];
                        var viewport = layer.getViewport( view );
                        var viewMatrix = pose.getViewMatrix( view );
    
                        var camera = cameraVR.cameras[ i ];
                        camera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );
                        camera.projectionMatrix.fromArray( view.projectionMatrix );
                        camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );
    
                        if ( i === 0 ) {
    
                            cameraVR.matrix.copy( camera.matrix );
    
                        }
    
                    }
    
                }
    
                //
    
                for ( var i = 0; i < controllers.length; i ++ ) {
    
                    var controller = controllers[ i ];
    
                    var inputSource = inputSources[ i ];
    
                    if ( inputSource ) {
    
                        var inputPose = frame.getInputPose( inputSource, frameOfReference );
    
                        if ( inputPose !== null ) {
    
                            if ( 'targetRay' in inputPose ) {
    
                                controller.matrix.elements = inputPose.targetRay.transformMatrix;
    
                            } else if ( 'pointerMatrix' in inputPose ) {
    
                                // DEPRECATED
    
                                controller.matrix.elements = inputPose.pointerMatrix;
    
                            }
    
                            controller.matrix.decompose( controller.position, controller.rotation, controller.scale );
                            controller.visible = true;
    
                            continue;
    
                        }
    
                    }
    
                    controller.visible = false;
    
                }
    
                if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );
    
            }
    
            var animation = new WebGLAnimation();
            animation.setAnimationLoop( onAnimationFrame );
    
            this.setAnimationLoop = function ( callback ) {
    
                onAnimationFrameCallback = callback;
    
            };
    
            this.dispose = function () {};
    
            // DEPRECATED
    
            this.getStandingMatrix = function () {
    
                console.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );
                return new Matrix4();
    
            };
    
            this.submitFrame = function () {};
    
        }
    
        /**
         * @author supereggbert / http://www.paulbrunt.co.uk/
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         * @author szimek / https://github.com/szimek/
         * @author tschw
         */
    
        function WebGLRenderer( parameters ) {
    
            console.log( 'THREE.WebGLRenderer', REVISION );
    
            parameters = parameters || {};
    
            var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
                _context = parameters.context !== undefined ? parameters.context : null,
    
                _alpha = parameters.alpha !== undefined ? parameters.alpha : false,
                _depth = parameters.depth !== undefined ? parameters.depth : true,
                _stencil = parameters.stencil !== undefined ? parameters.stencil : true,
                _antialias = parameters.antialias !== undefined ? parameters.antialias : false,
                _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
                _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
                _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';
    
            var currentRenderList = null;
            var currentRenderState = null;
    
            // public properties
    
            this.domElement = _canvas;
            this.context = null;
    
            // clearing
    
            this.autoClear = true;
            this.autoClearColor = true;
            this.autoClearDepth = true;
            this.autoClearStencil = true;
    
            // scene graph
    
            this.sortObjects = true;
    
            // user-defined clipping
    
            this.clippingPlanes = [];
            this.localClippingEnabled = false;
    
            // physically based shading
    
            this.gammaFactor = 2.0;	// for backwards compatibility
            this.gammaInput = false;
            this.gammaOutput = false;
    
            // physical lights
    
            this.physicallyCorrectLights = false;
    
            // tone mapping
    
            this.toneMapping = LinearToneMapping;
            this.toneMappingExposure = 1.0;
            this.toneMappingWhitePoint = 1.0;
    
            // morphs
    
            this.maxMorphTargets = 8;
            this.maxMorphNormals = 4;
    
            // internal properties
    
            var _this = this,
    
                _isContextLost = false,
    
                // internal state cache
    
                _framebuffer = null,
    
                _currentRenderTarget = null,
                _currentFramebuffer = null,
                _currentMaterialId = - 1,
    
                // geometry and program caching
    
                _currentGeometryProgram = {
                    geometry: null,
                    program: null,
                    wireframe: false
                },
    
                _currentCamera = null,
                _currentArrayCamera = null,
    
                _currentViewport = new Vector4(),
                _currentScissor = new Vector4(),
                _currentScissorTest = null,
    
                //
    
                _width = _canvas.width,
                _height = _canvas.height,
    
                _pixelRatio = 1,
    
                _viewport = new Vector4( 0, 0, _width, _height ),
                _scissor = new Vector4( 0, 0, _width, _height ),
                _scissorTest = false,
    
                // frustum
    
                _frustum = new Frustum(),
    
                // clipping
    
                _clipping = new WebGLClipping(),
                _clippingEnabled = false,
                _localClippingEnabled = false,
    
                // camera matrices cache
    
                _projScreenMatrix = new Matrix4(),
    
                _vector3 = new Vector3();
    
            function getTargetPixelRatio() {
    
                return _currentRenderTarget === null ? _pixelRatio : 1;
    
            }
    
            // initialize
    
            var _gl;
    
            try {
    
                var contextAttributes = {
                    alpha: _alpha,
                    depth: _depth,
                    stencil: _stencil,
                    antialias: _antialias,
                    premultipliedAlpha: _premultipliedAlpha,
                    preserveDrawingBuffer: _preserveDrawingBuffer,
                    powerPreference: _powerPreference
                };
    
                // event listeners must be registered before WebGL context is created, see #12753
    
                _canvas.addEventListener( 'webglcontextlost', onContextLost, false );
                _canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
    
                _gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );
    
                if ( _gl === null ) {
    
                    if ( _canvas.getContext( 'webgl' ) !== null ) {
    
                        throw new Error( 'Error creating WebGL context with your selected attributes.' );
    
                    } else {
    
                        throw new Error( 'Error creating WebGL context.' );
    
                    }
    
                }
    
                // Some experimental-webgl implementations do not have getShaderPrecisionFormat
    
                if ( _gl.getShaderPrecisionFormat === undefined ) {
    
                    _gl.getShaderPrecisionFormat = function () {
    
                        return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };
    
                    };
    
                }
    
            } catch ( error ) {
    
                console.error( 'THREE.WebGLRenderer: ' + error.message );
                throw error;
    
            }
    
            var extensions, capabilities, state, info;
            var properties, textures, attributes, geometries, objects;
            var programCache, renderLists, renderStates;
    
            var background, morphtargets, bufferRenderer, indexedBufferRenderer;
    
            var utils;
    
            function initGLContext() {
    
                extensions = new WebGLExtensions( _gl );
    
                capabilities = new WebGLCapabilities( _gl, extensions, parameters );
    
                if ( ! capabilities.isWebGL2 ) {
    
                    extensions.get( 'WEBGL_depth_texture' );
                    extensions.get( 'OES_texture_float' );
                    extensions.get( 'OES_texture_half_float' );
                    extensions.get( 'OES_texture_half_float_linear' );
                    extensions.get( 'OES_standard_derivatives' );
                    extensions.get( 'OES_element_index_uint' );
                    extensions.get( 'ANGLE_instanced_arrays' );
    
                }
    
                extensions.get( 'OES_texture_float_linear' );
    
                utils = new WebGLUtils( _gl, extensions, capabilities );
    
                state = new WebGLState( _gl, extensions, utils, capabilities );
                state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
                state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );
    
                info = new WebGLInfo( _gl );
                properties = new WebGLProperties();
                textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
                attributes = new WebGLAttributes( _gl );
                geometries = new WebGLGeometries( _gl, attributes, info );
                objects = new WebGLObjects( geometries, info );
                morphtargets = new WebGLMorphtargets( _gl );
                programCache = new WebGLPrograms( _this, extensions, capabilities, textures );
                renderLists = new WebGLRenderLists();
                renderStates = new WebGLRenderStates();
    
                background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );
    
                bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
                indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );
    
                info.programs = programCache.programs;
    
                _this.context = _gl;
                _this.capabilities = capabilities;
                _this.extensions = extensions;
                _this.properties = properties;
                _this.renderLists = renderLists;
                _this.state = state;
                _this.info = info;
    
            }
    
            initGLContext();
    
            // vr
    
            var vr = null;
    
            if ( typeof navigator !== 'undefined' ) {
    
                vr = ( 'xr' in navigator ) ? new WebXRManager( _this ) : new WebVRManager( _this );
    
            }
    
            this.vr = vr;
    
            // shadow map
    
            var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );
    
            this.shadowMap = shadowMap;
    
            // API
    
            this.getContext = function () {
    
                return _gl;
    
            };
    
            this.getContextAttributes = function () {
    
                return _gl.getContextAttributes();
    
            };
    
            this.forceContextLoss = function () {
    
                var extension = extensions.get( 'WEBGL_lose_context' );
                if ( extension ) extension.loseContext();
    
            };
    
            this.forceContextRestore = function () {
    
                var extension = extensions.get( 'WEBGL_lose_context' );
                if ( extension ) extension.restoreContext();
    
            };
    
            this.getPixelRatio = function () {
    
                return _pixelRatio;
    
            };
    
            this.setPixelRatio = function ( value ) {
    
                if ( value === undefined ) return;
    
                _pixelRatio = value;
    
                this.setSize( _width, _height, false );
    
            };
    
            this.getSize = function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );
    
                    target = new Vector2();
    
                }
    
                return target.set( _width, _height );
    
            };
    
            this.setSize = function ( width, height, updateStyle ) {
    
                if ( vr.isPresenting() ) {
    
                    console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
                    return;
    
                }
    
                _width = width;
                _height = height;
    
                _canvas.width = width * _pixelRatio;
                _canvas.height = height * _pixelRatio;
    
                if ( updateStyle !== false ) {
    
                    _canvas.style.width = width + 'px';
                    _canvas.style.height = height + 'px';
    
                }
    
                this.setViewport( 0, 0, width, height );
    
            };
    
            this.getDrawingBufferSize = function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );
    
                    target = new Vector2();
    
                }
    
                return target.set( _width * _pixelRatio, _height * _pixelRatio );
    
            };
    
            this.setDrawingBufferSize = function ( width, height, pixelRatio ) {
    
                _width = width;
                _height = height;
    
                _pixelRatio = pixelRatio;
    
                _canvas.width = width * pixelRatio;
                _canvas.height = height * pixelRatio;
    
                this.setViewport( 0, 0, width, height );
    
            };
    
            this.getCurrentViewport = function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );
    
                    target = new Vector4();
    
                }
    
                return target.copy( _currentViewport );
    
            };
    
            this.getViewport = function ( target ) {
    
                return target.copy( _viewport );
    
            };
    
            this.setViewport = function ( x, y, width, height ) {
    
                if ( x.isVector4 ) {
    
                    _viewport.set( x.x, x.y, x.z, x.w );
    
                } else {
    
                    _viewport.set( x, y, width, height );
    
                }
    
                state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );
    
            };
    
            this.getScissor = function ( target ) {
    
                return target.copy( _scissor );
    
            };
    
            this.setScissor = function ( x, y, width, height ) {
    
                if ( x.isVector4 ) {
    
                    _scissor.set( x.x, x.y, x.z, x.w );
    
                } else {
    
                    _scissor.set( x, y, width, height );
    
                }
    
                state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
    
            };
    
            this.getScissorTest = function () {
    
                return _scissorTest;
    
            };
    
            this.setScissorTest = function ( boolean ) {
    
                state.setScissorTest( _scissorTest = boolean );
    
            };
    
            // Clearing
    
            this.getClearColor = function () {
    
                return background.getClearColor();
    
            };
    
            this.setClearColor = function () {
    
                background.setClearColor.apply( background, arguments );
    
            };
    
            this.getClearAlpha = function () {
    
                return background.getClearAlpha();
    
            };
    
            this.setClearAlpha = function () {
    
                background.setClearAlpha.apply( background, arguments );
    
            };
    
            this.clear = function ( color, depth, stencil ) {
    
                var bits = 0;
    
                if ( color === undefined || color ) bits |= 16384;
                if ( depth === undefined || depth ) bits |= 256;
                if ( stencil === undefined || stencil ) bits |= 1024;
    
                _gl.clear( bits );
    
            };
    
            this.clearColor = function () {
    
                this.clear( true, false, false );
    
            };
    
            this.clearDepth = function () {
    
                this.clear( false, true, false );
    
            };
    
            this.clearStencil = function () {
    
                this.clear( false, false, true );
    
            };
    
            //
    
            this.dispose = function () {
    
                _canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
                _canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
    
                renderLists.dispose();
                renderStates.dispose();
                properties.dispose();
                objects.dispose();
    
                vr.dispose();
    
                animation.stop();
    
            };
    
            // Events
    
            function onContextLost( event ) {
    
                event.preventDefault();
    
                console.log( 'THREE.WebGLRenderer: Context Lost.' );
    
                _isContextLost = true;
    
            }
    
            function onContextRestore( /* event */ ) {
    
                console.log( 'THREE.WebGLRenderer: Context Restored.' );
    
                _isContextLost = false;
    
                initGLContext();
    
            }
    
            function onMaterialDispose( event ) {
    
                var material = event.target;
    
                material.removeEventListener( 'dispose', onMaterialDispose );
    
                deallocateMaterial( material );
    
            }
    
            // Buffer deallocation
    
            function deallocateMaterial( material ) {
    
                releaseMaterialProgramReference( material );
    
                properties.remove( material );
    
            }
    
    
            function releaseMaterialProgramReference( material ) {
    
                var programInfo = properties.get( material ).program;
    
                material.program = undefined;
    
                if ( programInfo !== undefined ) {
    
                    programCache.releaseProgram( programInfo );
    
                }
    
            }
    
            // Buffer rendering
    
            function renderObjectImmediate( object, program ) {
    
                object.render( function ( object ) {
    
                    _this.renderBufferImmediate( object, program );
    
                } );
    
            }
    
            this.renderBufferImmediate = function ( object, program ) {
    
                state.initAttributes();
    
                var buffers = properties.get( object );
    
                if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
                if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
                if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
                if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();
    
                var programAttributes = program.getAttributes();
    
                if ( object.hasPositions ) {
    
                    _gl.bindBuffer( 34962, buffers.position );
                    _gl.bufferData( 34962, object.positionArray, 35048 );
    
                    state.enableAttribute( programAttributes.position );
                    _gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );
    
                }
    
                if ( object.hasNormals ) {
    
                    _gl.bindBuffer( 34962, buffers.normal );
                    _gl.bufferData( 34962, object.normalArray, 35048 );
    
                    state.enableAttribute( programAttributes.normal );
                    _gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );
    
                }
    
                if ( object.hasUvs ) {
    
                    _gl.bindBuffer( 34962, buffers.uv );
                    _gl.bufferData( 34962, object.uvArray, 35048 );
    
                    state.enableAttribute( programAttributes.uv );
                    _gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );
    
                }
    
                if ( object.hasColors ) {
    
                    _gl.bindBuffer( 34962, buffers.color );
                    _gl.bufferData( 34962, object.colorArray, 35048 );
    
                    state.enableAttribute( programAttributes.color );
                    _gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );
    
                }
    
                state.disableUnusedAttributes();
    
                _gl.drawArrays( 4, 0, object.count );
    
                object.count = 0;
    
            };
    
            this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {
    
                var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );
    
                state.setMaterial( material, frontFaceCW );
    
                var program = setProgram( camera, fog, material, object );
    
                var updateBuffers = false;
    
                if ( _currentGeometryProgram.geometry !== geometry.id ||
                    _currentGeometryProgram.program !== program.id ||
                    _currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {
    
                    _currentGeometryProgram.geometry = geometry.id;
                    _currentGeometryProgram.program = program.id;
                    _currentGeometryProgram.wireframe = material.wireframe === true;
                    updateBuffers = true;
    
                }
    
                if ( object.morphTargetInfluences ) {
    
                    morphtargets.update( object, geometry, material, program );
    
                    updateBuffers = true;
    
                }
    
                //
    
                var index = geometry.index;
                var position = geometry.attributes.position;
                var rangeFactor = 1;
    
                if ( material.wireframe === true ) {
    
                    index = geometries.getWireframeAttribute( geometry );
                    rangeFactor = 2;
    
                }
    
                var attribute;
                var renderer = bufferRenderer;
    
                if ( index !== null ) {
    
                    attribute = attributes.get( index );
    
                    renderer = indexedBufferRenderer;
                    renderer.setIndex( attribute );
    
                }
    
                if ( updateBuffers ) {
    
                    setupVertexAttributes( material, program, geometry );
    
                    if ( index !== null ) {
    
                        _gl.bindBuffer( 34963, attribute.buffer );
    
                    }
    
                }
    
                //
    
                var dataCount = Infinity;
    
                if ( index !== null ) {
    
                    dataCount = index.count;
    
                } else if ( position !== undefined ) {
    
                    dataCount = position.count;
    
                }
    
                var rangeStart = geometry.drawRange.start * rangeFactor;
                var rangeCount = geometry.drawRange.count * rangeFactor;
    
                var groupStart = group !== null ? group.start * rangeFactor : 0;
                var groupCount = group !== null ? group.count * rangeFactor : Infinity;
    
                var drawStart = Math.max( rangeStart, groupStart );
                var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
    
                var drawCount = Math.max( 0, drawEnd - drawStart + 1 );
    
                if ( drawCount === 0 ) return;
    
                //
    
                if ( object.isMesh ) {
    
                    if ( material.wireframe === true ) {
    
                        state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
                        renderer.setMode( 1 );
    
                    } else {
    
                        switch ( object.drawMode ) {
    
                            case TrianglesDrawMode:
                                renderer.setMode( 4 );
                                break;
    
                            case TriangleStripDrawMode:
                                renderer.setMode( 5 );
                                break;
    
                            case TriangleFanDrawMode:
                                renderer.setMode( 6 );
                                break;
    
                        }
    
                    }
    
    
                } else if ( object.isLine ) {
    
                    var lineWidth = material.linewidth;
    
                    if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material
    
                    state.setLineWidth( lineWidth * getTargetPixelRatio() );
    
                    if ( object.isLineSegments ) {
    
                        renderer.setMode( 1 );
    
                    } else if ( object.isLineLoop ) {
    
                        renderer.setMode( 2 );
    
                    } else {
    
                        renderer.setMode( 3 );
    
                    }
    
                } else if ( object.isPoints ) {
    
                    renderer.setMode( 0 );
    
                } else if ( object.isSprite ) {
    
                    renderer.setMode( 4 );
    
                }
    
                if ( geometry && geometry.isInstancedBufferGeometry ) {
    
                    if ( geometry.maxInstancedCount > 0 ) {
    
                        renderer.renderInstances( geometry, drawStart, drawCount );
    
                    }
    
                } else {
    
                    renderer.render( drawStart, drawCount );
    
                }
    
            };
    
            function setupVertexAttributes( material, program, geometry ) {
    
                if ( geometry && geometry.isInstancedBufferGeometry && ! capabilities.isWebGL2 ) {
    
                    if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {
    
                        console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
                        return;
    
                    }
    
                }
    
                state.initAttributes();
    
                var geometryAttributes = geometry.attributes;
    
                var programAttributes = program.getAttributes();
    
                var materialDefaultAttributeValues = material.defaultAttributeValues;
    
                for ( var name in programAttributes ) {
    
                    var programAttribute = programAttributes[ name ];
    
                    if ( programAttribute >= 0 ) {
    
                        var geometryAttribute = geometryAttributes[ name ];
    
                        if ( geometryAttribute !== undefined ) {
    
                            var normalized = geometryAttribute.normalized;
                            var size = geometryAttribute.itemSize;
    
                            var attribute = attributes.get( geometryAttribute );
    
                            // TODO Attribute may not be available on context restore
    
                            if ( attribute === undefined ) continue;
    
                            var buffer = attribute.buffer;
                            var type = attribute.type;
                            var bytesPerElement = attribute.bytesPerElement;
    
                            if ( geometryAttribute.isInterleavedBufferAttribute ) {
    
                                var data = geometryAttribute.data;
                                var stride = data.stride;
                                var offset = geometryAttribute.offset;
    
                                if ( data && data.isInstancedInterleavedBuffer ) {
    
                                    state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );
    
                                    if ( geometry.maxInstancedCount === undefined ) {
    
                                        geometry.maxInstancedCount = data.meshPerAttribute * data.count;
    
                                    }
    
                                } else {
    
                                    state.enableAttribute( programAttribute );
    
                                }
    
                                _gl.bindBuffer( 34962, buffer );
                                _gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );
    
                            } else {
    
                                if ( geometryAttribute.isInstancedBufferAttribute ) {
    
                                    state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );
    
                                    if ( geometry.maxInstancedCount === undefined ) {
    
                                        geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
    
                                    }
    
                                } else {
    
                                    state.enableAttribute( programAttribute );
    
                                }
    
                                _gl.bindBuffer( 34962, buffer );
                                _gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );
    
                            }
    
                        } else if ( materialDefaultAttributeValues !== undefined ) {
    
                            var value = materialDefaultAttributeValues[ name ];
    
                            if ( value !== undefined ) {
    
                                switch ( value.length ) {
    
                                    case 2:
                                        _gl.vertexAttrib2fv( programAttribute, value );
                                        break;
    
                                    case 3:
                                        _gl.vertexAttrib3fv( programAttribute, value );
                                        break;
    
                                    case 4:
                                        _gl.vertexAttrib4fv( programAttribute, value );
                                        break;
    
                                    default:
                                        _gl.vertexAttrib1fv( programAttribute, value );
    
                                }
    
                            }
    
                        }
    
                    }
    
                }
    
                state.disableUnusedAttributes();
    
            }
    
            // Compile
    
            this.compile = function ( scene, camera ) {
    
                currentRenderState = renderStates.get( scene, camera );
                currentRenderState.init();
    
                scene.traverse( function ( object ) {
    
                    if ( object.isLight ) {
    
                        currentRenderState.pushLight( object );
    
                        if ( object.castShadow ) {
    
                            currentRenderState.pushShadow( object );
    
                        }
    
                    }
    
                } );
    
                currentRenderState.setupLights( camera );
    
                scene.traverse( function ( object ) {
    
                    if ( object.material ) {
    
                        if ( Array.isArray( object.material ) ) {
    
                            for ( var i = 0; i < object.material.length; i ++ ) {
    
                                initMaterial( object.material[ i ], scene.fog, object );
    
                            }
    
                        } else {
    
                            initMaterial( object.material, scene.fog, object );
    
                        }
    
                    }
    
                } );
    
            };
    
            // Animation Loop
    
            var onAnimationFrameCallback = null;
    
            function onAnimationFrame( time ) {
    
                if ( vr.isPresenting() ) return;
                if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );
    
            }
    
            var animation = new WebGLAnimation();
            animation.setAnimationLoop( onAnimationFrame );
    
            if ( typeof window !== 'undefined' ) animation.setContext( window );
    
            this.setAnimationLoop = function ( callback ) {
    
                onAnimationFrameCallback = callback;
                vr.setAnimationLoop( callback );
    
                animation.start();
    
            };
    
            // Rendering
    
            this.render = function ( scene, camera ) {
    
                var renderTarget, forceClear;
    
                if ( arguments[ 2 ] !== undefined ) {
    
                    console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
                    renderTarget = arguments[ 2 ];
    
                }
    
                if ( arguments[ 3 ] !== undefined ) {
    
                    console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
                    forceClear = arguments[ 3 ];
    
                }
    
                if ( ! ( camera && camera.isCamera ) ) {
    
                    console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
                    return;
    
                }
    
                if ( _isContextLost ) return;
    
                // reset caching for this frame
    
                _currentGeometryProgram.geometry = null;
                _currentGeometryProgram.program = null;
                _currentGeometryProgram.wireframe = false;
                _currentMaterialId = - 1;
                _currentCamera = null;
    
                // update scene graph
    
                if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
    
                // update camera matrices and frustum
    
                if ( camera.parent === null ) camera.updateMatrixWorld();
    
                if ( vr.enabled ) {
    
                    camera = vr.getCamera( camera );
    
                }
    
                //
    
                currentRenderState = renderStates.get( scene, camera );
                currentRenderState.init();
    
                scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );
    
                _projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
                _frustum.setFromMatrix( _projScreenMatrix );
    
                _localClippingEnabled = this.localClippingEnabled;
                _clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );
    
                currentRenderList = renderLists.get( scene, camera );
                currentRenderList.init();
    
                projectObject( scene, camera, 0, _this.sortObjects );
    
                if ( _this.sortObjects === true ) {
    
                    currentRenderList.sort();
    
                }
    
                //
    
                if ( _clippingEnabled ) _clipping.beginShadows();
    
                var shadowsArray = currentRenderState.state.shadowsArray;
    
                shadowMap.render( shadowsArray, scene, camera );
    
                currentRenderState.setupLights( camera );
    
                if ( _clippingEnabled ) _clipping.endShadows();
    
                //
    
                if ( this.info.autoReset ) this.info.reset();
    
                if ( renderTarget !== undefined ) {
    
                    this.setRenderTarget( renderTarget );
    
                }
    
                //
    
                background.render( currentRenderList, scene, camera, forceClear );
    
                // render scene
    
                var opaqueObjects = currentRenderList.opaque;
                var transparentObjects = currentRenderList.transparent;
    
                if ( scene.overrideMaterial ) {
    
                    var overrideMaterial = scene.overrideMaterial;
    
                    if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
                    if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );
    
                } else {
    
                    // opaque pass (front-to-back order)
    
                    if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );
    
                    // transparent pass (back-to-front order)
    
                    if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );
    
                }
    
                //
    
                scene.onAfterRender( _this, scene, camera );
    
                //
    
                if ( _currentRenderTarget !== null ) {
    
                    // Generate mipmap if we're using any kind of mipmap filtering
    
                    textures.updateRenderTargetMipmap( _currentRenderTarget );
    
                    // resolve multisample renderbuffers to a single-sample texture if necessary
    
                    textures.updateMultisampleRenderTarget( _currentRenderTarget );
    
                }
    
                // Ensure depth buffer writing is enabled so it can be cleared on next render
    
                state.buffers.depth.setTest( true );
                state.buffers.depth.setMask( true );
                state.buffers.color.setMask( true );
    
                state.setPolygonOffset( false );
    
                if ( vr.enabled ) {
    
                    vr.submitFrame();
    
                }
    
                // _gl.finish();
    
                currentRenderList = null;
                currentRenderState = null;
    
            };
    
            function projectObject( object, camera, groupOrder, sortObjects ) {
    
                if ( object.visible === false ) return;
    
                var visible = object.layers.test( camera.layers );
    
                if ( visible ) {
    
                    if ( object.isGroup ) {
    
                        groupOrder = object.renderOrder;
    
                    } else if ( object.isLight ) {
    
                        currentRenderState.pushLight( object );
    
                        if ( object.castShadow ) {
    
                            currentRenderState.pushShadow( object );
    
                        }
    
                    } else if ( object.isSprite ) {
    
                        if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {
    
                            if ( sortObjects ) {
    
                                _vector3.setFromMatrixPosition( object.matrixWorld )
                                    .applyMatrix4( _projScreenMatrix );
    
                            }
    
                            var geometry = objects.update( object );
                            var material = object.material;
    
                            if ( material.visible ) {
    
                                currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
    
                            }
    
                        }
    
                    } else if ( object.isImmediateRenderObject ) {
    
                        if ( sortObjects ) {
    
                            _vector3.setFromMatrixPosition( object.matrixWorld )
                                .applyMatrix4( _projScreenMatrix );
    
                        }
    
                        currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );
    
                    } else if ( object.isMesh || object.isLine || object.isPoints ) {
    
                        if ( object.isSkinnedMesh ) {
    
                            object.skeleton.update();
    
                        }
    
                        if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {
    
                            if ( sortObjects ) {
    
                                _vector3.setFromMatrixPosition( object.matrixWorld )
                                    .applyMatrix4( _projScreenMatrix );
    
                            }
    
                            var geometry = objects.update( object );
                            var material = object.material;
    
                            if ( Array.isArray( material ) ) {
    
                                var groups = geometry.groups;
    
                                for ( var i = 0, l = groups.length; i < l; i ++ ) {
    
                                    var group = groups[ i ];
                                    var groupMaterial = material[ group.materialIndex ];
    
                                    if ( groupMaterial && groupMaterial.visible ) {
    
                                        currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );
    
                                    }
    
                                }
    
                            } else if ( material.visible ) {
    
                                currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
    
                            }
    
                        }
    
                    }
    
                }
    
                var children = object.children;
    
                for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                    projectObject( children[ i ], camera, groupOrder, sortObjects );
    
                }
    
            }
    
            function renderObjects( renderList, scene, camera, overrideMaterial ) {
    
                for ( var i = 0, l = renderList.length; i < l; i ++ ) {
    
                    var renderItem = renderList[ i ];
    
                    var object = renderItem.object;
                    var geometry = renderItem.geometry;
                    var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
                    var group = renderItem.group;
    
                    if ( camera.isArrayCamera ) {
    
                        _currentArrayCamera = camera;
    
                        var cameras = camera.cameras;
    
                        for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {
    
                            var camera2 = cameras[ j ];
    
                            if ( object.layers.test( camera2.layers ) ) {
    
                                if ( 'viewport' in camera2 ) { // XR
    
                                    state.viewport( _currentViewport.copy( camera2.viewport ) );
    
                                } else {
    
                                    var bounds = camera2.bounds;
    
                                    var x = bounds.x * _width;
                                    var y = bounds.y * _height;
                                    var width = bounds.z * _width;
                                    var height = bounds.w * _height;
    
                                    state.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );
    
                                }
    
                                currentRenderState.setupLights( camera2 );
    
                                renderObject( object, scene, camera2, geometry, material, group );
    
                            }
    
                        }
    
                    } else {
    
                        _currentArrayCamera = null;
    
                        renderObject( object, scene, camera, geometry, material, group );
    
                    }
    
                }
    
            }
    
            function renderObject( object, scene, camera, geometry, material, group ) {
    
                object.onBeforeRender( _this, scene, camera, geometry, material, group );
                currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );
    
                object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
                object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
    
                if ( object.isImmediateRenderObject ) {
    
                    state.setMaterial( material );
    
                    var program = setProgram( camera, scene.fog, material, object );
    
                    _currentGeometryProgram.geometry = null;
                    _currentGeometryProgram.program = null;
                    _currentGeometryProgram.wireframe = false;
    
                    renderObjectImmediate( object, program );
    
                } else {
    
                    _this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );
    
                }
    
                object.onAfterRender( _this, scene, camera, geometry, material, group );
                currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );
    
            }
    
            function initMaterial( material, fog, object ) {
    
                var materialProperties = properties.get( material );
    
                var lights = currentRenderState.state.lights;
                var shadowsArray = currentRenderState.state.shadowsArray;
    
                var lightsHash = materialProperties.lightsHash;
                var lightsStateHash = lights.state.hash;
    
                var parameters = programCache.getParameters(
                    material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );
    
                var code = programCache.getProgramCode( material, parameters );
    
                var program = materialProperties.program;
                var programChange = true;
    
                if ( program === undefined ) {
    
                    // new material
                    material.addEventListener( 'dispose', onMaterialDispose );
    
                } else if ( program.code !== code ) {
    
                    // changed glsl or parameters
                    releaseMaterialProgramReference( material );
    
                } else if ( lightsHash.stateID !== lightsStateHash.stateID ||
                    lightsHash.directionalLength !== lightsStateHash.directionalLength ||
                    lightsHash.pointLength !== lightsStateHash.pointLength ||
                    lightsHash.spotLength !== lightsStateHash.spotLength ||
                    lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||
                    lightsHash.hemiLength !== lightsStateHash.hemiLength ||
                    lightsHash.shadowsLength !== lightsStateHash.shadowsLength ) {
    
                    lightsHash.stateID = lightsStateHash.stateID;
                    lightsHash.directionalLength = lightsStateHash.directionalLength;
                    lightsHash.pointLength = lightsStateHash.pointLength;
                    lightsHash.spotLength = lightsStateHash.spotLength;
                    lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;
                    lightsHash.hemiLength = lightsStateHash.hemiLength;
                    lightsHash.shadowsLength = lightsStateHash.shadowsLength;
    
                    programChange = false;
    
                } else if ( parameters.shaderID !== undefined ) {
    
                    // same glsl and uniform list
                    return;
    
                } else {
    
                    // only rebuild uniform list
                    programChange = false;
    
                }
    
                if ( programChange ) {
    
                    if ( parameters.shaderID ) {
    
                        var shader = ShaderLib[ parameters.shaderID ];
    
                        materialProperties.shader = {
                            name: material.type,
                            uniforms: cloneUniforms( shader.uniforms ),
                            vertexShader: shader.vertexShader,
                            fragmentShader: shader.fragmentShader
                        };
    
                    } else {
    
                        materialProperties.shader = {
                            name: material.type,
                            uniforms: material.uniforms,
                            vertexShader: material.vertexShader,
                            fragmentShader: material.fragmentShader
                        };
    
                    }
    
                    material.onBeforeCompile( materialProperties.shader, _this );
    
                    // Computing code again as onBeforeCompile may have changed the shaders
                    code = programCache.getProgramCode( material, parameters );
    
                    program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );
    
                    materialProperties.program = program;
                    material.program = program;
    
                }
    
                var programAttributes = program.getAttributes();
    
                if ( material.morphTargets ) {
    
                    material.numSupportedMorphTargets = 0;
    
                    for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {
    
                        if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {
    
                            material.numSupportedMorphTargets ++;
    
                        }
    
                    }
    
                }
    
                if ( material.morphNormals ) {
    
                    material.numSupportedMorphNormals = 0;
    
                    for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {
    
                        if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {
    
                            material.numSupportedMorphNormals ++;
    
                        }
    
                    }
    
                }
    
                var uniforms = materialProperties.shader.uniforms;
    
                if ( ! material.isShaderMaterial &&
                    ! material.isRawShaderMaterial ||
                    material.clipping === true ) {
    
                    materialProperties.numClippingPlanes = _clipping.numPlanes;
                    materialProperties.numIntersection = _clipping.numIntersection;
                    uniforms.clippingPlanes = _clipping.uniform;
    
                }
    
                materialProperties.fog = fog;
    
                // store the light setup it was created for
                if ( lightsHash === undefined ) {
    
                    materialProperties.lightsHash = lightsHash = {};
    
                }
    
                lightsHash.stateID = lightsStateHash.stateID;
                lightsHash.directionalLength = lightsStateHash.directionalLength;
                lightsHash.pointLength = lightsStateHash.pointLength;
                lightsHash.spotLength = lightsStateHash.spotLength;
                lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;
                lightsHash.hemiLength = lightsStateHash.hemiLength;
                lightsHash.shadowsLength = lightsStateHash.shadowsLength;
    
                if ( material.lights ) {
    
                    // wire up the material to this renderer's lighting state
    
                    uniforms.ambientLightColor.value = lights.state.ambient;
                    uniforms.directionalLights.value = lights.state.directional;
                    uniforms.spotLights.value = lights.state.spot;
                    uniforms.rectAreaLights.value = lights.state.rectArea;
                    uniforms.pointLights.value = lights.state.point;
                    uniforms.hemisphereLights.value = lights.state.hemi;
    
                    uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
                    uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
                    uniforms.spotShadowMap.value = lights.state.spotShadowMap;
                    uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
                    uniforms.pointShadowMap.value = lights.state.pointShadowMap;
                    uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
                    // TODO (abelnation): add area lights shadow info to uniforms
    
                }
    
                var progUniforms = materialProperties.program.getUniforms(),
                    uniformsList =
                        WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );
    
                materialProperties.uniformsList = uniformsList;
    
            }
    
            function setProgram( camera, fog, material, object ) {
    
                textures.resetTextureUnits();
    
                var materialProperties = properties.get( material );
                var lights = currentRenderState.state.lights;
    
                var lightsHash = materialProperties.lightsHash;
                var lightsStateHash = lights.state.hash;
    
                if ( _clippingEnabled ) {
    
                    if ( _localClippingEnabled || camera !== _currentCamera ) {
    
                        var useCache =
                            camera === _currentCamera &&
                            material.id === _currentMaterialId;
    
                        // we might want to call this function with some ClippingGroup
                        // object instead of the material, once it becomes feasible
                        // (#8465, #8379)
                        _clipping.setState(
                            material.clippingPlanes, material.clipIntersection, material.clipShadows,
                            camera, materialProperties, useCache );
    
                    }
    
                }
    
                if ( material.needsUpdate === false ) {
    
                    if ( materialProperties.program === undefined ) {
    
                        material.needsUpdate = true;
    
                    } else if ( material.fog && materialProperties.fog !== fog ) {
    
                        material.needsUpdate = true;
    
                    } else if ( material.lights && ( lightsHash.stateID !== lightsStateHash.stateID ||
                        lightsHash.directionalLength !== lightsStateHash.directionalLength ||
                        lightsHash.pointLength !== lightsStateHash.pointLength ||
                        lightsHash.spotLength !== lightsStateHash.spotLength ||
                        lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||
                        lightsHash.hemiLength !== lightsStateHash.hemiLength ||
                        lightsHash.shadowsLength !== lightsStateHash.shadowsLength ) ) {
    
                        material.needsUpdate = true;
    
                    } else if ( materialProperties.numClippingPlanes !== undefined &&
                        ( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
                        materialProperties.numIntersection !== _clipping.numIntersection ) ) {
    
                        material.needsUpdate = true;
    
                    }
    
                }
    
                if ( material.needsUpdate ) {
    
                    initMaterial( material, fog, object );
                    material.needsUpdate = false;
    
                }
    
                var refreshProgram = false;
                var refreshMaterial = false;
                var refreshLights = false;
    
                var program = materialProperties.program,
                    p_uniforms = program.getUniforms(),
                    m_uniforms = materialProperties.shader.uniforms;
    
                if ( state.useProgram( program.program ) ) {
    
                    refreshProgram = true;
                    refreshMaterial = true;
                    refreshLights = true;
    
                }
    
                if ( material.id !== _currentMaterialId ) {
    
                    _currentMaterialId = material.id;
    
                    refreshMaterial = true;
    
                }
    
                if ( refreshProgram || _currentCamera !== camera ) {
    
                    p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
    
                    if ( capabilities.logarithmicDepthBuffer ) {
    
                        p_uniforms.setValue( _gl, 'logDepthBufFC',
                            2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
    
                    }
    
                    if ( _currentCamera !== camera ) {
    
                        _currentCamera = camera;
    
                        // lighting uniforms depend on the camera so enforce an update
                        // now, in case this material supports lights - or later, when
                        // the next material that does gets activated:
    
                        refreshMaterial = true;		// set to true on material change
                        refreshLights = true;		// remains set until update done
    
                    }
    
                    // load material specific uniforms
                    // (shader material also gets them for the sake of genericity)
    
                    if ( material.isShaderMaterial ||
                        material.isMeshPhongMaterial ||
                        material.isMeshStandardMaterial ||
                        material.envMap ) {
    
                        var uCamPos = p_uniforms.map.cameraPosition;
    
                        if ( uCamPos !== undefined ) {
    
                            uCamPos.setValue( _gl,
                                _vector3.setFromMatrixPosition( camera.matrixWorld ) );
    
                        }
    
                    }
    
                    if ( material.isMeshPhongMaterial ||
                        material.isMeshLambertMaterial ||
                        material.isMeshBasicMaterial ||
                        material.isMeshStandardMaterial ||
                        material.isShaderMaterial ||
                        material.skinning ) {
    
                        p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );
    
                    }
    
                }
    
                // skinning uniforms must be set even if material didn't change
                // auto-setting of texture unit for bone texture must go before other textures
                // not sure why, but otherwise weird things happen
    
                if ( material.skinning ) {
    
                    p_uniforms.setOptional( _gl, object, 'bindMatrix' );
                    p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );
    
                    var skeleton = object.skeleton;
    
                    if ( skeleton ) {
    
                        var bones = skeleton.bones;
    
                        if ( capabilities.floatVertexTextures ) {
    
                            if ( skeleton.boneTexture === undefined ) {
    
                                // layout (1 matrix = 4 pixels)
                                //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
                                //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
                                //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
                                //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
                                //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
    
    
                                var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
                                size = _Math.ceilPowerOfTwo( size );
                                size = Math.max( size, 4 );
    
                                var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
                                boneMatrices.set( skeleton.boneMatrices ); // copy current values
    
                                var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
                                boneTexture.needsUpdate = true;
    
                                skeleton.boneMatrices = boneMatrices;
                                skeleton.boneTexture = boneTexture;
                                skeleton.boneTextureSize = size;
    
                            }
    
                            p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
                            p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );
    
                        } else {
    
                            p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );
    
                        }
    
                    }
    
                }
    
                if ( refreshMaterial ) {
    
                    p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
                    p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );
    
                    if ( material.lights ) {
    
                        // the current material requires lighting info
    
                        // note: all lighting uniforms are always set correctly
                        // they simply reference the renderer's state for their
                        // values
                        //
                        // use the current material's .needsUpdate flags to set
                        // the GL state when required
    
                        markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );
    
                    }
    
                    // refresh uniforms common to several materials
    
                    if ( fog && material.fog ) {
    
                        refreshUniformsFog( m_uniforms, fog );
    
                    }
    
                    if ( material.isMeshBasicMaterial ) {
    
                        refreshUniformsCommon( m_uniforms, material );
    
                    } else if ( material.isMeshLambertMaterial ) {
    
                        refreshUniformsCommon( m_uniforms, material );
                        refreshUniformsLambert( m_uniforms, material );
    
                    } else if ( material.isMeshPhongMaterial ) {
    
                        refreshUniformsCommon( m_uniforms, material );
    
                        if ( material.isMeshToonMaterial ) {
    
                            refreshUniformsToon( m_uniforms, material );
    
                        } else {
    
                            refreshUniformsPhong( m_uniforms, material );
    
                        }
    
                    } else if ( material.isMeshStandardMaterial ) {
    
                        refreshUniformsCommon( m_uniforms, material );
    
                        if ( material.isMeshPhysicalMaterial ) {
    
                            refreshUniformsPhysical( m_uniforms, material );
    
                        } else {
    
                            refreshUniformsStandard( m_uniforms, material );
    
                        }
    
                    } else if ( material.isMeshMatcapMaterial ) {
    
                        refreshUniformsCommon( m_uniforms, material );
    
                        refreshUniformsMatcap( m_uniforms, material );
    
                    } else if ( material.isMeshDepthMaterial ) {
    
                        refreshUniformsCommon( m_uniforms, material );
                        refreshUniformsDepth( m_uniforms, material );
    
                    } else if ( material.isMeshDistanceMaterial ) {
    
                        refreshUniformsCommon( m_uniforms, material );
                        refreshUniformsDistance( m_uniforms, material );
    
                    } else if ( material.isMeshNormalMaterial ) {
    
                        refreshUniformsCommon( m_uniforms, material );
                        refreshUniformsNormal( m_uniforms, material );
    
                    } else if ( material.isLineBasicMaterial ) {
    
                        refreshUniformsLine( m_uniforms, material );
    
                        if ( material.isLineDashedMaterial ) {
    
                            refreshUniformsDash( m_uniforms, material );
    
                        }
    
                    } else if ( material.isPointsMaterial ) {
    
                        refreshUniformsPoints( m_uniforms, material );
    
                    } else if ( material.isSpriteMaterial ) {
    
                        refreshUniformsSprites( m_uniforms, material );
    
                    } else if ( material.isShadowMaterial ) {
    
                        m_uniforms.color.value = material.color;
                        m_uniforms.opacity.value = material.opacity;
    
                    }
    
                    // RectAreaLight Texture
                    // TODO (mrdoob): Find a nicer implementation
    
                    if ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;
                    if ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;
    
                    WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
    
                }
    
                if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {
    
                    WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
                    material.uniformsNeedUpdate = false;
    
                }
    
                if ( material.isSpriteMaterial ) {
    
                    p_uniforms.setValue( _gl, 'center', object.center );
    
                }
    
                // common matrices
    
                p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
                p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
                p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );
    
                return program;
    
            }
    
            // Uniforms (refresh uniforms objects)
    
            function refreshUniformsCommon( uniforms, material ) {
    
                uniforms.opacity.value = material.opacity;
    
                if ( material.color ) {
    
                    uniforms.diffuse.value = material.color;
    
                }
    
                if ( material.emissive ) {
    
                    uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
    
                }
    
                if ( material.map ) {
    
                    uniforms.map.value = material.map;
    
                }
    
                if ( material.alphaMap ) {
    
                    uniforms.alphaMap.value = material.alphaMap;
    
                }
    
                if ( material.specularMap ) {
    
                    uniforms.specularMap.value = material.specularMap;
    
                }
    
                if ( material.envMap ) {
    
                    uniforms.envMap.value = material.envMap;
    
                    // don't flip CubeTexture envMaps, flip everything else:
                    //  WebGLRenderTargetCube will be flipped for backwards compatibility
                    //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
                    // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
                    uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;
    
                    uniforms.reflectivity.value = material.reflectivity;
                    uniforms.refractionRatio.value = material.refractionRatio;
    
                    uniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;
    
                }
    
                if ( material.lightMap ) {
    
                    uniforms.lightMap.value = material.lightMap;
                    uniforms.lightMapIntensity.value = material.lightMapIntensity;
    
                }
    
                if ( material.aoMap ) {
    
                    uniforms.aoMap.value = material.aoMap;
                    uniforms.aoMapIntensity.value = material.aoMapIntensity;
    
                }
    
                // uv repeat and offset setting priorities
                // 1. color map
                // 2. specular map
                // 3. normal map
                // 4. bump map
                // 5. alpha map
                // 6. emissive map
    
                var uvScaleMap;
    
                if ( material.map ) {
    
                    uvScaleMap = material.map;
    
                } else if ( material.specularMap ) {
    
                    uvScaleMap = material.specularMap;
    
                } else if ( material.displacementMap ) {
    
                    uvScaleMap = material.displacementMap;
    
                } else if ( material.normalMap ) {
    
                    uvScaleMap = material.normalMap;
    
                } else if ( material.bumpMap ) {
    
                    uvScaleMap = material.bumpMap;
    
                } else if ( material.roughnessMap ) {
    
                    uvScaleMap = material.roughnessMap;
    
                } else if ( material.metalnessMap ) {
    
                    uvScaleMap = material.metalnessMap;
    
                } else if ( material.alphaMap ) {
    
                    uvScaleMap = material.alphaMap;
    
                } else if ( material.emissiveMap ) {
    
                    uvScaleMap = material.emissiveMap;
    
                }
    
                if ( uvScaleMap !== undefined ) {
    
                    // backwards compatibility
                    if ( uvScaleMap.isWebGLRenderTarget ) {
    
                        uvScaleMap = uvScaleMap.texture;
    
                    }
    
                    if ( uvScaleMap.matrixAutoUpdate === true ) {
    
                        uvScaleMap.updateMatrix();
    
                    }
    
                    uniforms.uvTransform.value.copy( uvScaleMap.matrix );
    
                }
    
            }
    
            function refreshUniformsLine( uniforms, material ) {
    
                uniforms.diffuse.value = material.color;
                uniforms.opacity.value = material.opacity;
    
            }
    
            function refreshUniformsDash( uniforms, material ) {
    
                uniforms.dashSize.value = material.dashSize;
                uniforms.totalSize.value = material.dashSize + material.gapSize;
                uniforms.scale.value = material.scale;
    
            }
    
            function refreshUniformsPoints( uniforms, material ) {
    
                uniforms.diffuse.value = material.color;
                uniforms.opacity.value = material.opacity;
                uniforms.size.value = material.size * _pixelRatio;
                uniforms.scale.value = _height * 0.5;
    
                uniforms.map.value = material.map;
    
                if ( material.map !== null ) {
    
                    if ( material.map.matrixAutoUpdate === true ) {
    
                        material.map.updateMatrix();
    
                    }
    
                    uniforms.uvTransform.value.copy( material.map.matrix );
    
                }
    
            }
    
            function refreshUniformsSprites( uniforms, material ) {
    
                uniforms.diffuse.value = material.color;
                uniforms.opacity.value = material.opacity;
                uniforms.rotation.value = material.rotation;
                uniforms.map.value = material.map;
    
                if ( material.map !== null ) {
    
                    if ( material.map.matrixAutoUpdate === true ) {
    
                        material.map.updateMatrix();
    
                    }
    
                    uniforms.uvTransform.value.copy( material.map.matrix );
    
                }
    
            }
    
            function refreshUniformsFog( uniforms, fog ) {
    
                uniforms.fogColor.value = fog.color;
    
                if ( fog.isFog ) {
    
                    uniforms.fogNear.value = fog.near;
                    uniforms.fogFar.value = fog.far;
    
                } else if ( fog.isFogExp2 ) {
    
                    uniforms.fogDensity.value = fog.density;
    
                }
    
            }
    
            function refreshUniformsLambert( uniforms, material ) {
    
                if ( material.emissiveMap ) {
    
                    uniforms.emissiveMap.value = material.emissiveMap;
    
                }
    
            }
    
            function refreshUniformsPhong( uniforms, material ) {
    
                uniforms.specular.value = material.specular;
                uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
    
                if ( material.emissiveMap ) {
    
                    uniforms.emissiveMap.value = material.emissiveMap;
    
                }
    
                if ( material.bumpMap ) {
    
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;
                    if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
    
                }
    
                if ( material.normalMap ) {
    
                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy( material.normalScale );
                    if ( material.side === BackSide ) uniforms.normalScale.value.negate();
    
                }
    
                if ( material.displacementMap ) {
    
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;
    
                }
    
            }
    
            function refreshUniformsToon( uniforms, material ) {
    
                refreshUniformsPhong( uniforms, material );
    
                if ( material.gradientMap ) {
    
                    uniforms.gradientMap.value = material.gradientMap;
    
                }
    
            }
    
            function refreshUniformsStandard( uniforms, material ) {
    
                uniforms.roughness.value = material.roughness;
                uniforms.metalness.value = material.metalness;
    
                if ( material.roughnessMap ) {
    
                    uniforms.roughnessMap.value = material.roughnessMap;
    
                }
    
                if ( material.metalnessMap ) {
    
                    uniforms.metalnessMap.value = material.metalnessMap;
    
                }
    
                if ( material.emissiveMap ) {
    
                    uniforms.emissiveMap.value = material.emissiveMap;
    
                }
    
                if ( material.bumpMap ) {
    
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;
                    if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
    
                }
    
                if ( material.normalMap ) {
    
                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy( material.normalScale );
                    if ( material.side === BackSide ) uniforms.normalScale.value.negate();
    
                }
    
                if ( material.displacementMap ) {
    
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;
    
                }
    
                if ( material.envMap ) {
    
                    //uniforms.envMap.value = material.envMap; // part of uniforms common
                    uniforms.envMapIntensity.value = material.envMapIntensity;
    
                }
    
            }
    
            function refreshUniformsPhysical( uniforms, material ) {
    
                refreshUniformsStandard( uniforms, material );
    
                uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common
    
                uniforms.clearCoat.value = material.clearCoat;
                uniforms.clearCoatRoughness.value = material.clearCoatRoughness;
    
            }
    
            function refreshUniformsMatcap( uniforms, material ) {
    
                if ( material.matcap ) {
    
                    uniforms.matcap.value = material.matcap;
    
                }
    
                if ( material.bumpMap ) {
    
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;
                    if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
    
                }
    
                if ( material.normalMap ) {
    
                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy( material.normalScale );
                    if ( material.side === BackSide ) uniforms.normalScale.value.negate();
    
                }
    
                if ( material.displacementMap ) {
    
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;
    
                }
    
            }
    
            function refreshUniformsDepth( uniforms, material ) {
    
                if ( material.displacementMap ) {
    
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;
    
                }
    
            }
    
            function refreshUniformsDistance( uniforms, material ) {
    
                if ( material.displacementMap ) {
    
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;
    
                }
    
                uniforms.referencePosition.value.copy( material.referencePosition );
                uniforms.nearDistance.value = material.nearDistance;
                uniforms.farDistance.value = material.farDistance;
    
            }
    
            function refreshUniformsNormal( uniforms, material ) {
    
                if ( material.bumpMap ) {
    
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.bumpScale.value = material.bumpScale;
                    if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
    
                }
    
                if ( material.normalMap ) {
    
                    uniforms.normalMap.value = material.normalMap;
                    uniforms.normalScale.value.copy( material.normalScale );
                    if ( material.side === BackSide ) uniforms.normalScale.value.negate();
    
                }
    
                if ( material.displacementMap ) {
    
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;
    
                }
    
            }
    
            // If uniforms are marked as clean, they don't need to be loaded to the GPU.
    
            function markUniformsLightsNeedsUpdate( uniforms, value ) {
    
                uniforms.ambientLightColor.needsUpdate = value;
    
                uniforms.directionalLights.needsUpdate = value;
                uniforms.pointLights.needsUpdate = value;
                uniforms.spotLights.needsUpdate = value;
                uniforms.rectAreaLights.needsUpdate = value;
                uniforms.hemisphereLights.needsUpdate = value;
    
            }
    
            //
    
            this.setFramebuffer = function ( value ) {
    
                _framebuffer = value;
    
            };
    
            this.getRenderTarget = function () {
    
                return _currentRenderTarget;
    
            };
    
            this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipMapLevel ) {
    
                _currentRenderTarget = renderTarget;
    
                if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {
    
                    textures.setupRenderTarget( renderTarget );
    
                }
    
                var framebuffer = _framebuffer;
                var isCube = false;
    
                if ( renderTarget ) {
    
                    var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;
    
                    if ( renderTarget.isWebGLRenderTargetCube ) {
    
                        framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
                        isCube = true;
    
                    } else if ( renderTarget.isWebGLMultisampleRenderTarget ) {
    
                        framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;
    
                    } else {
    
                        framebuffer = __webglFramebuffer;
    
                    }
    
                    _currentViewport.copy( renderTarget.viewport );
                    _currentScissor.copy( renderTarget.scissor );
                    _currentScissorTest = renderTarget.scissorTest;
    
                } else {
    
                    _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
                    _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
                    _currentScissorTest = _scissorTest;
    
                }
    
                if ( _currentFramebuffer !== framebuffer ) {
    
                    _gl.bindFramebuffer( 36160, framebuffer );
                    _currentFramebuffer = framebuffer;
    
                }
    
                state.viewport( _currentViewport );
                state.scissor( _currentScissor );
                state.setScissorTest( _currentScissorTest );
    
                if ( isCube ) {
    
                    var textureProperties = properties.get( renderTarget.texture );
                    _gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipMapLevel || 0 );
    
                }
    
            };
    
            this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {
    
                if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {
    
                    console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
                    return;
    
                }
    
                var framebuffer = properties.get( renderTarget ).__webglFramebuffer;
    
                if ( framebuffer ) {
    
                    var restore = false;
    
                    if ( framebuffer !== _currentFramebuffer ) {
    
                        _gl.bindFramebuffer( 36160, framebuffer );
    
                        restore = true;
    
                    }
    
                    try {
    
                        var texture = renderTarget.texture;
                        var textureFormat = texture.format;
                        var textureType = texture.type;
    
                        if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {
    
                            console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
                            return;
    
                        }
    
                        if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)
                            ! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
                            ! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {
    
                            console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
                            return;
    
                        }
    
                        if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {
    
                            // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
    
                            if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {
    
                                _gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );
    
                            }
    
                        } else {
    
                            console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );
    
                        }
    
                    } finally {
    
                        if ( restore ) {
    
                            _gl.bindFramebuffer( 36160, _currentFramebuffer );
    
                        }
    
                    }
    
                }
    
            };
    
            this.copyFramebufferToTexture = function ( position, texture, level ) {
    
                var width = texture.image.width;
                var height = texture.image.height;
                var glFormat = utils.convert( texture.format );
    
                textures.setTexture2D( texture, 0 );
    
                _gl.copyTexImage2D( 3553, level || 0, glFormat, position.x, position.y, width, height, 0 );
    
            };
    
            this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {
    
                var width = srcTexture.image.width;
                var height = srcTexture.image.height;
                var glFormat = utils.convert( dstTexture.format );
                var glType = utils.convert( dstTexture.type );
    
                textures.setTexture2D( dstTexture, 0 );
    
                if ( srcTexture.isDataTexture ) {
    
                    _gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );
    
                } else {
    
                    _gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );
    
                }
    
            };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */
    
        function FogExp2( color, density ) {
    
            this.name = '';
    
            this.color = new Color( color );
            this.density = ( density !== undefined ) ? density : 0.00025;
    
        }
    
        Object.assign( FogExp2.prototype, {
    
            isFogExp2: true,
    
            clone: function () {
    
                return new FogExp2( this.color, this.density );
    
            },
    
            toJSON: function ( /* meta */ ) {
    
                return {
                    type: 'FogExp2',
                    color: this.color.getHex(),
                    density: this.density
                };
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */
    
        function Fog( color, near, far ) {
    
            this.name = '';
    
            this.color = new Color( color );
    
            this.near = ( near !== undefined ) ? near : 1;
            this.far = ( far !== undefined ) ? far : 1000;
    
        }
    
        Object.assign( Fog.prototype, {
    
            isFog: true,
    
            clone: function () {
    
                return new Fog( this.color, this.near, this.far );
    
            },
    
            toJSON: function ( /* meta */ ) {
    
                return {
                    type: 'Fog',
                    color: this.color.getHex(),
                    near: this.near,
                    far: this.far
                };
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function Scene() {
    
            Object3D.call( this );
    
            this.type = 'Scene';
    
            this.background = null;
            this.fog = null;
            this.overrideMaterial = null;
    
            this.autoUpdate = true; // checked by the renderer
    
        }
    
        Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Scene,
    
            isScene: true,
    
            copy: function ( source, recursive ) {
    
                Object3D.prototype.copy.call( this, source, recursive );
    
                if ( source.background !== null ) this.background = source.background.clone();
                if ( source.fog !== null ) this.fog = source.fog.clone();
                if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();
    
                this.autoUpdate = source.autoUpdate;
                this.matrixAutoUpdate = source.matrixAutoUpdate;
    
                return this;
    
            },
    
            toJSON: function ( meta ) {
    
                var data = Object3D.prototype.toJSON.call( this, meta );
    
                if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
                if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
    
                return data;
    
            },
    
            dispose: function () {
    
                this.dispatchEvent( { type: 'dispose' } );
    
            }
    
        } );
    
        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */
    
        function InterleavedBuffer( array, stride ) {
    
            this.array = array;
            this.stride = stride;
            this.count = array !== undefined ? array.length / stride : 0;
    
            this.dynamic = false;
            this.updateRange = { offset: 0, count: - 1 };
    
            this.version = 0;
    
        }
    
        Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {
    
            set: function ( value ) {
    
                if ( value === true ) this.version ++;
    
            }
    
        } );
    
        Object.assign( InterleavedBuffer.prototype, {
    
            isInterleavedBuffer: true,
    
            onUploadCallback: function () {},
    
            setArray: function ( array ) {
    
                if ( Array.isArray( array ) ) {
    
                    throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
    
                }
    
                this.count = array !== undefined ? array.length / this.stride : 0;
                this.array = array;
    
                return this;
    
            },
    
            setDynamic: function ( value ) {
    
                this.dynamic = value;
    
                return this;
    
            },
    
            copy: function ( source ) {
    
                this.array = new source.array.constructor( source.array );
                this.count = source.count;
                this.stride = source.stride;
                this.dynamic = source.dynamic;
    
                return this;
    
            },
    
            copyAt: function ( index1, attribute, index2 ) {
    
                index1 *= this.stride;
                index2 *= attribute.stride;
    
                for ( var i = 0, l = this.stride; i < l; i ++ ) {
    
                    this.array[ index1 + i ] = attribute.array[ index2 + i ];
    
                }
    
                return this;
    
            },
    
            set: function ( value, offset ) {
    
                if ( offset === undefined ) offset = 0;
    
                this.array.set( value, offset );
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            onUpload: function ( callback ) {
    
                this.onUploadCallback = callback;
    
                return this;
    
            }
    
        } );
    
        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */
    
        function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {
    
            this.data = interleavedBuffer;
            this.itemSize = itemSize;
            this.offset = offset;
    
            this.normalized = normalized === true;
    
        }
    
        Object.defineProperties( InterleavedBufferAttribute.prototype, {
    
            count: {
    
                get: function () {
    
                    return this.data.count;
    
                }
    
            },
    
            array: {
    
                get: function () {
    
                    return this.data.array;
    
                }
    
            }
    
        } );
    
        Object.assign( InterleavedBufferAttribute.prototype, {
    
            isInterleavedBufferAttribute: true,
    
            setX: function ( index, x ) {
    
                this.data.array[ index * this.data.stride + this.offset ] = x;
    
                return this;
    
            },
    
            setY: function ( index, y ) {
    
                this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
    
                return this;
    
            },
    
            setZ: function ( index, z ) {
    
                this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
    
                return this;
    
            },
    
            setW: function ( index, w ) {
    
                this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
    
                return this;
    
            },
    
            getX: function ( index ) {
    
                return this.data.array[ index * this.data.stride + this.offset ];
    
            },
    
            getY: function ( index ) {
    
                return this.data.array[ index * this.data.stride + this.offset + 1 ];
    
            },
    
            getZ: function ( index ) {
    
                return this.data.array[ index * this.data.stride + this.offset + 2 ];
    
            },
    
            getW: function ( index ) {
    
                return this.data.array[ index * this.data.stride + this.offset + 3 ];
    
            },
    
            setXY: function ( index, x, y ) {
    
                index = index * this.data.stride + this.offset;
    
                this.data.array[ index + 0 ] = x;
                this.data.array[ index + 1 ] = y;
    
                return this;
    
            },
    
            setXYZ: function ( index, x, y, z ) {
    
                index = index * this.data.stride + this.offset;
    
                this.data.array[ index + 0 ] = x;
                this.data.array[ index + 1 ] = y;
                this.data.array[ index + 2 ] = z;
    
                return this;
    
            },
    
            setXYZW: function ( index, x, y, z, w ) {
    
                index = index * this.data.stride + this.offset;
    
                this.data.array[ index + 0 ] = x;
                this.data.array[ index + 1 ] = y;
                this.data.array[ index + 2 ] = z;
                this.data.array[ index + 3 ] = w;
    
                return this;
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  map: new THREE.Texture( <Image> ),
         *  rotation: <float>,
         *  sizeAttenuation: <bool>
         * }
         */
    
        function SpriteMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'SpriteMaterial';
    
            this.color = new Color( 0xffffff );
            this.map = null;
    
            this.rotation = 0;
    
            this.sizeAttenuation = true;
    
            this.lights = false;
            this.transparent = true;
    
            this.setValues( parameters );
    
        }
    
        SpriteMaterial.prototype = Object.create( Material.prototype );
        SpriteMaterial.prototype.constructor = SpriteMaterial;
        SpriteMaterial.prototype.isSpriteMaterial = true;
    
        SpriteMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.color.copy( source.color );
            this.map = source.map;
    
            this.rotation = source.rotation;
    
            this.sizeAttenuation = source.sizeAttenuation;
    
            return this;
    
        };
    
        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         */
    
        var geometry;
    
        function Sprite( material ) {
    
            Object3D.call( this );
    
            this.type = 'Sprite';
    
            if ( geometry === undefined ) {
    
                geometry = new BufferGeometry();
    
                var float32Array = new Float32Array( [
                    - 0.5, - 0.5, 0, 0, 0,
                    0.5, - 0.5, 0, 1, 0,
                    0.5, 0.5, 0, 1, 1,
                    - 0.5, 0.5, 0, 0, 1
                ] );
    
                var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );
    
                geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
                geometry.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
                geometry.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );
    
            }
    
            this.geometry = geometry;
            this.material = ( material !== undefined ) ? material : new SpriteMaterial();
    
            this.center = new Vector2( 0.5, 0.5 );
    
        }
    
        Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Sprite,
    
            isSprite: true,
    
            raycast: ( function () {
    
                var intersectPoint = new Vector3();
                var worldScale = new Vector3();
                var mvPosition = new Vector3();
    
                var alignedPosition = new Vector2();
                var rotatedPosition = new Vector2();
                var viewWorldMatrix = new Matrix4();
    
                var vA = new Vector3();
                var vB = new Vector3();
                var vC = new Vector3();
    
                var uvA = new Vector2();
                var uvB = new Vector2();
                var uvC = new Vector2();
    
                function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {
    
                    // compute position in camera space
                    alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );
    
                    // to check if rotation is not zero
                    if ( sin !== undefined ) {
    
                        rotatedPosition.x = ( cos * alignedPosition.x ) - ( sin * alignedPosition.y );
                        rotatedPosition.y = ( sin * alignedPosition.x ) + ( cos * alignedPosition.y );
    
                    } else {
    
                        rotatedPosition.copy( alignedPosition );
    
                    }
    
    
                    vertexPosition.copy( mvPosition );
                    vertexPosition.x += rotatedPosition.x;
                    vertexPosition.y += rotatedPosition.y;
    
                    // transform to world space
                    vertexPosition.applyMatrix4( viewWorldMatrix );
    
                }
    
                return function raycast( raycaster, intersects ) {
    
                    worldScale.setFromMatrixScale( this.matrixWorld );
                    viewWorldMatrix.getInverse( this.modelViewMatrix ).premultiply( this.matrixWorld );
                    mvPosition.setFromMatrixPosition( this.modelViewMatrix );
    
                    var rotation = this.material.rotation;
                    var sin, cos;
                    if ( rotation !== 0 ) {
    
                        cos = Math.cos( rotation );
                        sin = Math.sin( rotation );
    
                    }
    
                    var center = this.center;
    
                    transformVertex( vA.set( - 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
                    transformVertex( vB.set( 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
                    transformVertex( vC.set( 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
    
                    uvA.set( 0, 0 );
                    uvB.set( 1, 0 );
                    uvC.set( 1, 1 );
    
                    // check first triangle
                    var intersect = raycaster.ray.intersectTriangle( vA, vB, vC, false, intersectPoint );
    
                    if ( intersect === null ) {
    
                        // check second triangle
                        transformVertex( vB.set( - 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
                        uvB.set( 0, 1 );
    
                        intersect = raycaster.ray.intersectTriangle( vA, vC, vB, false, intersectPoint );
                        if ( intersect === null ) {
    
                            return;
    
                        }
    
                    }
    
                    var distance = raycaster.ray.origin.distanceTo( intersectPoint );
    
                    if ( distance < raycaster.near || distance > raycaster.far ) return;
    
                    intersects.push( {
    
                        distance: distance,
                        point: intersectPoint.clone(),
                        uv: Triangle.getUV( intersectPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() ),
                        face: null,
                        object: this
    
                    } );
    
                };
    
            }() ),
    
            clone: function () {
    
                return new this.constructor( this.material ).copy( this );
    
            },
    
            copy: function ( source ) {
    
                Object3D.prototype.copy.call( this, source );
    
                if ( source.center !== undefined ) this.center.copy( source.center );
    
                return this;
    
            }
    
    
        } );
    
        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */
    
        function LOD() {
    
            Object3D.call( this );
    
            this.type = 'LOD';
    
            Object.defineProperties( this, {
                levels: {
                    enumerable: true,
                    value: []
                }
            } );
    
        }
    
        LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: LOD,
    
            copy: function ( source ) {
    
                Object3D.prototype.copy.call( this, source, false );
    
                var levels = source.levels;
    
                for ( var i = 0, l = levels.length; i < l; i ++ ) {
    
                    var level = levels[ i ];
    
                    this.addLevel( level.object.clone(), level.distance );
    
                }
    
                return this;
    
            },
    
            addLevel: function ( object, distance ) {
    
                if ( distance === undefined ) distance = 0;
    
                distance = Math.abs( distance );
    
                var levels = this.levels;
    
                for ( var l = 0; l < levels.length; l ++ ) {
    
                    if ( distance < levels[ l ].distance ) {
    
                        break;
    
                    }
    
                }
    
                levels.splice( l, 0, { distance: distance, object: object } );
    
                this.add( object );
    
            },
    
            getObjectForDistance: function ( distance ) {
    
                var levels = this.levels;
    
                for ( var i = 1, l = levels.length; i < l; i ++ ) {
    
                    if ( distance < levels[ i ].distance ) {
    
                        break;
    
                    }
    
                }
    
                return levels[ i - 1 ].object;
    
            },
    
            raycast: ( function () {
    
                var matrixPosition = new Vector3();
    
                return function raycast( raycaster, intersects ) {
    
                    matrixPosition.setFromMatrixPosition( this.matrixWorld );
    
                    var distance = raycaster.ray.origin.distanceTo( matrixPosition );
    
                    this.getObjectForDistance( distance ).raycast( raycaster, intersects );
    
                };
    
            }() ),
    
            update: function () {
    
                var v1 = new Vector3();
                var v2 = new Vector3();
    
                return function update( camera ) {
    
                    var levels = this.levels;
    
                    if ( levels.length > 1 ) {
    
                        v1.setFromMatrixPosition( camera.matrixWorld );
                        v2.setFromMatrixPosition( this.matrixWorld );
    
                        var distance = v1.distanceTo( v2 );
    
                        levels[ 0 ].object.visible = true;
    
                        for ( var i = 1, l = levels.length; i < l; i ++ ) {
    
                            if ( distance >= levels[ i ].distance ) {
    
                                levels[ i - 1 ].object.visible = false;
                                levels[ i ].object.visible = true;
    
                            } else {
    
                                break;
    
                            }
    
                        }
    
                        for ( ; i < l; i ++ ) {
    
                            levels[ i ].object.visible = false;
    
                        }
    
                    }
    
                };
    
            }(),
    
            toJSON: function ( meta ) {
    
                var data = Object3D.prototype.toJSON.call( this, meta );
    
                data.object.levels = [];
    
                var levels = this.levels;
    
                for ( var i = 0, l = levels.length; i < l; i ++ ) {
    
                    var level = levels[ i ];
    
                    data.object.levels.push( {
                        object: level.object.uuid,
                        distance: level.distance
                    } );
    
                }
    
                return data;
    
            }
    
        } );
    
        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author ikerr / http://verold.com
         */
    
        function SkinnedMesh( geometry, material ) {
    
            if ( geometry && geometry.isGeometry ) {
    
                console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );
    
            }
    
            Mesh.call( this, geometry, material );
    
            this.type = 'SkinnedMesh';
    
            this.bindMode = 'attached';
            this.bindMatrix = new Matrix4();
            this.bindMatrixInverse = new Matrix4();
    
        }
    
        SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {
    
            constructor: SkinnedMesh,
    
            isSkinnedMesh: true,
    
            bind: function ( skeleton, bindMatrix ) {
    
                this.skeleton = skeleton;
    
                if ( bindMatrix === undefined ) {
    
                    this.updateMatrixWorld( true );
    
                    this.skeleton.calculateInverses();
    
                    bindMatrix = this.matrixWorld;
    
                }
    
                this.bindMatrix.copy( bindMatrix );
                this.bindMatrixInverse.getInverse( bindMatrix );
    
            },
    
            pose: function () {
    
                this.skeleton.pose();
    
            },
    
            normalizeSkinWeights: function () {
    
                var vector = new Vector4();
    
                var skinWeight = this.geometry.attributes.skinWeight;
    
                for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {
    
                    vector.x = skinWeight.getX( i );
                    vector.y = skinWeight.getY( i );
                    vector.z = skinWeight.getZ( i );
                    vector.w = skinWeight.getW( i );
    
                    var scale = 1.0 / vector.manhattanLength();
    
                    if ( scale !== Infinity ) {
    
                        vector.multiplyScalar( scale );
    
                    } else {
    
                        vector.set( 1, 0, 0, 0 ); // do something reasonable
    
                    }
    
                    skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );
    
                }
    
            },
    
            updateMatrixWorld: function ( force ) {
    
                Mesh.prototype.updateMatrixWorld.call( this, force );
    
                if ( this.bindMode === 'attached' ) {
    
                    this.bindMatrixInverse.getInverse( this.matrixWorld );
    
                } else if ( this.bindMode === 'detached' ) {
    
                    this.bindMatrixInverse.getInverse( this.bindMatrix );
    
                } else {
    
                    console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );
    
                }
    
            },
    
            clone: function () {
    
                return new this.constructor( this.geometry, this.material ).copy( this );
    
            }
    
        } );
    
        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author michael guerrero / http://realitymeltdown.com
         * @author ikerr / http://verold.com
         */
    
        function Skeleton( bones, boneInverses ) {
    
            // copy the bone array
    
            bones = bones || [];
    
            this.bones = bones.slice( 0 );
            this.boneMatrices = new Float32Array( this.bones.length * 16 );
    
            // use the supplied bone inverses or calculate the inverses
    
            if ( boneInverses === undefined ) {
    
                this.calculateInverses();
    
            } else {
    
                if ( this.bones.length === boneInverses.length ) {
    
                    this.boneInverses = boneInverses.slice( 0 );
    
                } else {
    
                    console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );
    
                    this.boneInverses = [];
    
                    for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
    
                        this.boneInverses.push( new Matrix4() );
    
                    }
    
                }
    
            }
    
        }
    
        Object.assign( Skeleton.prototype, {
    
            calculateInverses: function () {
    
                this.boneInverses = [];
    
                for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
    
                    var inverse = new Matrix4();
    
                    if ( this.bones[ i ] ) {
    
                        inverse.getInverse( this.bones[ i ].matrixWorld );
    
                    }
    
                    this.boneInverses.push( inverse );
    
                }
    
            },
    
            pose: function () {
    
                var bone, i, il;
    
                // recover the bind-time world matrices
    
                for ( i = 0, il = this.bones.length; i < il; i ++ ) {
    
                    bone = this.bones[ i ];
    
                    if ( bone ) {
    
                        bone.matrixWorld.getInverse( this.boneInverses[ i ] );
    
                    }
    
                }
    
                // compute the local matrices, positions, rotations and scales
    
                for ( i = 0, il = this.bones.length; i < il; i ++ ) {
    
                    bone = this.bones[ i ];
    
                    if ( bone ) {
    
                        if ( bone.parent && bone.parent.isBone ) {
    
                            bone.matrix.getInverse( bone.parent.matrixWorld );
                            bone.matrix.multiply( bone.matrixWorld );
    
                        } else {
    
                            bone.matrix.copy( bone.matrixWorld );
    
                        }
    
                        bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
    
                    }
    
                }
    
            },
    
            update: ( function () {
    
                var offsetMatrix = new Matrix4();
                var identityMatrix = new Matrix4();
    
                return function update() {
    
                    var bones = this.bones;
                    var boneInverses = this.boneInverses;
                    var boneMatrices = this.boneMatrices;
                    var boneTexture = this.boneTexture;
    
                    // flatten bone matrices to array
    
                    for ( var i = 0, il = bones.length; i < il; i ++ ) {
    
                        // compute the offset between the current and the original transform
    
                        var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;
    
                        offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
                        offsetMatrix.toArray( boneMatrices, i * 16 );
    
                    }
    
                    if ( boneTexture !== undefined ) {
    
                        boneTexture.needsUpdate = true;
    
                    }
    
                };
    
            } )(),
    
            clone: function () {
    
                return new Skeleton( this.bones, this.boneInverses );
    
            },
    
            getBoneByName: function ( name ) {
    
                for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
    
                    var bone = this.bones[ i ];
    
                    if ( bone.name === name ) {
    
                        return bone;
    
                    }
    
                }
    
                return undefined;
    
            }
    
        } );
    
        /**
         * @author mikael emtinger / http://gomo.se/
         * @author alteredq / http://alteredqualia.com/
         * @author ikerr / http://verold.com
         */
    
        function Bone() {
    
            Object3D.call( this );
    
            this.type = 'Bone';
    
        }
    
        Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Bone,
    
            isBone: true
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *
         *  linewidth: <float>,
         *  linecap: "round",
         *  linejoin: "round"
         * }
         */
    
        function LineBasicMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'LineBasicMaterial';
    
            this.color = new Color( 0xffffff );
    
            this.linewidth = 1;
            this.linecap = 'round';
            this.linejoin = 'round';
    
            this.lights = false;
    
            this.setValues( parameters );
    
        }
    
        LineBasicMaterial.prototype = Object.create( Material.prototype );
        LineBasicMaterial.prototype.constructor = LineBasicMaterial;
    
        LineBasicMaterial.prototype.isLineBasicMaterial = true;
    
        LineBasicMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.color.copy( source.color );
    
            this.linewidth = source.linewidth;
            this.linecap = source.linecap;
            this.linejoin = source.linejoin;
    
            return this;
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function Line( geometry, material, mode ) {
    
            if ( mode === 1 ) {
    
                console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );
    
            }
    
            Object3D.call( this );
    
            this.type = 'Line';
    
            this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
            this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );
    
        }
    
        Line.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Line,
    
            isLine: true,
    
            computeLineDistances: ( function () {
    
                var start = new Vector3();
                var end = new Vector3();
    
                return function computeLineDistances() {
    
                    var geometry = this.geometry;
    
                    if ( geometry.isBufferGeometry ) {
    
                        // we assume non-indexed geometry
    
                        if ( geometry.index === null ) {
    
                            var positionAttribute = geometry.attributes.position;
                            var lineDistances = [ 0 ];
    
                            for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {
    
                                start.fromBufferAttribute( positionAttribute, i - 1 );
                                end.fromBufferAttribute( positionAttribute, i );
    
                                lineDistances[ i ] = lineDistances[ i - 1 ];
                                lineDistances[ i ] += start.distanceTo( end );
    
                            }
    
                            geometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
    
                        } else {
    
                            console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
    
                        }
    
                    } else if ( geometry.isGeometry ) {
    
                        var vertices = geometry.vertices;
                        var lineDistances = geometry.lineDistances;
    
                        lineDistances[ 0 ] = 0;
    
                        for ( var i = 1, l = vertices.length; i < l; i ++ ) {
    
                            lineDistances[ i ] = lineDistances[ i - 1 ];
                            lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );
    
                        }
    
                    }
    
                    return this;
    
                };
    
            }() ),
    
            raycast: ( function () {
    
                var inverseMatrix = new Matrix4();
                var ray = new Ray();
                var sphere = new Sphere();
    
                return function raycast( raycaster, intersects ) {
    
                    var precision = raycaster.linePrecision;
    
                    var geometry = this.geometry;
                    var matrixWorld = this.matrixWorld;
    
                    // Checking boundingSphere distance to ray
    
                    if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
    
                    sphere.copy( geometry.boundingSphere );
                    sphere.applyMatrix4( matrixWorld );
                    sphere.radius += precision;
    
                    if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
    
                    //
    
                    inverseMatrix.getInverse( matrixWorld );
                    ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
    
                    var localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
                    var localPrecisionSq = localPrecision * localPrecision;
    
                    var vStart = new Vector3();
                    var vEnd = new Vector3();
                    var interSegment = new Vector3();
                    var interRay = new Vector3();
                    var step = ( this && this.isLineSegments ) ? 2 : 1;
    
                    if ( geometry.isBufferGeometry ) {
    
                        var index = geometry.index;
                        var attributes = geometry.attributes;
                        var positions = attributes.position.array;
    
                        if ( index !== null ) {
    
                            var indices = index.array;
    
                            for ( var i = 0, l = indices.length - 1; i < l; i += step ) {
    
                                var a = indices[ i ];
                                var b = indices[ i + 1 ];
    
                                vStart.fromArray( positions, a * 3 );
                                vEnd.fromArray( positions, b * 3 );
    
                                var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
    
                                if ( distSq > localPrecisionSq ) continue;
    
                                interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
    
                                var distance = raycaster.ray.origin.distanceTo( interRay );
    
                                if ( distance < raycaster.near || distance > raycaster.far ) continue;
    
                                intersects.push( {
    
                                    distance: distance,
                                    // What do we want? intersection point on the ray or on the segment??
                                    // point: raycaster.ray.at( distance ),
                                    point: interSegment.clone().applyMatrix4( this.matrixWorld ),
                                    index: i,
                                    face: null,
                                    faceIndex: null,
                                    object: this
    
                                } );
    
                            }
    
                        } else {
    
                            for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {
    
                                vStart.fromArray( positions, 3 * i );
                                vEnd.fromArray( positions, 3 * i + 3 );
    
                                var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
    
                                if ( distSq > localPrecisionSq ) continue;
    
                                interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
    
                                var distance = raycaster.ray.origin.distanceTo( interRay );
    
                                if ( distance < raycaster.near || distance > raycaster.far ) continue;
    
                                intersects.push( {
    
                                    distance: distance,
                                    // What do we want? intersection point on the ray or on the segment??
                                    // point: raycaster.ray.at( distance ),
                                    point: interSegment.clone().applyMatrix4( this.matrixWorld ),
                                    index: i,
                                    face: null,
                                    faceIndex: null,
                                    object: this
    
                                } );
    
                            }
    
                        }
    
                    } else if ( geometry.isGeometry ) {
    
                        var vertices = geometry.vertices;
                        var nbVertices = vertices.length;
    
                        for ( var i = 0; i < nbVertices - 1; i += step ) {
    
                            var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );
    
                            if ( distSq > localPrecisionSq ) continue;
    
                            interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
    
                            var distance = raycaster.ray.origin.distanceTo( interRay );
    
                            if ( distance < raycaster.near || distance > raycaster.far ) continue;
    
                            intersects.push( {
    
                                distance: distance,
                                // What do we want? intersection point on the ray or on the segment??
                                // point: raycaster.ray.at( distance ),
                                point: interSegment.clone().applyMatrix4( this.matrixWorld ),
                                index: i,
                                face: null,
                                faceIndex: null,
                                object: this
    
                            } );
    
                        }
    
                    }
    
                };
    
            }() ),
    
            clone: function () {
    
                return new this.constructor( this.geometry, this.material ).copy( this );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function LineSegments( geometry, material ) {
    
            Line.call( this, geometry, material );
    
            this.type = 'LineSegments';
    
        }
    
        LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {
    
            constructor: LineSegments,
    
            isLineSegments: true,
    
            computeLineDistances: ( function () {
    
                var start = new Vector3();
                var end = new Vector3();
    
                return function computeLineDistances() {
    
                    var geometry = this.geometry;
    
                    if ( geometry.isBufferGeometry ) {
    
                        // we assume non-indexed geometry
    
                        if ( geometry.index === null ) {
    
                            var positionAttribute = geometry.attributes.position;
                            var lineDistances = [];
    
                            for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {
    
                                start.fromBufferAttribute( positionAttribute, i );
                                end.fromBufferAttribute( positionAttribute, i + 1 );
    
                                lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
                                lineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );
    
                            }
    
                            geometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
    
                        } else {
    
                            console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
    
                        }
    
                    } else if ( geometry.isGeometry ) {
    
                        var vertices = geometry.vertices;
                        var lineDistances = geometry.lineDistances;
    
                        for ( var i = 0, l = vertices.length; i < l; i += 2 ) {
    
                            start.copy( vertices[ i ] );
                            end.copy( vertices[ i + 1 ] );
    
                            lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
                            lineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );
    
                        }
    
                    }
    
                    return this;
    
                };
    
            }() )
    
        } );
    
        /**
         * @author mgreter / http://github.com/mgreter
         */
    
        function LineLoop( geometry, material ) {
    
            Line.call( this, geometry, material );
    
            this.type = 'LineLoop';
    
        }
    
        LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {
    
            constructor: LineLoop,
    
            isLineLoop: true,
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *  map: new THREE.Texture( <Image> ),
         *
         *  size: <float>,
         *  sizeAttenuation: <bool>
         *
         *  morphTargets: <bool>
         * }
         */
    
        function PointsMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'PointsMaterial';
    
            this.color = new Color( 0xffffff );
    
            this.map = null;
    
            this.size = 1;
            this.sizeAttenuation = true;
    
            this.morphTargets = false;
    
            this.lights = false;
    
            this.setValues( parameters );
    
        }
    
        PointsMaterial.prototype = Object.create( Material.prototype );
        PointsMaterial.prototype.constructor = PointsMaterial;
    
        PointsMaterial.prototype.isPointsMaterial = true;
    
        PointsMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.color.copy( source.color );
    
            this.map = source.map;
    
            this.size = source.size;
            this.sizeAttenuation = source.sizeAttenuation;
    
            this.morphTargets = source.morphTargets;
    
            return this;
    
        };
    
        /**
         * @author alteredq / http://alteredqualia.com/
         */
    
        function Points( geometry, material ) {
    
            Object3D.call( this );
    
            this.type = 'Points';
    
            this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
            this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );
    
        }
    
        Points.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Points,
    
            isPoints: true,
    
            raycast: ( function () {
    
                var inverseMatrix = new Matrix4();
                var ray = new Ray();
                var sphere = new Sphere();
    
                return function raycast( raycaster, intersects ) {
    
                    var object = this;
                    var geometry = this.geometry;
                    var matrixWorld = this.matrixWorld;
                    var threshold = raycaster.params.Points.threshold;
    
                    // Checking boundingSphere distance to ray
    
                    if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
    
                    sphere.copy( geometry.boundingSphere );
                    sphere.applyMatrix4( matrixWorld );
                    sphere.radius += threshold;
    
                    if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
    
                    //
    
                    inverseMatrix.getInverse( matrixWorld );
                    ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
    
                    var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
                    var localThresholdSq = localThreshold * localThreshold;
                    var position = new Vector3();
                    var intersectPoint = new Vector3();
    
                    function testPoint( point, index ) {
    
                        var rayPointDistanceSq = ray.distanceSqToPoint( point );
    
                        if ( rayPointDistanceSq < localThresholdSq ) {
    
                            ray.closestPointToPoint( point, intersectPoint );
                            intersectPoint.applyMatrix4( matrixWorld );
    
                            var distance = raycaster.ray.origin.distanceTo( intersectPoint );
    
                            if ( distance < raycaster.near || distance > raycaster.far ) return;
    
                            intersects.push( {
    
                                distance: distance,
                                distanceToRay: Math.sqrt( rayPointDistanceSq ),
                                point: intersectPoint.clone(),
                                index: index,
                                face: null,
                                object: object
    
                            } );
    
                        }
    
                    }
    
                    if ( geometry.isBufferGeometry ) {
    
                        var index = geometry.index;
                        var attributes = geometry.attributes;
                        var positions = attributes.position.array;
    
                        if ( index !== null ) {
    
                            var indices = index.array;
    
                            for ( var i = 0, il = indices.length; i < il; i ++ ) {
    
                                var a = indices[ i ];
    
                                position.fromArray( positions, a * 3 );
    
                                testPoint( position, a );
    
                            }
    
                        } else {
    
                            for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {
    
                                position.fromArray( positions, i * 3 );
    
                                testPoint( position, i );
    
                            }
    
                        }
    
                    } else {
    
                        var vertices = geometry.vertices;
    
                        for ( var i = 0, l = vertices.length; i < l; i ++ ) {
    
                            testPoint( vertices[ i ], i );
    
                        }
    
                    }
    
                };
    
            }() ),
    
            clone: function () {
    
                return new this.constructor( this.geometry, this.material ).copy( this );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
    
            Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
    
            this.format = format !== undefined ? format : RGBFormat;
    
            this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
            this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
    
            this.generateMipmaps = false;
    
        }
    
        VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {
    
            constructor: VideoTexture,
    
            isVideoTexture: true,
    
            update: function () {
    
                var video = this.image;
    
                if ( video.readyState >= video.HAVE_CURRENT_DATA ) {
    
                    this.needsUpdate = true;
    
                }
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         */
    
        function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
    
            Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
    
            this.image = { width: width, height: height };
            this.mipmaps = mipmaps;
    
            // no flipping for cube textures
            // (also flipping doesn't work for compressed textures )
    
            this.flipY = false;
    
            // can't generate mipmaps for compressed textures
            // mips must be embedded in DDS files
    
            this.generateMipmaps = false;
    
        }
    
        CompressedTexture.prototype = Object.create( Texture.prototype );
        CompressedTexture.prototype.constructor = CompressedTexture;
    
        CompressedTexture.prototype.isCompressedTexture = true;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
    
            Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
    
            this.needsUpdate = true;
    
        }
    
        CanvasTexture.prototype = Object.create( Texture.prototype );
        CanvasTexture.prototype.constructor = CanvasTexture;
        CanvasTexture.prototype.isCanvasTexture = true;
    
        /**
         * @author Matt DesLauriers / @mattdesl
         * @author atix / arthursilber.de
         */
    
        function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {
    
            format = format !== undefined ? format : DepthFormat;
    
            if ( format !== DepthFormat && format !== DepthStencilFormat ) {
    
                throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );
    
            }
    
            if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
            if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;
    
            Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
    
            this.image = { width: width, height: height };
    
            this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
            this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
    
            this.flipY = false;
            this.generateMipmaps	= false;
    
        }
    
        DepthTexture.prototype = Object.create( Texture.prototype );
        DepthTexture.prototype.constructor = DepthTexture;
        DepthTexture.prototype.isDepthTexture = true;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        function WireframeGeometry( geometry ) {
    
            BufferGeometry.call( this );
    
            this.type = 'WireframeGeometry';
    
            // buffer
    
            var vertices = [];
    
            // helper variables
    
            var i, j, l, o, ol;
            var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
            var key, keys = [ 'a', 'b', 'c' ];
            var vertex;
    
            // different logic for Geometry and BufferGeometry
    
            if ( geometry && geometry.isGeometry ) {
    
                // create a data structure that contains all edges without duplicates
    
                var faces = geometry.faces;
    
                for ( i = 0, l = faces.length; i < l; i ++ ) {
    
                    var face = faces[ i ];
    
                    for ( j = 0; j < 3; j ++ ) {
    
                        edge1 = face[ keys[ j ] ];
                        edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
                        edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
                        edge[ 1 ] = Math.max( edge1, edge2 );
    
                        key = edge[ 0 ] + ',' + edge[ 1 ];
    
                        if ( edges[ key ] === undefined ) {
    
                            edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
    
                        }
    
                    }
    
                }
    
                // generate vertices
    
                for ( key in edges ) {
    
                    e = edges[ key ];
    
                    vertex = geometry.vertices[ e.index1 ];
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                    vertex = geometry.vertices[ e.index2 ];
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                }
    
            } else if ( geometry && geometry.isBufferGeometry ) {
    
                var position, indices, groups;
                var group, start, count;
                var index1, index2;
    
                vertex = new Vector3();
    
                if ( geometry.index !== null ) {
    
                    // indexed BufferGeometry
    
                    position = geometry.attributes.position;
                    indices = geometry.index;
                    groups = geometry.groups;
    
                    if ( groups.length === 0 ) {
    
                        groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];
    
                    }
    
                    // create a data structure that contains all eges without duplicates
    
                    for ( o = 0, ol = groups.length; o < ol; ++ o ) {
    
                        group = groups[ o ];
    
                        start = group.start;
                        count = group.count;
    
                        for ( i = start, l = ( start + count ); i < l; i += 3 ) {
    
                            for ( j = 0; j < 3; j ++ ) {
    
                                edge1 = indices.getX( i + j );
                                edge2 = indices.getX( i + ( j + 1 ) % 3 );
                                edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
                                edge[ 1 ] = Math.max( edge1, edge2 );
    
                                key = edge[ 0 ] + ',' + edge[ 1 ];
    
                                if ( edges[ key ] === undefined ) {
    
                                    edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
    
                                }
    
                            }
    
                        }
    
                    }
    
                    // generate vertices
    
                    for ( key in edges ) {
    
                        e = edges[ key ];
    
                        vertex.fromBufferAttribute( position, e.index1 );
                        vertices.push( vertex.x, vertex.y, vertex.z );
    
                        vertex.fromBufferAttribute( position, e.index2 );
                        vertices.push( vertex.x, vertex.y, vertex.z );
    
                    }
    
                } else {
    
                    // non-indexed BufferGeometry
    
                    position = geometry.attributes.position;
    
                    for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {
    
                        for ( j = 0; j < 3; j ++ ) {
    
                            // three edges per triangle, an edge is represented as (index1, index2)
                            // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
    
                            index1 = 3 * i + j;
                            vertex.fromBufferAttribute( position, index1 );
                            vertices.push( vertex.x, vertex.y, vertex.z );
    
                            index2 = 3 * i + ( ( j + 1 ) % 3 );
                            vertex.fromBufferAttribute( position, index2 );
                            vertices.push( vertex.x, vertex.y, vertex.z );
    
                        }
    
                    }
    
                }
    
            }
    
            // build geometry
    
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    
        }
    
        WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
        WireframeGeometry.prototype.constructor = WireframeGeometry;
    
        /**
         * @author zz85 / https://github.com/zz85
         * @author Mugen87 / https://github.com/Mugen87
         *
         * Parametric Surfaces Geometry
         * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
         */
    
        // ParametricGeometry
    
        function ParametricGeometry( func, slices, stacks ) {
    
            Geometry.call( this );
    
            this.type = 'ParametricGeometry';
    
            this.parameters = {
                func: func,
                slices: slices,
                stacks: stacks
            };
    
            this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
            this.mergeVertices();
    
        }
    
        ParametricGeometry.prototype = Object.create( Geometry.prototype );
        ParametricGeometry.prototype.constructor = ParametricGeometry;
    
        // ParametricBufferGeometry
    
        function ParametricBufferGeometry( func, slices, stacks ) {
    
            BufferGeometry.call( this );
    
            this.type = 'ParametricBufferGeometry';
    
            this.parameters = {
                func: func,
                slices: slices,
                stacks: stacks
            };
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            var EPS = 0.00001;
    
            var normal = new Vector3();
    
            var p0 = new Vector3(), p1 = new Vector3();
            var pu = new Vector3(), pv = new Vector3();
    
            var i, j;
    
            if ( func.length < 3 ) {
    
                console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );
    
            }
    
            // generate vertices, normals and uvs
    
            var sliceCount = slices + 1;
    
            for ( i = 0; i <= stacks; i ++ ) {
    
                var v = i / stacks;
    
                for ( j = 0; j <= slices; j ++ ) {
    
                    var u = j / slices;
    
                    // vertex
    
                    func( u, v, p0 );
                    vertices.push( p0.x, p0.y, p0.z );
    
                    // normal
    
                    // approximate tangent vectors via finite differences
    
                    if ( u - EPS >= 0 ) {
    
                        func( u - EPS, v, p1 );
                        pu.subVectors( p0, p1 );
    
                    } else {
    
                        func( u + EPS, v, p1 );
                        pu.subVectors( p1, p0 );
    
                    }
    
                    if ( v - EPS >= 0 ) {
    
                        func( u, v - EPS, p1 );
                        pv.subVectors( p0, p1 );
    
                    } else {
    
                        func( u, v + EPS, p1 );
                        pv.subVectors( p1, p0 );
    
                    }
    
                    // cross product of tangent vectors returns surface normal
    
                    normal.crossVectors( pu, pv ).normalize();
                    normals.push( normal.x, normal.y, normal.z );
    
                    // uv
    
                    uvs.push( u, v );
    
                }
    
            }
    
            // generate indices
    
            for ( i = 0; i < stacks; i ++ ) {
    
                for ( j = 0; j < slices; j ++ ) {
    
                    var a = i * sliceCount + j;
                    var b = i * sliceCount + j + 1;
                    var c = ( i + 1 ) * sliceCount + j + 1;
                    var d = ( i + 1 ) * sliceCount + j;
    
                    // faces one and two
    
                    indices.push( a, b, d );
                    indices.push( b, c, d );
    
                }
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
        }
    
        ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
    
        /**
         * @author clockworkgeek / https://github.com/clockworkgeek
         * @author timothypratley / https://github.com/timothypratley
         * @author WestLangley / http://github.com/WestLangley
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // PolyhedronGeometry
    
        function PolyhedronGeometry( vertices, indices, radius, detail ) {
    
            Geometry.call( this );
    
            this.type = 'PolyhedronGeometry';
    
            this.parameters = {
                vertices: vertices,
                indices: indices,
                radius: radius,
                detail: detail
            };
    
            this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
            this.mergeVertices();
    
        }
    
        PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
        PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;
    
        // PolyhedronBufferGeometry
    
        function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {
    
            BufferGeometry.call( this );
    
            this.type = 'PolyhedronBufferGeometry';
    
            this.parameters = {
                vertices: vertices,
                indices: indices,
                radius: radius,
                detail: detail
            };
    
            radius = radius || 1;
            detail = detail || 0;
    
            // default buffer data
    
            var vertexBuffer = [];
            var uvBuffer = [];
    
            // the subdivision creates the vertex buffer data
    
            subdivide( detail );
    
            // all vertices should lie on a conceptual sphere with a given radius
    
            appplyRadius( radius );
    
            // finally, create the uv data
    
            generateUVs();
    
            // build non-indexed geometry
    
            this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );
    
            if ( detail === 0 ) {
    
                this.computeVertexNormals(); // flat normals
    
            } else {
    
                this.normalizeNormals(); // smooth normals
    
            }
    
            // helper functions
    
            function subdivide( detail ) {
    
                var a = new Vector3();
                var b = new Vector3();
                var c = new Vector3();
    
                // iterate over all faces and apply a subdivison with the given detail value
    
                for ( var i = 0; i < indices.length; i += 3 ) {
    
                    // get the vertices of the face
    
                    getVertexByIndex( indices[ i + 0 ], a );
                    getVertexByIndex( indices[ i + 1 ], b );
                    getVertexByIndex( indices[ i + 2 ], c );
    
                    // perform subdivision
    
                    subdivideFace( a, b, c, detail );
    
                }
    
            }
    
            function subdivideFace( a, b, c, detail ) {
    
                var cols = Math.pow( 2, detail );
    
                // we use this multidimensional array as a data structure for creating the subdivision
    
                var v = [];
    
                var i, j;
    
                // construct all of the vertices for this subdivision
    
                for ( i = 0; i <= cols; i ++ ) {
    
                    v[ i ] = [];
    
                    var aj = a.clone().lerp( c, i / cols );
                    var bj = b.clone().lerp( c, i / cols );
    
                    var rows = cols - i;
    
                    for ( j = 0; j <= rows; j ++ ) {
    
                        if ( j === 0 && i === cols ) {
    
                            v[ i ][ j ] = aj;
    
                        } else {
    
                            v[ i ][ j ] = aj.clone().lerp( bj, j / rows );
    
                        }
    
                    }
    
                }
    
                // construct all of the faces
    
                for ( i = 0; i < cols; i ++ ) {
    
                    for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
    
                        var k = Math.floor( j / 2 );
    
                        if ( j % 2 === 0 ) {
    
                            pushVertex( v[ i ][ k + 1 ] );
                            pushVertex( v[ i + 1 ][ k ] );
                            pushVertex( v[ i ][ k ] );
    
                        } else {
    
                            pushVertex( v[ i ][ k + 1 ] );
                            pushVertex( v[ i + 1 ][ k + 1 ] );
                            pushVertex( v[ i + 1 ][ k ] );
    
                        }
    
                    }
    
                }
    
            }
    
            function appplyRadius( radius ) {
    
                var vertex = new Vector3();
    
                // iterate over the entire buffer and apply the radius to each vertex
    
                for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
    
                    vertex.x = vertexBuffer[ i + 0 ];
                    vertex.y = vertexBuffer[ i + 1 ];
                    vertex.z = vertexBuffer[ i + 2 ];
    
                    vertex.normalize().multiplyScalar( radius );
    
                    vertexBuffer[ i + 0 ] = vertex.x;
                    vertexBuffer[ i + 1 ] = vertex.y;
                    vertexBuffer[ i + 2 ] = vertex.z;
    
                }
    
            }
    
            function generateUVs() {
    
                var vertex = new Vector3();
    
                for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
    
                    vertex.x = vertexBuffer[ i + 0 ];
                    vertex.y = vertexBuffer[ i + 1 ];
                    vertex.z = vertexBuffer[ i + 2 ];
    
                    var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
                    var v = inclination( vertex ) / Math.PI + 0.5;
                    uvBuffer.push( u, 1 - v );
    
                }
    
                correctUVs();
    
                correctSeam();
    
            }
    
            function correctSeam() {
    
                // handle case when face straddles the seam, see #3269
    
                for ( var i = 0; i < uvBuffer.length; i += 6 ) {
    
                    // uv data of a single face
    
                    var x0 = uvBuffer[ i + 0 ];
                    var x1 = uvBuffer[ i + 2 ];
                    var x2 = uvBuffer[ i + 4 ];
    
                    var max = Math.max( x0, x1, x2 );
                    var min = Math.min( x0, x1, x2 );
    
                    // 0.9 is somewhat arbitrary
    
                    if ( max > 0.9 && min < 0.1 ) {
    
                        if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
                        if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
                        if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;
    
                    }
    
                }
    
            }
    
            function pushVertex( vertex ) {
    
                vertexBuffer.push( vertex.x, vertex.y, vertex.z );
    
            }
    
            function getVertexByIndex( index, vertex ) {
    
                var stride = index * 3;
    
                vertex.x = vertices[ stride + 0 ];
                vertex.y = vertices[ stride + 1 ];
                vertex.z = vertices[ stride + 2 ];
    
            }
    
            function correctUVs() {
    
                var a = new Vector3();
                var b = new Vector3();
                var c = new Vector3();
    
                var centroid = new Vector3();
    
                var uvA = new Vector2();
                var uvB = new Vector2();
                var uvC = new Vector2();
    
                for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {
    
                    a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
                    b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
                    c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );
    
                    uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
                    uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
                    uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );
    
                    centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );
    
                    var azi = azimuth( centroid );
    
                    correctUV( uvA, j + 0, a, azi );
                    correctUV( uvB, j + 2, b, azi );
                    correctUV( uvC, j + 4, c, azi );
    
                }
    
            }
    
            function correctUV( uv, stride, vector, azimuth ) {
    
                if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {
    
                    uvBuffer[ stride ] = uv.x - 1;
    
                }
    
                if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {
    
                    uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;
    
                }
    
            }
    
            // Angle around the Y axis, counter-clockwise when looking from above.
    
            function azimuth( vector ) {
    
                return Math.atan2( vector.z, - vector.x );
    
            }
    
    
            // Angle above the XZ plane.
    
            function inclination( vector ) {
    
                return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
    
            }
    
        }
    
        PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;
    
        /**
         * @author timothypratley / https://github.com/timothypratley
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // TetrahedronGeometry
    
        function TetrahedronGeometry( radius, detail ) {
    
            Geometry.call( this );
    
            this.type = 'TetrahedronGeometry';
    
            this.parameters = {
                radius: radius,
                detail: detail
            };
    
            this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
            this.mergeVertices();
    
        }
    
        TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
        TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;
    
        // TetrahedronBufferGeometry
    
        function TetrahedronBufferGeometry( radius, detail ) {
    
            var vertices = [
                1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
            ];
    
            var indices = [
                2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
            ];
    
            PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
    
            this.type = 'TetrahedronBufferGeometry';
    
            this.parameters = {
                radius: radius,
                detail: detail
            };
    
        }
    
        TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
        TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;
    
        /**
         * @author timothypratley / https://github.com/timothypratley
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // OctahedronGeometry
    
        function OctahedronGeometry( radius, detail ) {
    
            Geometry.call( this );
    
            this.type = 'OctahedronGeometry';
    
            this.parameters = {
                radius: radius,
                detail: detail
            };
    
            this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
            this.mergeVertices();
    
        }
    
        OctahedronGeometry.prototype = Object.create( Geometry.prototype );
        OctahedronGeometry.prototype.constructor = OctahedronGeometry;
    
        // OctahedronBufferGeometry
    
        function OctahedronBufferGeometry( radius, detail ) {
    
            var vertices = [
                1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
                0, - 1, 0, 	0, 0, 1,	0, 0, - 1
            ];
    
            var indices = [
                0, 2, 4,	0, 4, 3,	0, 3, 5,
                0, 5, 2,	1, 2, 5,	1, 5, 3,
                1, 3, 4,	1, 4, 2
            ];
    
            PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
    
            this.type = 'OctahedronBufferGeometry';
    
            this.parameters = {
                radius: radius,
                detail: detail
            };
    
        }
    
        OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
        OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;
    
        /**
         * @author timothypratley / https://github.com/timothypratley
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // IcosahedronGeometry
    
        function IcosahedronGeometry( radius, detail ) {
    
            Geometry.call( this );
    
            this.type = 'IcosahedronGeometry';
    
            this.parameters = {
                radius: radius,
                detail: detail
            };
    
            this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
            this.mergeVertices();
    
        }
    
        IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
        IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;
    
        // IcosahedronBufferGeometry
    
        function IcosahedronBufferGeometry( radius, detail ) {
    
            var t = ( 1 + Math.sqrt( 5 ) ) / 2;
    
            var vertices = [
                - 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
                 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
                 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
            ];
    
            var indices = [
                 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
                 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
                 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
                 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
            ];
    
            PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
    
            this.type = 'IcosahedronBufferGeometry';
    
            this.parameters = {
                radius: radius,
                detail: detail
            };
    
        }
    
        IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
        IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;
    
        /**
         * @author Abe Pazos / https://hamoid.com
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // DodecahedronGeometry
    
        function DodecahedronGeometry( radius, detail ) {
    
            Geometry.call( this );
    
            this.type = 'DodecahedronGeometry';
    
            this.parameters = {
                radius: radius,
                detail: detail
            };
    
            this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
            this.mergeVertices();
    
        }
    
        DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
        DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;
    
        // DodecahedronBufferGeometry
    
        function DodecahedronBufferGeometry( radius, detail ) {
    
            var t = ( 1 + Math.sqrt( 5 ) ) / 2;
            var r = 1 / t;
    
            var vertices = [
    
                // (±1, ±1, ±1)
                - 1, - 1, - 1,	- 1, - 1, 1,
                - 1, 1, - 1, - 1, 1, 1,
                1, - 1, - 1, 1, - 1, 1,
                1, 1, - 1, 1, 1, 1,
    
                // (0, ±1/φ, ±φ)
                 0, - r, - t, 0, - r, t,
                 0, r, - t, 0, r, t,
    
                // (±1/φ, ±φ, 0)
                - r, - t, 0, - r, t, 0,
                 r, - t, 0, r, t, 0,
    
                // (±φ, 0, ±1/φ)
                - t, 0, - r, t, 0, - r,
                - t, 0, r, t, 0, r
            ];
    
            var indices = [
                3, 11, 7, 	3, 7, 15, 	3, 15, 13,
                7, 19, 17, 	7, 17, 6, 	7, 6, 15,
                17, 4, 8, 	17, 8, 10, 	17, 10, 6,
                8, 0, 16, 	8, 16, 2, 	8, 2, 10,
                0, 12, 1, 	0, 1, 18, 	0, 18, 16,
                6, 10, 2, 	6, 2, 13, 	6, 13, 15,
                2, 16, 18, 	2, 18, 3, 	2, 3, 13,
                18, 1, 9, 	18, 9, 11, 	18, 11, 3,
                4, 14, 12, 	4, 12, 0, 	4, 0, 8,
                11, 9, 5, 	11, 5, 19, 	11, 19, 7,
                19, 5, 14, 	19, 14, 4, 	19, 4, 17,
                1, 12, 14, 	1, 14, 5, 	1, 5, 9
            ];
    
            PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
    
            this.type = 'DodecahedronBufferGeometry';
    
            this.parameters = {
                radius: radius,
                detail: detail
            };
    
        }
    
        DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
        DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;
    
        /**
         * @author oosmoxiecode / https://github.com/oosmoxiecode
         * @author WestLangley / https://github.com/WestLangley
         * @author zz85 / https://github.com/zz85
         * @author miningold / https://github.com/miningold
         * @author jonobr1 / https://github.com/jonobr1
         * @author Mugen87 / https://github.com/Mugen87
         *
         */
    
        // TubeGeometry
    
        function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {
    
            Geometry.call( this );
    
            this.type = 'TubeGeometry';
    
            this.parameters = {
                path: path,
                tubularSegments: tubularSegments,
                radius: radius,
                radialSegments: radialSegments,
                closed: closed
            };
    
            if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );
    
            var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );
    
            // expose internals
    
            this.tangents = bufferGeometry.tangents;
            this.normals = bufferGeometry.normals;
            this.binormals = bufferGeometry.binormals;
    
            // create geometry
    
            this.fromBufferGeometry( bufferGeometry );
            this.mergeVertices();
    
        }
    
        TubeGeometry.prototype = Object.create( Geometry.prototype );
        TubeGeometry.prototype.constructor = TubeGeometry;
    
        // TubeBufferGeometry
    
        function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {
    
            BufferGeometry.call( this );
    
            this.type = 'TubeBufferGeometry';
    
            this.parameters = {
                path: path,
                tubularSegments: tubularSegments,
                radius: radius,
                radialSegments: radialSegments,
                closed: closed
            };
    
            tubularSegments = tubularSegments || 64;
            radius = radius || 1;
            radialSegments = radialSegments || 8;
            closed = closed || false;
    
            var frames = path.computeFrenetFrames( tubularSegments, closed );
    
            // expose internals
    
            this.tangents = frames.tangents;
            this.normals = frames.normals;
            this.binormals = frames.binormals;
    
            // helper variables
    
            var vertex = new Vector3();
            var normal = new Vector3();
            var uv = new Vector2();
            var P = new Vector3();
    
            var i, j;
    
            // buffer
    
            var vertices = [];
            var normals = [];
            var uvs = [];
            var indices = [];
    
            // create buffer data
    
            generateBufferData();
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
            // functions
    
            function generateBufferData() {
    
                for ( i = 0; i < tubularSegments; i ++ ) {
    
                    generateSegment( i );
    
                }
    
                // if the geometry is not closed, generate the last row of vertices and normals
                // at the regular position on the given path
                //
                // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
    
                generateSegment( ( closed === false ) ? tubularSegments : 0 );
    
                // uvs are generated in a separate function.
                // this makes it easy compute correct values for closed geometries
    
                generateUVs();
    
                // finally create faces
    
                generateIndices();
    
            }
    
            function generateSegment( i ) {
    
                // we use getPointAt to sample evenly distributed points from the given path
    
                P = path.getPointAt( i / tubularSegments, P );
    
                // retrieve corresponding normal and binormal
    
                var N = frames.normals[ i ];
                var B = frames.binormals[ i ];
    
                // generate normals and vertices for the current segment
    
                for ( j = 0; j <= radialSegments; j ++ ) {
    
                    var v = j / radialSegments * Math.PI * 2;
    
                    var sin = Math.sin( v );
                    var cos = - Math.cos( v );
    
                    // normal
    
                    normal.x = ( cos * N.x + sin * B.x );
                    normal.y = ( cos * N.y + sin * B.y );
                    normal.z = ( cos * N.z + sin * B.z );
                    normal.normalize();
    
                    normals.push( normal.x, normal.y, normal.z );
    
                    // vertex
    
                    vertex.x = P.x + radius * normal.x;
                    vertex.y = P.y + radius * normal.y;
                    vertex.z = P.z + radius * normal.z;
    
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                }
    
            }
    
            function generateIndices() {
    
                for ( j = 1; j <= tubularSegments; j ++ ) {
    
                    for ( i = 1; i <= radialSegments; i ++ ) {
    
                        var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
                        var b = ( radialSegments + 1 ) * j + ( i - 1 );
                        var c = ( radialSegments + 1 ) * j + i;
                        var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
    
                        // faces
    
                        indices.push( a, b, d );
                        indices.push( b, c, d );
    
                    }
    
                }
    
            }
    
            function generateUVs() {
    
                for ( i = 0; i <= tubularSegments; i ++ ) {
    
                    for ( j = 0; j <= radialSegments; j ++ ) {
    
                        uv.x = i / tubularSegments;
                        uv.y = j / radialSegments;
    
                        uvs.push( uv.x, uv.y );
    
                    }
    
                }
    
            }
    
        }
    
        TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;
    
        TubeBufferGeometry.prototype.toJSON = function () {
    
            var data = BufferGeometry.prototype.toJSON.call( this );
    
            data.path = this.parameters.path.toJSON();
    
            return data;
    
        };
    
        /**
         * @author oosmoxiecode
         * @author Mugen87 / https://github.com/Mugen87
         *
         * based on http://www.blackpawn.com/texts/pqtorus/
         */
    
        // TorusKnotGeometry
    
        function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {
    
            Geometry.call( this );
    
            this.type = 'TorusKnotGeometry';
    
            this.parameters = {
                radius: radius,
                tube: tube,
                tubularSegments: tubularSegments,
                radialSegments: radialSegments,
                p: p,
                q: q
            };
    
            if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );
    
            this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
            this.mergeVertices();
    
        }
    
        TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
        TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;
    
        // TorusKnotBufferGeometry
    
        function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {
    
            BufferGeometry.call( this );
    
            this.type = 'TorusKnotBufferGeometry';
    
            this.parameters = {
                radius: radius,
                tube: tube,
                tubularSegments: tubularSegments,
                radialSegments: radialSegments,
                p: p,
                q: q
            };
    
            radius = radius || 1;
            tube = tube || 0.4;
            tubularSegments = Math.floor( tubularSegments ) || 64;
            radialSegments = Math.floor( radialSegments ) || 8;
            p = p || 2;
            q = q || 3;
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // helper variables
    
            var i, j;
    
            var vertex = new Vector3();
            var normal = new Vector3();
    
            var P1 = new Vector3();
            var P2 = new Vector3();
    
            var B = new Vector3();
            var T = new Vector3();
            var N = new Vector3();
    
            // generate vertices, normals and uvs
    
            for ( i = 0; i <= tubularSegments; ++ i ) {
    
                // the radian "u" is used to calculate the position on the torus curve of the current tubular segement
    
                var u = i / tubularSegments * p * Math.PI * 2;
    
                // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
                // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
    
                calculatePositionOnCurve( u, p, q, radius, P1 );
                calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );
    
                // calculate orthonormal basis
    
                T.subVectors( P2, P1 );
                N.addVectors( P2, P1 );
                B.crossVectors( T, N );
                N.crossVectors( B, T );
    
                // normalize B, N. T can be ignored, we don't use it
    
                B.normalize();
                N.normalize();
    
                for ( j = 0; j <= radialSegments; ++ j ) {
    
                    // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
                    // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
    
                    var v = j / radialSegments * Math.PI * 2;
                    var cx = - tube * Math.cos( v );
                    var cy = tube * Math.sin( v );
    
                    // now calculate the final vertex position.
                    // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
    
                    vertex.x = P1.x + ( cx * N.x + cy * B.x );
                    vertex.y = P1.y + ( cx * N.y + cy * B.y );
                    vertex.z = P1.z + ( cx * N.z + cy * B.z );
    
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                    // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
    
                    normal.subVectors( vertex, P1 ).normalize();
    
                    normals.push( normal.x, normal.y, normal.z );
    
                    // uv
    
                    uvs.push( i / tubularSegments );
                    uvs.push( j / radialSegments );
    
                }
    
            }
    
            // generate indices
    
            for ( j = 1; j <= tubularSegments; j ++ ) {
    
                for ( i = 1; i <= radialSegments; i ++ ) {
    
                    // indices
    
                    var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
                    var b = ( radialSegments + 1 ) * j + ( i - 1 );
                    var c = ( radialSegments + 1 ) * j + i;
                    var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
    
                    // faces
    
                    indices.push( a, b, d );
                    indices.push( b, c, d );
    
                }
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
            // this function calculates the current position on the torus curve
    
            function calculatePositionOnCurve( u, p, q, radius, position ) {
    
                var cu = Math.cos( u );
                var su = Math.sin( u );
                var quOverP = q / p * u;
                var cs = Math.cos( quOverP );
    
                position.x = radius * ( 2 + cs ) * 0.5 * cu;
                position.y = radius * ( 2 + cs ) * su * 0.5;
                position.z = radius * Math.sin( quOverP ) * 0.5;
    
            }
    
        }
    
        TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;
    
        /**
         * @author oosmoxiecode
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // TorusGeometry
    
        function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
    
            Geometry.call( this );
    
            this.type = 'TorusGeometry';
    
            this.parameters = {
                radius: radius,
                tube: tube,
                radialSegments: radialSegments,
                tubularSegments: tubularSegments,
                arc: arc
            };
    
            this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
            this.mergeVertices();
    
        }
    
        TorusGeometry.prototype = Object.create( Geometry.prototype );
        TorusGeometry.prototype.constructor = TorusGeometry;
    
        // TorusBufferGeometry
    
        function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
    
            BufferGeometry.call( this );
    
            this.type = 'TorusBufferGeometry';
    
            this.parameters = {
                radius: radius,
                tube: tube,
                radialSegments: radialSegments,
                tubularSegments: tubularSegments,
                arc: arc
            };
    
            radius = radius || 1;
            tube = tube || 0.4;
            radialSegments = Math.floor( radialSegments ) || 8;
            tubularSegments = Math.floor( tubularSegments ) || 6;
            arc = arc || Math.PI * 2;
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // helper variables
    
            var center = new Vector3();
            var vertex = new Vector3();
            var normal = new Vector3();
    
            var j, i;
    
            // generate vertices, normals and uvs
    
            for ( j = 0; j <= radialSegments; j ++ ) {
    
                for ( i = 0; i <= tubularSegments; i ++ ) {
    
                    var u = i / tubularSegments * arc;
                    var v = j / radialSegments * Math.PI * 2;
    
                    // vertex
    
                    vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
                    vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
                    vertex.z = tube * Math.sin( v );
    
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                    // normal
    
                    center.x = radius * Math.cos( u );
                    center.y = radius * Math.sin( u );
                    normal.subVectors( vertex, center ).normalize();
    
                    normals.push( normal.x, normal.y, normal.z );
    
                    // uv
    
                    uvs.push( i / tubularSegments );
                    uvs.push( j / radialSegments );
    
                }
    
            }
    
            // generate indices
    
            for ( j = 1; j <= radialSegments; j ++ ) {
    
                for ( i = 1; i <= tubularSegments; i ++ ) {
    
                    // indices
    
                    var a = ( tubularSegments + 1 ) * j + i - 1;
                    var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
                    var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
                    var d = ( tubularSegments + 1 ) * j + i;
    
                    // faces
    
                    indices.push( a, b, d );
                    indices.push( b, c, d );
    
                }
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
        }
    
        TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;
    
        /**
         * @author Mugen87 / https://github.com/Mugen87
         * Port from https://github.com/mapbox/earcut (v2.1.2)
         */
    
        var Earcut = {
    
            triangulate: function ( data, holeIndices, dim ) {
    
                dim = dim || 2;
    
                var hasHoles = holeIndices && holeIndices.length,
                    outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
                    outerNode = linkedList( data, 0, outerLen, dim, true ),
                    triangles = [];
    
                if ( ! outerNode ) return triangles;
    
                var minX, minY, maxX, maxY, x, y, invSize;
    
                if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );
    
                // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    
                if ( data.length > 80 * dim ) {
    
                    minX = maxX = data[ 0 ];
                    minY = maxY = data[ 1 ];
    
                    for ( var i = dim; i < outerLen; i += dim ) {
    
                        x = data[ i ];
                        y = data[ i + 1 ];
                        if ( x < minX ) minX = x;
                        if ( y < minY ) minY = y;
                        if ( x > maxX ) maxX = x;
                        if ( y > maxY ) maxY = y;
    
                    }
    
                    // minX, minY and invSize are later used to transform coords into integers for z-order calculation
    
                    invSize = Math.max( maxX - minX, maxY - minY );
                    invSize = invSize !== 0 ? 1 / invSize : 0;
    
                }
    
                earcutLinked( outerNode, triangles, dim, minX, minY, invSize );
    
                return triangles;
    
            }
    
        };
    
        // create a circular doubly linked list from polygon points in the specified winding order
    
        function linkedList( data, start, end, dim, clockwise ) {
    
            var i, last;
    
            if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {
    
                for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
    
            } else {
    
                for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
    
            }
    
            if ( last && equals( last, last.next ) ) {
    
                removeNode( last );
                last = last.next;
    
            }
    
            return last;
    
        }
    
        // eliminate colinear or duplicate points
    
        function filterPoints( start, end ) {
    
            if ( ! start ) return start;
            if ( ! end ) end = start;
    
            var p = start, again;
    
            do {
    
                again = false;
    
                if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {
    
                    removeNode( p );
                    p = end = p.prev;
                    if ( p === p.next ) break;
                    again = true;
    
                } else {
    
                    p = p.next;
    
                }
    
            } while ( again || p !== end );
    
            return end;
    
        }
    
        // main ear slicing loop which triangulates a polygon (given as a linked list)
    
        function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {
    
            if ( ! ear ) return;
    
            // interlink polygon nodes in z-order
    
            if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );
    
            var stop = ear, prev, next;
    
            // iterate through ears, slicing them one by one
    
            while ( ear.prev !== ear.next ) {
    
                prev = ear.prev;
                next = ear.next;
    
                if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {
    
                    // cut off the triangle
                    triangles.push( prev.i / dim );
                    triangles.push( ear.i / dim );
                    triangles.push( next.i / dim );
    
                    removeNode( ear );
    
                    // skipping the next vertice leads to less sliver triangles
                    ear = next.next;
                    stop = next.next;
    
                    continue;
    
                }
    
                ear = next;
    
                // if we looped through the whole remaining polygon and can't find any more ears
    
                if ( ear === stop ) {
    
                    // try filtering points and slicing again
    
                    if ( ! pass ) {
    
                        earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );
    
                        // if this didn't work, try curing all small self-intersections locally
    
                    } else if ( pass === 1 ) {
    
                        ear = cureLocalIntersections( ear, triangles, dim );
                        earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );
    
                        // as a last resort, try splitting the remaining polygon into two
    
                    } else if ( pass === 2 ) {
    
                        splitEarcut( ear, triangles, dim, minX, minY, invSize );
    
                    }
    
                    break;
    
                }
    
            }
    
        }
    
        // check whether a polygon node forms a valid ear with adjacent nodes
    
        function isEar( ear ) {
    
            var a = ear.prev,
                b = ear,
                c = ear.next;
    
            if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear
    
            // now make sure we don't have other points inside the potential ear
            var p = ear.next.next;
    
            while ( p !== ear.prev ) {
    
                if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {
    
                    return false;
    
                }
    
                p = p.next;
    
            }
    
            return true;
    
        }
    
        function isEarHashed( ear, minX, minY, invSize ) {
    
            var a = ear.prev,
                b = ear,
                c = ear.next;
    
            if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear
    
            // triangle bbox; min & max are calculated like this for speed
    
            var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
                minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
                maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
                maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );
    
            // z-order range for the current triangle bbox;
    
            var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
                maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );
    
            // first look for points inside the triangle in increasing z-order
    
            var p = ear.nextZ;
    
            while ( p && p.z <= maxZ ) {
    
                if ( p !== ear.prev && p !== ear.next &&
                        pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
                        area( p.prev, p, p.next ) >= 0 ) return false;
                p = p.nextZ;
    
            }
    
            // then look for points in decreasing z-order
    
            p = ear.prevZ;
    
            while ( p && p.z >= minZ ) {
    
                if ( p !== ear.prev && p !== ear.next &&
                        pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
                        area( p.prev, p, p.next ) >= 0 ) return false;
    
                p = p.prevZ;
    
            }
    
            return true;
    
        }
    
        // go through all polygon nodes and cure small local self-intersections
    
        function cureLocalIntersections( start, triangles, dim ) {
    
            var p = start;
    
            do {
    
                var a = p.prev, b = p.next.next;
    
                if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {
    
                    triangles.push( a.i / dim );
                    triangles.push( p.i / dim );
                    triangles.push( b.i / dim );
    
                    // remove two nodes involved
    
                    removeNode( p );
                    removeNode( p.next );
    
                    p = start = b;
    
                }
    
                p = p.next;
    
            } while ( p !== start );
    
            return p;
    
        }
    
        // try splitting polygon into two and triangulate them independently
    
        function splitEarcut( start, triangles, dim, minX, minY, invSize ) {
    
            // look for a valid diagonal that divides the polygon into two
    
            var a = start;
    
            do {
    
                var b = a.next.next;
    
                while ( b !== a.prev ) {
    
                    if ( a.i !== b.i && isValidDiagonal( a, b ) ) {
    
                        // split the polygon in two by the diagonal
    
                        var c = splitPolygon( a, b );
    
                        // filter colinear points around the cuts
    
                        a = filterPoints( a, a.next );
                        c = filterPoints( c, c.next );
    
                        // run earcut on each half
    
                        earcutLinked( a, triangles, dim, minX, minY, invSize );
                        earcutLinked( c, triangles, dim, minX, minY, invSize );
                        return;
    
                    }
    
                    b = b.next;
    
                }
    
                a = a.next;
    
            } while ( a !== start );
    
        }
    
        // link every hole into the outer loop, producing a single-ring polygon without holes
    
        function eliminateHoles( data, holeIndices, outerNode, dim ) {
    
            var queue = [], i, len, start, end, list;
    
            for ( i = 0, len = holeIndices.length; i < len; i ++ ) {
    
                start = holeIndices[ i ] * dim;
                end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
                list = linkedList( data, start, end, dim, false );
                if ( list === list.next ) list.steiner = true;
                queue.push( getLeftmost( list ) );
    
            }
    
            queue.sort( compareX );
    
            // process holes from left to right
    
            for ( i = 0; i < queue.length; i ++ ) {
    
                eliminateHole( queue[ i ], outerNode );
                outerNode = filterPoints( outerNode, outerNode.next );
    
            }
    
            return outerNode;
    
        }
    
        function compareX( a, b ) {
    
            return a.x - b.x;
    
        }
    
        // find a bridge between vertices that connects hole with an outer ring and and link it
    
        function eliminateHole( hole, outerNode ) {
    
            outerNode = findHoleBridge( hole, outerNode );
    
            if ( outerNode ) {
    
                var b = splitPolygon( outerNode, hole );
    
                filterPoints( b, b.next );
    
            }
    
        }
    
        // David Eberly's algorithm for finding a bridge between hole and outer polygon
    
        function findHoleBridge( hole, outerNode ) {
    
            var p = outerNode,
                hx = hole.x,
                hy = hole.y,
                qx = - Infinity,
                m;
    
            // find a segment intersected by a ray from the hole's leftmost point to the left;
            // segment's endpoint with lesser x will be potential connection point
    
            do {
    
                if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {
    
                    var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
    
                    if ( x <= hx && x > qx ) {
    
                        qx = x;
    
                        if ( x === hx ) {
    
                            if ( hy === p.y ) return p;
                            if ( hy === p.next.y ) return p.next;
    
                        }
    
                        m = p.x < p.next.x ? p : p.next;
    
                    }
    
                }
    
                p = p.next;
    
            } while ( p !== outerNode );
    
            if ( ! m ) return null;
    
            if ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint
    
            // look for points inside the triangle of hole point, segment intersection and endpoint;
            // if there are no points found, we have a valid connection;
            // otherwise choose the point of the minimum angle with the ray as connection point
    
            var stop = m,
                mx = m.x,
                my = m.y,
                tanMin = Infinity,
                tan;
    
            p = m.next;
    
            while ( p !== stop ) {
    
                if ( hx >= p.x && p.x >= mx && hx !== p.x &&
                                pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {
    
                    tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential
    
                    if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {
    
                        m = p;
                        tanMin = tan;
    
                    }
    
                }
    
                p = p.next;
    
            }
    
            return m;
    
        }
    
        // interlink polygon nodes in z-order
    
        function indexCurve( start, minX, minY, invSize ) {
    
            var p = start;
    
            do {
    
                if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
                p.prevZ = p.prev;
                p.nextZ = p.next;
                p = p.next;
    
            } while ( p !== start );
    
            p.prevZ.nextZ = null;
            p.prevZ = null;
    
            sortLinked( p );
    
        }
    
        // Simon Tatham's linked list merge sort algorithm
        // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
    
        function sortLinked( list ) {
    
            var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    
            do {
    
                p = list;
                list = null;
                tail = null;
                numMerges = 0;
    
                while ( p ) {
    
                    numMerges ++;
                    q = p;
                    pSize = 0;
    
                    for ( i = 0; i < inSize; i ++ ) {
    
                        pSize ++;
                        q = q.nextZ;
                        if ( ! q ) break;
    
                    }
    
                    qSize = inSize;
    
                    while ( pSize > 0 || ( qSize > 0 && q ) ) {
    
                        if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {
    
                            e = p;
                            p = p.nextZ;
                            pSize --;
    
                        } else {
    
                            e = q;
                            q = q.nextZ;
                            qSize --;
    
                        }
    
                        if ( tail ) tail.nextZ = e;
                        else list = e;
    
                        e.prevZ = tail;
                        tail = e;
    
                    }
    
                    p = q;
    
                }
    
                tail.nextZ = null;
                inSize *= 2;
    
            } while ( numMerges > 1 );
    
            return list;
    
        }
    
        // z-order of a point given coords and inverse of the longer side of data bbox
    
        function zOrder( x, y, minX, minY, invSize ) {
    
            // coords are transformed into non-negative 15-bit integer range
    
            x = 32767 * ( x - minX ) * invSize;
            y = 32767 * ( y - minY ) * invSize;
    
            x = ( x | ( x << 8 ) ) & 0x00FF00FF;
            x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
            x = ( x | ( x << 2 ) ) & 0x33333333;
            x = ( x | ( x << 1 ) ) & 0x55555555;
    
            y = ( y | ( y << 8 ) ) & 0x00FF00FF;
            y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
            y = ( y | ( y << 2 ) ) & 0x33333333;
            y = ( y | ( y << 1 ) ) & 0x55555555;
    
            return x | ( y << 1 );
    
        }
    
        // find the leftmost node of a polygon ring
    
        function getLeftmost( start ) {
    
            var p = start, leftmost = start;
    
            do {
    
                if ( p.x < leftmost.x ) leftmost = p;
                p = p.next;
    
            } while ( p !== start );
    
            return leftmost;
    
        }
    
        // check if a point lies within a convex triangle
    
        function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {
    
            return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
             ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
             ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;
    
        }
    
        // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
    
        function isValidDiagonal( a, b ) {
    
            return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
                locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );
    
        }
    
        // signed area of a triangle
    
        function area( p, q, r ) {
    
            return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );
    
        }
    
        // check if two points are equal
    
        function equals( p1, p2 ) {
    
            return p1.x === p2.x && p1.y === p2.y;
    
        }
    
        // check if two segments intersect
    
        function intersects( p1, q1, p2, q2 ) {
    
            if ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||
                    ( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;
    
            return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
                         area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;
    
        }
    
        // check if a polygon diagonal intersects any polygon segments
    
        function intersectsPolygon( a, b ) {
    
            var p = a;
    
            do {
    
                if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                                intersects( p, p.next, a, b ) ) {
    
                    return true;
    
                }
    
                p = p.next;
    
            } while ( p !== a );
    
            return false;
    
        }
    
        // check if a polygon diagonal is locally inside the polygon
    
        function locallyInside( a, b ) {
    
            return area( a.prev, a, a.next ) < 0 ?
                area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
                area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;
    
        }
    
        // check if the middle point of a polygon diagonal is inside the polygon
    
        function middleInside( a, b ) {
    
            var p = a,
                inside = false,
                px = ( a.x + b.x ) / 2,
                py = ( a.y + b.y ) / 2;
    
            do {
    
                if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
                                ( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {
    
                    inside = ! inside;
    
                }
    
                p = p.next;
    
            } while ( p !== a );
    
            return inside;
    
        }
    
        // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
        // if one belongs to the outer ring and another to a hole, it merges it into a single ring
    
        function splitPolygon( a, b ) {
    
            var a2 = new Node( a.i, a.x, a.y ),
                b2 = new Node( b.i, b.x, b.y ),
                an = a.next,
                bp = b.prev;
    
            a.next = b;
            b.prev = a;
    
            a2.next = an;
            an.prev = a2;
    
            b2.next = a2;
            a2.prev = b2;
    
            bp.next = b2;
            b2.prev = bp;
    
            return b2;
    
        }
    
        // create a node and optionally link it with previous one (in a circular doubly linked list)
    
        function insertNode( i, x, y, last ) {
    
            var p = new Node( i, x, y );
    
            if ( ! last ) {
    
                p.prev = p;
                p.next = p;
    
            } else {
    
                p.next = last.next;
                p.prev = last;
                last.next.prev = p;
                last.next = p;
    
            }
    
            return p;
    
        }
    
        function removeNode( p ) {
    
            p.next.prev = p.prev;
            p.prev.next = p.next;
    
            if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
            if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;
    
        }
    
        function Node( i, x, y ) {
    
            // vertice index in coordinates array
            this.i = i;
    
            // vertex coordinates
            this.x = x;
            this.y = y;
    
            // previous and next vertice nodes in a polygon ring
            this.prev = null;
            this.next = null;
    
            // z-order curve value
            this.z = null;
    
            // previous and next nodes in z-order
            this.prevZ = null;
            this.nextZ = null;
    
            // indicates whether this is a steiner point
            this.steiner = false;
    
        }
    
        function signedArea( data, start, end, dim ) {
    
            var sum = 0;
    
            for ( var i = start, j = end - dim; i < end; i += dim ) {
    
                sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
                j = i;
    
            }
    
            return sum;
    
        }
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         */
    
        var ShapeUtils = {
    
            // calculate area of the contour polygon
    
            area: function ( contour ) {
    
                var n = contour.length;
                var a = 0.0;
    
                for ( var p = n - 1, q = 0; q < n; p = q ++ ) {
    
                    a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
    
                }
    
                return a * 0.5;
    
            },
    
            isClockWise: function ( pts ) {
    
                return ShapeUtils.area( pts ) < 0;
    
            },
    
            triangulateShape: function ( contour, holes ) {
    
                var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
                var holeIndices = []; // array of hole indices
                var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
    
                removeDupEndPts( contour );
                addContour( vertices, contour );
    
                //
    
                var holeIndex = contour.length;
    
                holes.forEach( removeDupEndPts );
    
                for ( var i = 0; i < holes.length; i ++ ) {
    
                    holeIndices.push( holeIndex );
                    holeIndex += holes[ i ].length;
                    addContour( vertices, holes[ i ] );
    
                }
    
                //
    
                var triangles = Earcut.triangulate( vertices, holeIndices );
    
                //
    
                for ( var i = 0; i < triangles.length; i += 3 ) {
    
                    faces.push( triangles.slice( i, i + 3 ) );
    
                }
    
                return faces;
    
            }
    
        };
    
        function removeDupEndPts( points ) {
    
            var l = points.length;
    
            if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {
    
                points.pop();
    
            }
    
        }
    
        function addContour( vertices, contour ) {
    
            for ( var i = 0; i < contour.length; i ++ ) {
    
                vertices.push( contour[ i ].x );
                vertices.push( contour[ i ].y );
    
            }
    
        }
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         *
         * Creates extruded geometry from a path shape.
         *
         * parameters = {
         *
         *  curveSegments: <int>, // number of points on the curves
         *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
         *  depth: <float>, // Depth to extrude the shape
         *
         *  bevelEnabled: <bool>, // turn on bevel
         *  bevelThickness: <float>, // how deep into the original shape bevel goes
         *  bevelSize: <float>, // how far from shape outline is bevel
         *  bevelSegments: <int>, // number of bevel layers
         *
         *  extrudePath: <THREE.Curve> // curve to extrude shape along
         *
         *  UVGenerator: <Object> // object that provides UV generator functions
         *
         * }
         */
    
        // ExtrudeGeometry
    
        function ExtrudeGeometry( shapes, options ) {
    
            Geometry.call( this );
    
            this.type = 'ExtrudeGeometry';
    
            this.parameters = {
                shapes: shapes,
                options: options
            };
    
            this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
            this.mergeVertices();
    
        }
    
        ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
        ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;
    
        ExtrudeGeometry.prototype.toJSON = function () {
    
            var data = Geometry.prototype.toJSON.call( this );
    
            var shapes = this.parameters.shapes;
            var options = this.parameters.options;
    
            return toJSON( shapes, options, data );
    
        };
    
        // ExtrudeBufferGeometry
    
        function ExtrudeBufferGeometry( shapes, options ) {
    
            BufferGeometry.call( this );
    
            this.type = 'ExtrudeBufferGeometry';
    
            this.parameters = {
                shapes: shapes,
                options: options
            };
    
            shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
    
            var scope = this;
    
            var verticesArray = [];
            var uvArray = [];
    
            for ( var i = 0, l = shapes.length; i < l; i ++ ) {
    
                var shape = shapes[ i ];
                addShape( shape );
    
            }
    
            // build geometry
    
            this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );
    
            this.computeVertexNormals();
    
            // functions
    
            function addShape( shape ) {
    
                var placeholder = [];
    
                // options
    
                var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
                var steps = options.steps !== undefined ? options.steps : 1;
                var depth = options.depth !== undefined ? options.depth : 100;
    
                var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
                var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
                var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
                var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
    
                var extrudePath = options.extrudePath;
    
                var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
    
                // deprecated options
    
                if ( options.amount !== undefined ) {
    
                    console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
                    depth = options.amount;
    
                }
    
                //
    
                var extrudePts, extrudeByPath = false;
                var splineTube, binormal, normal, position2;
    
                if ( extrudePath ) {
    
                    extrudePts = extrudePath.getSpacedPoints( steps );
    
                    extrudeByPath = true;
                    bevelEnabled = false; // bevels not supported for path extrusion
    
                    // SETUP TNB variables
    
                    // TODO1 - have a .isClosed in spline?
    
                    splineTube = extrudePath.computeFrenetFrames( steps, false );
    
                    // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
    
                    binormal = new Vector3();
                    normal = new Vector3();
                    position2 = new Vector3();
    
                }
    
                // Safeguards if bevels are not enabled
    
                if ( ! bevelEnabled ) {
    
                    bevelSegments = 0;
                    bevelThickness = 0;
                    bevelSize = 0;
    
                }
    
                // Variables initialization
    
                var ahole, h, hl; // looping of holes
    
                var shapePoints = shape.extractPoints( curveSegments );
    
                var vertices = shapePoints.shape;
                var holes = shapePoints.holes;
    
                var reverse = ! ShapeUtils.isClockWise( vertices );
    
                if ( reverse ) {
    
                    vertices = vertices.reverse();
    
                    // Maybe we should also check if holes are in the opposite direction, just to be safe ...
    
                    for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                        ahole = holes[ h ];
    
                        if ( ShapeUtils.isClockWise( ahole ) ) {
    
                            holes[ h ] = ahole.reverse();
    
                        }
    
                    }
    
                }
    
    
                var faces = ShapeUtils.triangulateShape( vertices, holes );
    
                /* Vertices */
    
                var contour = vertices; // vertices has all points but contour has only points of circumference
    
                for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                    ahole = holes[ h ];
    
                    vertices = vertices.concat( ahole );
    
                }
    
    
                function scalePt2( pt, vec, size ) {
    
                    if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );
    
                    return vec.clone().multiplyScalar( size ).add( pt );
    
                }
    
                var b, bs, t, z,
                    vert, vlen = vertices.length,
                    face, flen = faces.length;
    
    
                // Find directions for point movement
    
    
                function getBevelVec( inPt, inPrev, inNext ) {
    
                    // computes for inPt the corresponding point inPt' on a new contour
                    //   shifted by 1 unit (length of normalized vector) to the left
                    // if we walk along contour clockwise, this new contour is outside the old one
                    //
                    // inPt' is the intersection of the two lines parallel to the two
                    //  adjacent edges of inPt at a distance of 1 unit on the left side.
    
                    var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
    
                    // good reading for geometry algorithms (here: line-line intersection)
                    // http://geomalgorithms.com/a05-_intersect-1.html
    
                    var v_prev_x = inPt.x - inPrev.x,
                        v_prev_y = inPt.y - inPrev.y;
                    var v_next_x = inNext.x - inPt.x,
                        v_next_y = inNext.y - inPt.y;
    
                    var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
    
                    // check for collinear edges
                    var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
    
                    if ( Math.abs( collinear0 ) > Number.EPSILON ) {
    
                        // not collinear
    
                        // length of vectors for normalizing
    
                        var v_prev_len = Math.sqrt( v_prev_lensq );
                        var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
    
                        // shift adjacent points by unit vectors to the left
    
                        var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
                        var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
    
                        var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
                        var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
    
                        // scaling factor for v_prev to intersection point
    
                        var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
                                ( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
                            ( v_prev_x * v_next_y - v_prev_y * v_next_x );
    
                        // vector from inPt to intersection point
    
                        v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
                        v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
    
                        // Don't normalize!, otherwise sharp corners become ugly
                        //  but prevent crazy spikes
                        var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
                        if ( v_trans_lensq <= 2 ) {
    
                            return new Vector2( v_trans_x, v_trans_y );
    
                        } else {
    
                            shrink_by = Math.sqrt( v_trans_lensq / 2 );
    
                        }
    
                    } else {
    
                        // handle special case of collinear edges
    
                        var direction_eq = false; // assumes: opposite
                        if ( v_prev_x > Number.EPSILON ) {
    
                            if ( v_next_x > Number.EPSILON ) {
    
                                direction_eq = true;
    
                            }
    
                        } else {
    
                            if ( v_prev_x < - Number.EPSILON ) {
    
                                if ( v_next_x < - Number.EPSILON ) {
    
                                    direction_eq = true;
    
                                }
    
                            } else {
    
                                if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
    
                                    direction_eq = true;
    
                                }
    
                            }
    
                        }
    
                        if ( direction_eq ) {
    
                            // console.log("Warning: lines are a straight sequence");
                            v_trans_x = - v_prev_y;
                            v_trans_y = v_prev_x;
                            shrink_by = Math.sqrt( v_prev_lensq );
    
                        } else {
    
                            // console.log("Warning: lines are a straight spike");
                            v_trans_x = v_prev_x;
                            v_trans_y = v_prev_y;
                            shrink_by = Math.sqrt( v_prev_lensq / 2 );
    
                        }
    
                    }
    
                    return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
    
                }
    
    
                var contourMovements = [];
    
                for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
    
                    if ( j === il ) j = 0;
                    if ( k === il ) k = 0;
    
                    //  (j)---(i)---(k)
                    // console.log('i,j,k', i, j , k)
    
                    contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
    
                }
    
                var holesMovements = [],
                    oneHoleMovements, verticesMovements = contourMovements.concat();
    
                for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                    ahole = holes[ h ];
    
                    oneHoleMovements = [];
    
                    for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
    
                        if ( j === il ) j = 0;
                        if ( k === il ) k = 0;
    
                        //  (j)---(i)---(k)
                        oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
    
                    }
    
                    holesMovements.push( oneHoleMovements );
                    verticesMovements = verticesMovements.concat( oneHoleMovements );
    
                }
    
    
                // Loop bevelSegments, 1 for the front, 1 for the back
    
                for ( b = 0; b < bevelSegments; b ++ ) {
    
                    //for ( b = bevelSegments; b > 0; b -- ) {
    
                    t = b / bevelSegments;
                    z = bevelThickness * Math.cos( t * Math.PI / 2 );
                    bs = bevelSize * Math.sin( t * Math.PI / 2 );
    
                    // contract shape
    
                    for ( i = 0, il = contour.length; i < il; i ++ ) {
    
                        vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
    
                        v( vert.x, vert.y, - z );
    
                    }
    
                    // expand holes
    
                    for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                        ahole = holes[ h ];
                        oneHoleMovements = holesMovements[ h ];
    
                        for ( i = 0, il = ahole.length; i < il; i ++ ) {
    
                            vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
    
                            v( vert.x, vert.y, - z );
    
                        }
    
                    }
    
                }
    
                bs = bevelSize;
    
                // Back facing vertices
    
                for ( i = 0; i < vlen; i ++ ) {
    
                    vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
    
                    if ( ! extrudeByPath ) {
    
                        v( vert.x, vert.y, 0 );
    
                    } else {
    
                        // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
    
                        normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
                        binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
    
                        position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
    
                        v( position2.x, position2.y, position2.z );
    
                    }
    
                }
    
                // Add stepped vertices...
                // Including front facing vertices
    
                var s;
    
                for ( s = 1; s <= steps; s ++ ) {
    
                    for ( i = 0; i < vlen; i ++ ) {
    
                        vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
    
                        if ( ! extrudeByPath ) {
    
                            v( vert.x, vert.y, depth / steps * s );
    
                        } else {
    
                            // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
    
                            normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
                            binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
    
                            position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
    
                            v( position2.x, position2.y, position2.z );
    
                        }
    
                    }
    
                }
    
    
                // Add bevel segments planes
    
                //for ( b = 1; b <= bevelSegments; b ++ ) {
                for ( b = bevelSegments - 1; b >= 0; b -- ) {
    
                    t = b / bevelSegments;
                    z = bevelThickness * Math.cos( t * Math.PI / 2 );
                    bs = bevelSize * Math.sin( t * Math.PI / 2 );
    
                    // contract shape
    
                    for ( i = 0, il = contour.length; i < il; i ++ ) {
    
                        vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
                        v( vert.x, vert.y, depth + z );
    
                    }
    
                    // expand holes
    
                    for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                        ahole = holes[ h ];
                        oneHoleMovements = holesMovements[ h ];
    
                        for ( i = 0, il = ahole.length; i < il; i ++ ) {
    
                            vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
    
                            if ( ! extrudeByPath ) {
    
                                v( vert.x, vert.y, depth + z );
    
                            } else {
    
                                v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
    
                            }
    
                        }
    
                    }
    
                }
    
                /* Faces */
    
                // Top and bottom faces
    
                buildLidFaces();
    
                // Sides faces
    
                buildSideFaces();
    
    
                /////  Internal functions
    
                function buildLidFaces() {
    
                    var start = verticesArray.length / 3;
    
                    if ( bevelEnabled ) {
    
                        var layer = 0; // steps + 1
                        var offset = vlen * layer;
    
                        // Bottom faces
    
                        for ( i = 0; i < flen; i ++ ) {
    
                            face = faces[ i ];
                            f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
    
                        }
    
                        layer = steps + bevelSegments * 2;
                        offset = vlen * layer;
    
                        // Top faces
    
                        for ( i = 0; i < flen; i ++ ) {
    
                            face = faces[ i ];
                            f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
    
                        }
    
                    } else {
    
                        // Bottom faces
    
                        for ( i = 0; i < flen; i ++ ) {
    
                            face = faces[ i ];
                            f3( face[ 2 ], face[ 1 ], face[ 0 ] );
    
                        }
    
                        // Top faces
    
                        for ( i = 0; i < flen; i ++ ) {
    
                            face = faces[ i ];
                            f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
    
                        }
    
                    }
    
                    scope.addGroup( start, verticesArray.length / 3 - start, 0 );
    
                }
    
                // Create faces for the z-sides of the shape
    
                function buildSideFaces() {
    
                    var start = verticesArray.length / 3;
                    var layeroffset = 0;
                    sidewalls( contour, layeroffset );
                    layeroffset += contour.length;
    
                    for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                        ahole = holes[ h ];
                        sidewalls( ahole, layeroffset );
    
                        //, true
                        layeroffset += ahole.length;
    
                    }
    
    
                    scope.addGroup( start, verticesArray.length / 3 - start, 1 );
    
    
                }
    
                function sidewalls( contour, layeroffset ) {
    
                    var j, k;
                    i = contour.length;
    
                    while ( -- i >= 0 ) {
    
                        j = i;
                        k = i - 1;
                        if ( k < 0 ) k = contour.length - 1;
    
                        //console.log('b', i,j, i-1, k,vertices.length);
    
                        var s = 0,
                            sl = steps + bevelSegments * 2;
    
                        for ( s = 0; s < sl; s ++ ) {
    
                            var slen1 = vlen * s;
                            var slen2 = vlen * ( s + 1 );
    
                            var a = layeroffset + j + slen1,
                                b = layeroffset + k + slen1,
                                c = layeroffset + k + slen2,
                                d = layeroffset + j + slen2;
    
                            f4( a, b, c, d );
    
                        }
    
                    }
    
                }
    
                function v( x, y, z ) {
    
                    placeholder.push( x );
                    placeholder.push( y );
                    placeholder.push( z );
    
                }
    
    
                function f3( a, b, c ) {
    
                    addVertex( a );
                    addVertex( b );
                    addVertex( c );
    
                    var nextIndex = verticesArray.length / 3;
                    var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
    
                    addUV( uvs[ 0 ] );
                    addUV( uvs[ 1 ] );
                    addUV( uvs[ 2 ] );
    
                }
    
                function f4( a, b, c, d ) {
    
                    addVertex( a );
                    addVertex( b );
                    addVertex( d );
    
                    addVertex( b );
                    addVertex( c );
                    addVertex( d );
    
    
                    var nextIndex = verticesArray.length / 3;
                    var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
    
                    addUV( uvs[ 0 ] );
                    addUV( uvs[ 1 ] );
                    addUV( uvs[ 3 ] );
    
                    addUV( uvs[ 1 ] );
                    addUV( uvs[ 2 ] );
                    addUV( uvs[ 3 ] );
    
                }
    
                function addVertex( index ) {
    
                    verticesArray.push( placeholder[ index * 3 + 0 ] );
                    verticesArray.push( placeholder[ index * 3 + 1 ] );
                    verticesArray.push( placeholder[ index * 3 + 2 ] );
    
                }
    
    
                function addUV( vector2 ) {
    
                    uvArray.push( vector2.x );
                    uvArray.push( vector2.y );
    
                }
    
            }
    
        }
    
        ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;
    
        ExtrudeBufferGeometry.prototype.toJSON = function () {
    
            var data = BufferGeometry.prototype.toJSON.call( this );
    
            var shapes = this.parameters.shapes;
            var options = this.parameters.options;
    
            return toJSON( shapes, options, data );
    
        };
    
        //
    
        var WorldUVGenerator = {
    
            generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {
    
                var a_x = vertices[ indexA * 3 ];
                var a_y = vertices[ indexA * 3 + 1 ];
                var b_x = vertices[ indexB * 3 ];
                var b_y = vertices[ indexB * 3 + 1 ];
                var c_x = vertices[ indexC * 3 ];
                var c_y = vertices[ indexC * 3 + 1 ];
    
                return [
                    new Vector2( a_x, a_y ),
                    new Vector2( b_x, b_y ),
                    new Vector2( c_x, c_y )
                ];
    
            },
    
            generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {
    
                var a_x = vertices[ indexA * 3 ];
                var a_y = vertices[ indexA * 3 + 1 ];
                var a_z = vertices[ indexA * 3 + 2 ];
                var b_x = vertices[ indexB * 3 ];
                var b_y = vertices[ indexB * 3 + 1 ];
                var b_z = vertices[ indexB * 3 + 2 ];
                var c_x = vertices[ indexC * 3 ];
                var c_y = vertices[ indexC * 3 + 1 ];
                var c_z = vertices[ indexC * 3 + 2 ];
                var d_x = vertices[ indexD * 3 ];
                var d_y = vertices[ indexD * 3 + 1 ];
                var d_z = vertices[ indexD * 3 + 2 ];
    
                if ( Math.abs( a_y - b_y ) < 0.01 ) {
    
                    return [
                        new Vector2( a_x, 1 - a_z ),
                        new Vector2( b_x, 1 - b_z ),
                        new Vector2( c_x, 1 - c_z ),
                        new Vector2( d_x, 1 - d_z )
                    ];
    
                } else {
    
                    return [
                        new Vector2( a_y, 1 - a_z ),
                        new Vector2( b_y, 1 - b_z ),
                        new Vector2( c_y, 1 - c_z ),
                        new Vector2( d_y, 1 - d_z )
                    ];
    
                }
    
            }
        };
    
        function toJSON( shapes, options, data ) {
    
            //
    
            data.shapes = [];
    
            if ( Array.isArray( shapes ) ) {
    
                for ( var i = 0, l = shapes.length; i < l; i ++ ) {
    
                    var shape = shapes[ i ];
    
                    data.shapes.push( shape.uuid );
    
                }
    
            } else {
    
                data.shapes.push( shapes.uuid );
    
            }
    
            //
    
            if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();
    
            return data;
    
        }
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * @author alteredq / http://alteredqualia.com/
         *
         * Text = 3D Text
         *
         * parameters = {
         *  font: <THREE.Font>, // font
         *
         *  size: <float>, // size of the text
         *  height: <float>, // thickness to extrude text
         *  curveSegments: <int>, // number of points on the curves
         *
         *  bevelEnabled: <bool>, // turn on bevel
         *  bevelThickness: <float>, // how deep into text bevel goes
         *  bevelSize: <float> // how far from text outline is bevel
         * }
         */
    
        // TextGeometry
    
        function TextGeometry( text, parameters ) {
    
            Geometry.call( this );
    
            this.type = 'TextGeometry';
    
            this.parameters = {
                text: text,
                parameters: parameters
            };
    
            this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
            this.mergeVertices();
    
        }
    
        TextGeometry.prototype = Object.create( Geometry.prototype );
        TextGeometry.prototype.constructor = TextGeometry;
    
        // TextBufferGeometry
    
        function TextBufferGeometry( text, parameters ) {
    
            parameters = parameters || {};
    
            var font = parameters.font;
    
            if ( ! ( font && font.isFont ) ) {
    
                console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
                return new Geometry();
    
            }
    
            var shapes = font.generateShapes( text, parameters.size );
    
            // translate parameters to ExtrudeGeometry API
    
            parameters.depth = parameters.height !== undefined ? parameters.height : 50;
    
            // defaults
    
            if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
            if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
            if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;
    
            ExtrudeBufferGeometry.call( this, shapes, parameters );
    
            this.type = 'TextBufferGeometry';
    
        }
    
        TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
        TextBufferGeometry.prototype.constructor = TextBufferGeometry;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author benaadams / https://twitter.com/ben_a_adams
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // SphereGeometry
    
        function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
    
            Geometry.call( this );
    
            this.type = 'SphereGeometry';
    
            this.parameters = {
                radius: radius,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                phiStart: phiStart,
                phiLength: phiLength,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
            this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
            this.mergeVertices();
    
        }
    
        SphereGeometry.prototype = Object.create( Geometry.prototype );
        SphereGeometry.prototype.constructor = SphereGeometry;
    
        // SphereBufferGeometry
    
        function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
    
            BufferGeometry.call( this );
    
            this.type = 'SphereBufferGeometry';
    
            this.parameters = {
                radius: radius,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                phiStart: phiStart,
                phiLength: phiLength,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
            radius = radius || 1;
    
            widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
            heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );
    
            phiStart = phiStart !== undefined ? phiStart : 0;
            phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
    
            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
    
            var thetaEnd = thetaStart + thetaLength;
    
            var ix, iy;
    
            var index = 0;
            var grid = [];
    
            var vertex = new Vector3();
            var normal = new Vector3();
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // generate vertices, normals and uvs
    
            for ( iy = 0; iy <= heightSegments; iy ++ ) {
    
                var verticesRow = [];
    
                var v = iy / heightSegments;
    
                // special case for the poles
    
                var uOffset = ( iy == 0 ) ? 0.5 / widthSegments : ( ( iy == heightSegments ) ? - 0.5 / widthSegments : 0 );
    
                for ( ix = 0; ix <= widthSegments; ix ++ ) {
    
                    var u = ix / widthSegments;
    
                    // vertex
    
                    vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
                    vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
                    vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
    
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                    // normal
    
                    normal.copy( vertex ).normalize();
                    normals.push( normal.x, normal.y, normal.z );
    
                    // uv
    
                    uvs.push( u + uOffset, 1 - v );
    
                    verticesRow.push( index ++ );
    
                }
    
                grid.push( verticesRow );
    
            }
    
            // indices
    
            for ( iy = 0; iy < heightSegments; iy ++ ) {
    
                for ( ix = 0; ix < widthSegments; ix ++ ) {
    
                    var a = grid[ iy ][ ix + 1 ];
                    var b = grid[ iy ][ ix ];
                    var c = grid[ iy + 1 ][ ix ];
                    var d = grid[ iy + 1 ][ ix + 1 ];
    
                    if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
                    if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );
    
                }
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
        }
    
        SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;
    
        /**
         * @author Kaleb Murphy
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // RingGeometry
    
        function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
    
            Geometry.call( this );
    
            this.type = 'RingGeometry';
    
            this.parameters = {
                innerRadius: innerRadius,
                outerRadius: outerRadius,
                thetaSegments: thetaSegments,
                phiSegments: phiSegments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
            this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
            this.mergeVertices();
    
        }
    
        RingGeometry.prototype = Object.create( Geometry.prototype );
        RingGeometry.prototype.constructor = RingGeometry;
    
        // RingBufferGeometry
    
        function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
    
            BufferGeometry.call( this );
    
            this.type = 'RingBufferGeometry';
    
            this.parameters = {
                innerRadius: innerRadius,
                outerRadius: outerRadius,
                thetaSegments: thetaSegments,
                phiSegments: phiSegments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
            innerRadius = innerRadius || 0.5;
            outerRadius = outerRadius || 1;
    
            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
    
            thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
            phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // some helper variables
    
            var segment;
            var radius = innerRadius;
            var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
            var vertex = new Vector3();
            var uv = new Vector2();
            var j, i;
    
            // generate vertices, normals and uvs
    
            for ( j = 0; j <= phiSegments; j ++ ) {
    
                for ( i = 0; i <= thetaSegments; i ++ ) {
    
                    // values are generate from the inside of the ring to the outside
    
                    segment = thetaStart + i / thetaSegments * thetaLength;
    
                    // vertex
    
                    vertex.x = radius * Math.cos( segment );
                    vertex.y = radius * Math.sin( segment );
    
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                    // normal
    
                    normals.push( 0, 0, 1 );
    
                    // uv
    
                    uv.x = ( vertex.x / outerRadius + 1 ) / 2;
                    uv.y = ( vertex.y / outerRadius + 1 ) / 2;
    
                    uvs.push( uv.x, uv.y );
    
                }
    
                // increase the radius for next row of vertices
    
                radius += radiusStep;
    
            }
    
            // indices
    
            for ( j = 0; j < phiSegments; j ++ ) {
    
                var thetaSegmentLevel = j * ( thetaSegments + 1 );
    
                for ( i = 0; i < thetaSegments; i ++ ) {
    
                    segment = i + thetaSegmentLevel;
    
                    var a = segment;
                    var b = segment + thetaSegments + 1;
                    var c = segment + thetaSegments + 2;
                    var d = segment + 1;
    
                    // faces
    
                    indices.push( a, b, d );
                    indices.push( b, c, d );
    
                }
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
        }
    
        RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        RingBufferGeometry.prototype.constructor = RingBufferGeometry;
    
        /**
         * @author zz85 / https://github.com/zz85
         * @author bhouston / http://clara.io
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // LatheGeometry
    
        function LatheGeometry( points, segments, phiStart, phiLength ) {
    
            Geometry.call( this );
    
            this.type = 'LatheGeometry';
    
            this.parameters = {
                points: points,
                segments: segments,
                phiStart: phiStart,
                phiLength: phiLength
            };
    
            this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
            this.mergeVertices();
    
        }
    
        LatheGeometry.prototype = Object.create( Geometry.prototype );
        LatheGeometry.prototype.constructor = LatheGeometry;
    
        // LatheBufferGeometry
    
        function LatheBufferGeometry( points, segments, phiStart, phiLength ) {
    
            BufferGeometry.call( this );
    
            this.type = 'LatheBufferGeometry';
    
            this.parameters = {
                points: points,
                segments: segments,
                phiStart: phiStart,
                phiLength: phiLength
            };
    
            segments = Math.floor( segments ) || 12;
            phiStart = phiStart || 0;
            phiLength = phiLength || Math.PI * 2;
    
            // clamp phiLength so it's in range of [ 0, 2PI ]
    
            phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );
    
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var uvs = [];
    
            // helper variables
    
            var base;
            var inverseSegments = 1.0 / segments;
            var vertex = new Vector3();
            var uv = new Vector2();
            var i, j;
    
            // generate vertices and uvs
    
            for ( i = 0; i <= segments; i ++ ) {
    
                var phi = phiStart + i * inverseSegments * phiLength;
    
                var sin = Math.sin( phi );
                var cos = Math.cos( phi );
    
                for ( j = 0; j <= ( points.length - 1 ); j ++ ) {
    
                    // vertex
    
                    vertex.x = points[ j ].x * sin;
                    vertex.y = points[ j ].y;
                    vertex.z = points[ j ].x * cos;
    
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                    // uv
    
                    uv.x = i / segments;
                    uv.y = j / ( points.length - 1 );
    
                    uvs.push( uv.x, uv.y );
    
    
                }
    
            }
    
            // indices
    
            for ( i = 0; i < segments; i ++ ) {
    
                for ( j = 0; j < ( points.length - 1 ); j ++ ) {
    
                    base = j + i * points.length;
    
                    var a = base;
                    var b = base + points.length;
                    var c = base + points.length + 1;
                    var d = base + 1;
    
                    // faces
    
                    indices.push( a, b, d );
                    indices.push( b, c, d );
    
                }
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
            // generate normals
    
            this.computeVertexNormals();
    
            // if the geometry is closed, we need to average the normals along the seam.
            // because the corresponding vertices are identical (but still have different UVs).
    
            if ( phiLength === Math.PI * 2 ) {
    
                var normals = this.attributes.normal.array;
                var n1 = new Vector3();
                var n2 = new Vector3();
                var n = new Vector3();
    
                // this is the buffer offset for the last line of vertices
    
                base = segments * points.length * 3;
    
                for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {
    
                    // select the normal of the vertex in the first line
    
                    n1.x = normals[ j + 0 ];
                    n1.y = normals[ j + 1 ];
                    n1.z = normals[ j + 2 ];
    
                    // select the normal of the vertex in the last line
    
                    n2.x = normals[ base + j + 0 ];
                    n2.y = normals[ base + j + 1 ];
                    n2.z = normals[ base + j + 2 ];
    
                    // average normals
    
                    n.addVectors( n1, n2 ).normalize();
    
                    // assign the new values to both normals
    
                    normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
                    normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
                    normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;
    
                }
    
            }
    
        }
    
        LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;
    
        /**
         * @author jonobr1 / http://jonobr1.com
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // ShapeGeometry
    
        function ShapeGeometry( shapes, curveSegments ) {
    
            Geometry.call( this );
    
            this.type = 'ShapeGeometry';
    
            if ( typeof curveSegments === 'object' ) {
    
                console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );
    
                curveSegments = curveSegments.curveSegments;
    
            }
    
            this.parameters = {
                shapes: shapes,
                curveSegments: curveSegments
            };
    
            this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
            this.mergeVertices();
    
        }
    
        ShapeGeometry.prototype = Object.create( Geometry.prototype );
        ShapeGeometry.prototype.constructor = ShapeGeometry;
    
        ShapeGeometry.prototype.toJSON = function () {
    
            var data = Geometry.prototype.toJSON.call( this );
    
            var shapes = this.parameters.shapes;
    
            return toJSON$1( shapes, data );
    
        };
    
        // ShapeBufferGeometry
    
        function ShapeBufferGeometry( shapes, curveSegments ) {
    
            BufferGeometry.call( this );
    
            this.type = 'ShapeBufferGeometry';
    
            this.parameters = {
                shapes: shapes,
                curveSegments: curveSegments
            };
    
            curveSegments = curveSegments || 12;
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // helper variables
    
            var groupStart = 0;
            var groupCount = 0;
    
            // allow single and array values for "shapes" parameter
    
            if ( Array.isArray( shapes ) === false ) {
    
                addShape( shapes );
    
            } else {
    
                for ( var i = 0; i < shapes.length; i ++ ) {
    
                    addShape( shapes[ i ] );
    
                    this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support
    
                    groupStart += groupCount;
                    groupCount = 0;
    
                }
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
    
            // helper functions
    
            function addShape( shape ) {
    
                var i, l, shapeHole;
    
                var indexOffset = vertices.length / 3;
                var points = shape.extractPoints( curveSegments );
    
                var shapeVertices = points.shape;
                var shapeHoles = points.holes;
    
                // check direction of vertices
    
                if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {
    
                    shapeVertices = shapeVertices.reverse();
    
                }
    
                for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
    
                    shapeHole = shapeHoles[ i ];
    
                    if ( ShapeUtils.isClockWise( shapeHole ) === true ) {
    
                        shapeHoles[ i ] = shapeHole.reverse();
    
                    }
    
                }
    
                var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );
    
                // join vertices of inner and outer paths to a single array
    
                for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
    
                    shapeHole = shapeHoles[ i ];
                    shapeVertices = shapeVertices.concat( shapeHole );
    
                }
    
                // vertices, normals, uvs
    
                for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {
    
                    var vertex = shapeVertices[ i ];
    
                    vertices.push( vertex.x, vertex.y, 0 );
                    normals.push( 0, 0, 1 );
                    uvs.push( vertex.x, vertex.y ); // world uvs
    
                }
    
                // incides
    
                for ( i = 0, l = faces.length; i < l; i ++ ) {
    
                    var face = faces[ i ];
    
                    var a = face[ 0 ] + indexOffset;
                    var b = face[ 1 ] + indexOffset;
                    var c = face[ 2 ] + indexOffset;
    
                    indices.push( a, b, c );
                    groupCount += 3;
    
                }
    
            }
    
        }
    
        ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;
    
        ShapeBufferGeometry.prototype.toJSON = function () {
    
            var data = BufferGeometry.prototype.toJSON.call( this );
    
            var shapes = this.parameters.shapes;
    
            return toJSON$1( shapes, data );
    
        };
    
        //
    
        function toJSON$1( shapes, data ) {
    
            data.shapes = [];
    
            if ( Array.isArray( shapes ) ) {
    
                for ( var i = 0, l = shapes.length; i < l; i ++ ) {
    
                    var shape = shapes[ i ];
    
                    data.shapes.push( shape.uuid );
    
                }
    
            } else {
    
                data.shapes.push( shapes.uuid );
    
            }
    
            return data;
    
        }
    
        /**
         * @author WestLangley / http://github.com/WestLangley
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        function EdgesGeometry( geometry, thresholdAngle ) {
    
            BufferGeometry.call( this );
    
            this.type = 'EdgesGeometry';
    
            this.parameters = {
                thresholdAngle: thresholdAngle
            };
    
            thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;
    
            // buffer
    
            var vertices = [];
    
            // helper variables
    
            var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
            var edge = [ 0, 0 ], edges = {}, edge1, edge2;
            var key, keys = [ 'a', 'b', 'c' ];
    
            // prepare source geometry
    
            var geometry2;
    
            if ( geometry.isBufferGeometry ) {
    
                geometry2 = new Geometry();
                geometry2.fromBufferGeometry( geometry );
    
            } else {
    
                geometry2 = geometry.clone();
    
            }
    
            geometry2.mergeVertices();
            geometry2.computeFaceNormals();
    
            var sourceVertices = geometry2.vertices;
            var faces = geometry2.faces;
    
            // now create a data structure where each entry represents an edge with its adjoining faces
    
            for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
                var face = faces[ i ];
    
                for ( var j = 0; j < 3; j ++ ) {
    
                    edge1 = face[ keys[ j ] ];
                    edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
                    edge[ 0 ] = Math.min( edge1, edge2 );
                    edge[ 1 ] = Math.max( edge1, edge2 );
    
                    key = edge[ 0 ] + ',' + edge[ 1 ];
    
                    if ( edges[ key ] === undefined ) {
    
                        edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };
    
                    } else {
    
                        edges[ key ].face2 = i;
    
                    }
    
                }
    
            }
    
            // generate vertices
    
            for ( key in edges ) {
    
                var e = edges[ key ];
    
                // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.
    
                if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {
    
                    var vertex = sourceVertices[ e.index1 ];
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                    vertex = sourceVertices[ e.index2 ];
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                }
    
            }
    
            // build geometry
    
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
    
        }
    
        EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
        EdgesGeometry.prototype.constructor = EdgesGeometry;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        // CylinderGeometry
    
        function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
    
            Geometry.call( this );
    
            this.type = 'CylinderGeometry';
    
            this.parameters = {
                radiusTop: radiusTop,
                radiusBottom: radiusBottom,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
            this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
            this.mergeVertices();
    
        }
    
        CylinderGeometry.prototype = Object.create( Geometry.prototype );
        CylinderGeometry.prototype.constructor = CylinderGeometry;
    
        // CylinderBufferGeometry
    
        function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
    
            BufferGeometry.call( this );
    
            this.type = 'CylinderBufferGeometry';
    
            this.parameters = {
                radiusTop: radiusTop,
                radiusBottom: radiusBottom,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
            var scope = this;
    
            radiusTop = radiusTop !== undefined ? radiusTop : 1;
            radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
            height = height || 1;
    
            radialSegments = Math.floor( radialSegments ) || 8;
            heightSegments = Math.floor( heightSegments ) || 1;
    
            openEnded = openEnded !== undefined ? openEnded : false;
            thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // helper variables
    
            var index = 0;
            var indexArray = [];
            var halfHeight = height / 2;
            var groupStart = 0;
    
            // generate geometry
    
            generateTorso();
    
            if ( openEnded === false ) {
    
                if ( radiusTop > 0 ) generateCap( true );
                if ( radiusBottom > 0 ) generateCap( false );
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
            function generateTorso() {
    
                var x, y;
                var normal = new Vector3();
                var vertex = new Vector3();
    
                var groupCount = 0;
    
                // this will be used to calculate the normal
                var slope = ( radiusBottom - radiusTop ) / height;
    
                // generate vertices, normals and uvs
    
                for ( y = 0; y <= heightSegments; y ++ ) {
    
                    var indexRow = [];
    
                    var v = y / heightSegments;
    
                    // calculate the radius of the current row
    
                    var radius = v * ( radiusBottom - radiusTop ) + radiusTop;
    
                    for ( x = 0; x <= radialSegments; x ++ ) {
    
                        var u = x / radialSegments;
    
                        var theta = u * thetaLength + thetaStart;
    
                        var sinTheta = Math.sin( theta );
                        var cosTheta = Math.cos( theta );
    
                        // vertex
    
                        vertex.x = radius * sinTheta;
                        vertex.y = - v * height + halfHeight;
                        vertex.z = radius * cosTheta;
                        vertices.push( vertex.x, vertex.y, vertex.z );
    
                        // normal
    
                        normal.set( sinTheta, slope, cosTheta ).normalize();
                        normals.push( normal.x, normal.y, normal.z );
    
                        // uv
    
                        uvs.push( u, 1 - v );
    
                        // save index of vertex in respective row
    
                        indexRow.push( index ++ );
    
                    }
    
                    // now save vertices of the row in our index array
    
                    indexArray.push( indexRow );
    
                }
    
                // generate indices
    
                for ( x = 0; x < radialSegments; x ++ ) {
    
                    for ( y = 0; y < heightSegments; y ++ ) {
    
                        // we use the index array to access the correct indices
    
                        var a = indexArray[ y ][ x ];
                        var b = indexArray[ y + 1 ][ x ];
                        var c = indexArray[ y + 1 ][ x + 1 ];
                        var d = indexArray[ y ][ x + 1 ];
    
                        // faces
    
                        indices.push( a, b, d );
                        indices.push( b, c, d );
    
                        // update group counter
    
                        groupCount += 6;
    
                    }
    
                }
    
                // add a group to the geometry. this will ensure multi material support
    
                scope.addGroup( groupStart, groupCount, 0 );
    
                // calculate new start value for groups
    
                groupStart += groupCount;
    
            }
    
            function generateCap( top ) {
    
                var x, centerIndexStart, centerIndexEnd;
    
                var uv = new Vector2();
                var vertex = new Vector3();
    
                var groupCount = 0;
    
                var radius = ( top === true ) ? radiusTop : radiusBottom;
                var sign = ( top === true ) ? 1 : - 1;
    
                // save the index of the first center vertex
                centerIndexStart = index;
    
                // first we generate the center vertex data of the cap.
                // because the geometry needs one set of uvs per face,
                // we must generate a center vertex per face/segment
    
                for ( x = 1; x <= radialSegments; x ++ ) {
    
                    // vertex
    
                    vertices.push( 0, halfHeight * sign, 0 );
    
                    // normal
    
                    normals.push( 0, sign, 0 );
    
                    // uv
    
                    uvs.push( 0.5, 0.5 );
    
                    // increase index
    
                    index ++;
    
                }
    
                // save the index of the last center vertex
    
                centerIndexEnd = index;
    
                // now we generate the surrounding vertices, normals and uvs
    
                for ( x = 0; x <= radialSegments; x ++ ) {
    
                    var u = x / radialSegments;
                    var theta = u * thetaLength + thetaStart;
    
                    var cosTheta = Math.cos( theta );
                    var sinTheta = Math.sin( theta );
    
                    // vertex
    
                    vertex.x = radius * sinTheta;
                    vertex.y = halfHeight * sign;
                    vertex.z = radius * cosTheta;
                    vertices.push( vertex.x, vertex.y, vertex.z );
    
                    // normal
    
                    normals.push( 0, sign, 0 );
    
                    // uv
    
                    uv.x = ( cosTheta * 0.5 ) + 0.5;
                    uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
                    uvs.push( uv.x, uv.y );
    
                    // increase index
    
                    index ++;
    
                }
    
                // generate indices
    
                for ( x = 0; x < radialSegments; x ++ ) {
    
                    var c = centerIndexStart + x;
                    var i = centerIndexEnd + x;
    
                    if ( top === true ) {
    
                        // face top
    
                        indices.push( i, i + 1, c );
    
                    } else {
    
                        // face bottom
    
                        indices.push( i + 1, i, c );
    
                    }
    
                    groupCount += 3;
    
                }
    
                // add a group to the geometry. this will ensure multi material support
    
                scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );
    
                // calculate new start value for groups
    
                groupStart += groupCount;
    
            }
    
        }
    
        CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;
    
        /**
         * @author abelnation / http://github.com/abelnation
         */
    
        // ConeGeometry
    
        function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
    
            CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
    
            this.type = 'ConeGeometry';
    
            this.parameters = {
                radius: radius,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
        }
    
        ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
        ConeGeometry.prototype.constructor = ConeGeometry;
    
        // ConeBufferGeometry
    
        function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
    
            CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
    
            this.type = 'ConeBufferGeometry';
    
            this.parameters = {
                radius: radius,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
        }
    
        ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
        ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;
    
        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         * @author Mugen87 / https://github.com/Mugen87
         * @author hughes
         */
    
        // CircleGeometry
    
        function CircleGeometry( radius, segments, thetaStart, thetaLength ) {
    
            Geometry.call( this );
    
            this.type = 'CircleGeometry';
    
            this.parameters = {
                radius: radius,
                segments: segments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
            this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
            this.mergeVertices();
    
        }
    
        CircleGeometry.prototype = Object.create( Geometry.prototype );
        CircleGeometry.prototype.constructor = CircleGeometry;
    
        // CircleBufferGeometry
    
        function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {
    
            BufferGeometry.call( this );
    
            this.type = 'CircleBufferGeometry';
    
            this.parameters = {
                radius: radius,
                segments: segments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
    
            radius = radius || 1;
            segments = segments !== undefined ? Math.max( 3, segments ) : 8;
    
            thetaStart = thetaStart !== undefined ? thetaStart : 0;
            thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
    
            // buffers
    
            var indices = [];
            var vertices = [];
            var normals = [];
            var uvs = [];
    
            // helper variables
    
            var i, s;
            var vertex = new Vector3();
            var uv = new Vector2();
    
            // center point
    
            vertices.push( 0, 0, 0 );
            normals.push( 0, 0, 1 );
            uvs.push( 0.5, 0.5 );
    
            for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {
    
                var segment = thetaStart + s / segments * thetaLength;
    
                // vertex
    
                vertex.x = radius * Math.cos( segment );
                vertex.y = radius * Math.sin( segment );
    
                vertices.push( vertex.x, vertex.y, vertex.z );
    
                // normal
    
                normals.push( 0, 0, 1 );
    
                // uvs
    
                uv.x = ( vertices[ i ] / radius + 1 ) / 2;
                uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;
    
                uvs.push( uv.x, uv.y );
    
            }
    
            // indices
    
            for ( i = 1; i <= segments; i ++ ) {
    
                indices.push( i, i + 1, 0 );
    
            }
    
            // build geometry
    
            this.setIndex( indices );
            this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
            this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
    
        }
    
        CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
        CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;
    
    
    
        var Geometries = /*#__PURE__*/Object.freeze({
            WireframeGeometry: WireframeGeometry,
            ParametricGeometry: ParametricGeometry,
            ParametricBufferGeometry: ParametricBufferGeometry,
            TetrahedronGeometry: TetrahedronGeometry,
            TetrahedronBufferGeometry: TetrahedronBufferGeometry,
            OctahedronGeometry: OctahedronGeometry,
            OctahedronBufferGeometry: OctahedronBufferGeometry,
            IcosahedronGeometry: IcosahedronGeometry,
            IcosahedronBufferGeometry: IcosahedronBufferGeometry,
            DodecahedronGeometry: DodecahedronGeometry,
            DodecahedronBufferGeometry: DodecahedronBufferGeometry,
            PolyhedronGeometry: PolyhedronGeometry,
            PolyhedronBufferGeometry: PolyhedronBufferGeometry,
            TubeGeometry: TubeGeometry,
            TubeBufferGeometry: TubeBufferGeometry,
            TorusKnotGeometry: TorusKnotGeometry,
            TorusKnotBufferGeometry: TorusKnotBufferGeometry,
            TorusGeometry: TorusGeometry,
            TorusBufferGeometry: TorusBufferGeometry,
            TextGeometry: TextGeometry,
            TextBufferGeometry: TextBufferGeometry,
            SphereGeometry: SphereGeometry,
            SphereBufferGeometry: SphereBufferGeometry,
            RingGeometry: RingGeometry,
            RingBufferGeometry: RingBufferGeometry,
            PlaneGeometry: PlaneGeometry,
            PlaneBufferGeometry: PlaneBufferGeometry,
            LatheGeometry: LatheGeometry,
            LatheBufferGeometry: LatheBufferGeometry,
            ShapeGeometry: ShapeGeometry,
            ShapeBufferGeometry: ShapeBufferGeometry,
            ExtrudeGeometry: ExtrudeGeometry,
            ExtrudeBufferGeometry: ExtrudeBufferGeometry,
            EdgesGeometry: EdgesGeometry,
            ConeGeometry: ConeGeometry,
            ConeBufferGeometry: ConeBufferGeometry,
            CylinderGeometry: CylinderGeometry,
            CylinderBufferGeometry: CylinderBufferGeometry,
            CircleGeometry: CircleGeometry,
            CircleBufferGeometry: CircleBufferGeometry,
            BoxGeometry: BoxGeometry,
            BoxBufferGeometry: BoxBufferGeometry
        });
    
        /**
         * @author mrdoob / http://mrdoob.com/
         *
         * parameters = {
         *  color: <THREE.Color>
         * }
         */
    
        function ShadowMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'ShadowMaterial';
    
            this.color = new Color( 0x000000 );
            this.transparent = true;
    
            this.setValues( parameters );
    
        }
    
        ShadowMaterial.prototype = Object.create( Material.prototype );
        ShadowMaterial.prototype.constructor = ShadowMaterial;
    
        ShadowMaterial.prototype.isShadowMaterial = true;
    
        ShadowMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.color.copy( source.color );
    
            return this;
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function RawShaderMaterial( parameters ) {
    
            ShaderMaterial.call( this, parameters );
    
            this.type = 'RawShaderMaterial';
    
        }
    
        RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
        RawShaderMaterial.prototype.constructor = RawShaderMaterial;
    
        RawShaderMaterial.prototype.isRawShaderMaterial = true;
    
        /**
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *  color: <hex>,
         *  roughness: <float>,
         *  metalness: <float>,
         *  opacity: <float>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  lightMap: new THREE.Texture( <Image> ),
         *  lightMapIntensity: <float>
         *
         *  aoMap: new THREE.Texture( <Image> ),
         *  aoMapIntensity: <float>
         *
         *  emissive: <hex>,
         *  emissiveIntensity: <float>
         *  emissiveMap: new THREE.Texture( <Image> ),
         *
         *  bumpMap: new THREE.Texture( <Image> ),
         *  bumpScale: <float>,
         *
         *  normalMap: new THREE.Texture( <Image> ),
         *  normalMapType: THREE.TangentSpaceNormalMap,
         *  normalScale: <Vector2>,
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  roughnessMap: new THREE.Texture( <Image> ),
         *
         *  metalnessMap: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
         *  envMapIntensity: <float>
         *
         *  refractionRatio: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */
    
        function MeshStandardMaterial( parameters ) {
    
            Material.call( this );
    
            this.defines = { 'STANDARD': '' };
    
            this.type = 'MeshStandardMaterial';
    
            this.color = new Color( 0xffffff ); // diffuse
            this.roughness = 0.5;
            this.metalness = 0.5;
    
            this.map = null;
    
            this.lightMap = null;
            this.lightMapIntensity = 1.0;
    
            this.aoMap = null;
            this.aoMapIntensity = 1.0;
    
            this.emissive = new Color( 0x000000 );
            this.emissiveIntensity = 1.0;
            this.emissiveMap = null;
    
            this.bumpMap = null;
            this.bumpScale = 1;
    
            this.normalMap = null;
            this.normalMapType = TangentSpaceNormalMap;
            this.normalScale = new Vector2( 1, 1 );
    
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
    
            this.roughnessMap = null;
    
            this.metalnessMap = null;
    
            this.alphaMap = null;
    
            this.envMap = null;
            this.envMapIntensity = 1.0;
    
            this.refractionRatio = 0.98;
    
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = 'round';
            this.wireframeLinejoin = 'round';
    
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
    
            this.setValues( parameters );
    
        }
    
        MeshStandardMaterial.prototype = Object.create( Material.prototype );
        MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
    
        MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
    
        MeshStandardMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.defines = { 'STANDARD': '' };
    
            this.color.copy( source.color );
            this.roughness = source.roughness;
            this.metalness = source.metalness;
    
            this.map = source.map;
    
            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;
    
            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;
    
            this.emissive.copy( source.emissive );
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;
    
            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;
    
            this.normalMap = source.normalMap;
            this.normalMapType = source.normalMapType;
            this.normalScale.copy( source.normalScale );
    
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
    
            this.roughnessMap = source.roughnessMap;
    
            this.metalnessMap = source.metalnessMap;
    
            this.alphaMap = source.alphaMap;
    
            this.envMap = source.envMap;
            this.envMapIntensity = source.envMapIntensity;
    
            this.refractionRatio = source.refractionRatio;
    
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;
    
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
    
            return this;
    
        };
    
        /**
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *  reflectivity: <float>
         *  clearCoat: <float>
         *  clearCoatRoughness: <float>
         * }
         */
    
        function MeshPhysicalMaterial( parameters ) {
    
            MeshStandardMaterial.call( this );
    
            this.defines = { 'PHYSICAL': '' };
    
            this.type = 'MeshPhysicalMaterial';
    
            this.reflectivity = 0.5; // maps to F0 = 0.04
    
            this.clearCoat = 0.0;
            this.clearCoatRoughness = 0.0;
    
            this.setValues( parameters );
    
        }
    
        MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
        MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
    
        MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
    
        MeshPhysicalMaterial.prototype.copy = function ( source ) {
    
            MeshStandardMaterial.prototype.copy.call( this, source );
    
            this.defines = { 'PHYSICAL': '' };
    
            this.reflectivity = source.reflectivity;
    
            this.clearCoat = source.clearCoat;
            this.clearCoatRoughness = source.clearCoatRoughness;
    
            return this;
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  specular: <hex>,
         *  shininess: <float>,
         *  opacity: <float>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  lightMap: new THREE.Texture( <Image> ),
         *  lightMapIntensity: <float>
         *
         *  aoMap: new THREE.Texture( <Image> ),
         *  aoMapIntensity: <float>
         *
         *  emissive: <hex>,
         *  emissiveIntensity: <float>
         *  emissiveMap: new THREE.Texture( <Image> ),
         *
         *  bumpMap: new THREE.Texture( <Image> ),
         *  bumpScale: <float>,
         *
         *  normalMap: new THREE.Texture( <Image> ),
         *  normalMapType: THREE.TangentSpaceNormalMap,
         *  normalScale: <Vector2>,
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  specularMap: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
         *  combine: THREE.Multiply,
         *  reflectivity: <float>,
         *  refractionRatio: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */
    
        function MeshPhongMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'MeshPhongMaterial';
    
            this.color = new Color( 0xffffff ); // diffuse
            this.specular = new Color( 0x111111 );
            this.shininess = 30;
    
            this.map = null;
    
            this.lightMap = null;
            this.lightMapIntensity = 1.0;
    
            this.aoMap = null;
            this.aoMapIntensity = 1.0;
    
            this.emissive = new Color( 0x000000 );
            this.emissiveIntensity = 1.0;
            this.emissiveMap = null;
    
            this.bumpMap = null;
            this.bumpScale = 1;
    
            this.normalMap = null;
            this.normalMapType = TangentSpaceNormalMap;
            this.normalScale = new Vector2( 1, 1 );
    
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
    
            this.specularMap = null;
    
            this.alphaMap = null;
    
            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;
    
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = 'round';
            this.wireframeLinejoin = 'round';
    
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
    
            this.setValues( parameters );
    
        }
    
        MeshPhongMaterial.prototype = Object.create( Material.prototype );
        MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
    
        MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
    
        MeshPhongMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.color.copy( source.color );
            this.specular.copy( source.specular );
            this.shininess = source.shininess;
    
            this.map = source.map;
    
            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;
    
            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;
    
            this.emissive.copy( source.emissive );
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;
    
            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;
    
            this.normalMap = source.normalMap;
            this.normalMapType = source.normalMapType;
            this.normalScale.copy( source.normalScale );
    
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
    
            this.specularMap = source.specularMap;
    
            this.alphaMap = source.alphaMap;
    
            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;
    
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;
    
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
    
            return this;
    
        };
    
        /**
         * @author takahirox / http://github.com/takahirox
         *
         * parameters = {
         *  gradientMap: new THREE.Texture( <Image> )
         * }
         */
    
        function MeshToonMaterial( parameters ) {
    
            MeshPhongMaterial.call( this );
    
            this.defines = { 'TOON': '' };
    
            this.type = 'MeshToonMaterial';
    
            this.gradientMap = null;
    
            this.setValues( parameters );
    
        }
    
        MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
        MeshToonMaterial.prototype.constructor = MeshToonMaterial;
    
        MeshToonMaterial.prototype.isMeshToonMaterial = true;
    
        MeshToonMaterial.prototype.copy = function ( source ) {
    
            MeshPhongMaterial.prototype.copy.call( this, source );
    
            this.gradientMap = source.gradientMap;
    
            return this;
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *  opacity: <float>,
         *
         *  bumpMap: new THREE.Texture( <Image> ),
         *  bumpScale: <float>,
         *
         *  normalMap: new THREE.Texture( <Image> ),
         *  normalMapType: THREE.TangentSpaceNormalMap,
         *  normalScale: <Vector2>,
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */
    
        function MeshNormalMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'MeshNormalMaterial';
    
            this.bumpMap = null;
            this.bumpScale = 1;
    
            this.normalMap = null;
            this.normalMapType = TangentSpaceNormalMap;
            this.normalScale = new Vector2( 1, 1 );
    
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
    
            this.wireframe = false;
            this.wireframeLinewidth = 1;
    
            this.fog = false;
            this.lights = false;
    
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
    
            this.setValues( parameters );
    
        }
    
        MeshNormalMaterial.prototype = Object.create( Material.prototype );
        MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
    
        MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
    
        MeshNormalMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;
    
            this.normalMap = source.normalMap;
            this.normalMapType = source.normalMapType;
            this.normalScale.copy( source.normalScale );
    
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
    
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
    
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
    
            return this;
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  lightMap: new THREE.Texture( <Image> ),
         *  lightMapIntensity: <float>
         *
         *  aoMap: new THREE.Texture( <Image> ),
         *  aoMapIntensity: <float>
         *
         *  emissive: <hex>,
         *  emissiveIntensity: <float>
         *  emissiveMap: new THREE.Texture( <Image> ),
         *
         *  specularMap: new THREE.Texture( <Image> ),
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
         *  combine: THREE.Multiply,
         *  reflectivity: <float>,
         *  refractionRatio: <float>,
         *
         *  wireframe: <boolean>,
         *  wireframeLinewidth: <float>,
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */
    
        function MeshLambertMaterial( parameters ) {
    
            Material.call( this );
    
            this.type = 'MeshLambertMaterial';
    
            this.color = new Color( 0xffffff ); // diffuse
    
            this.map = null;
    
            this.lightMap = null;
            this.lightMapIntensity = 1.0;
    
            this.aoMap = null;
            this.aoMapIntensity = 1.0;
    
            this.emissive = new Color( 0x000000 );
            this.emissiveIntensity = 1.0;
            this.emissiveMap = null;
    
            this.specularMap = null;
    
            this.alphaMap = null;
    
            this.envMap = null;
            this.combine = MultiplyOperation;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;
    
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = 'round';
            this.wireframeLinejoin = 'round';
    
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
    
            this.setValues( parameters );
    
        }
    
        MeshLambertMaterial.prototype = Object.create( Material.prototype );
        MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
    
        MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
    
        MeshLambertMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.color.copy( source.color );
    
            this.map = source.map;
    
            this.lightMap = source.lightMap;
            this.lightMapIntensity = source.lightMapIntensity;
    
            this.aoMap = source.aoMap;
            this.aoMapIntensity = source.aoMapIntensity;
    
            this.emissive.copy( source.emissive );
            this.emissiveMap = source.emissiveMap;
            this.emissiveIntensity = source.emissiveIntensity;
    
            this.specularMap = source.specularMap;
    
            this.alphaMap = source.alphaMap;
    
            this.envMap = source.envMap;
            this.combine = source.combine;
            this.reflectivity = source.reflectivity;
            this.refractionRatio = source.refractionRatio;
    
            this.wireframe = source.wireframe;
            this.wireframeLinewidth = source.wireframeLinewidth;
            this.wireframeLinecap = source.wireframeLinecap;
            this.wireframeLinejoin = source.wireframeLinejoin;
    
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
    
            return this;
    
        };
    
        /**
         * @author WestLangley / http://github.com/WestLangley
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *
         *  matcap: new THREE.Texture( <Image> ),
         *
         *  map: new THREE.Texture( <Image> ),
         *
         *  bumpMap: new THREE.Texture( <Image> ),
         *  bumpScale: <float>,
         *
         *  normalMap: new THREE.Texture( <Image> ),
         *  normalMapType: THREE.TangentSpaceNormalMap,
         *  normalScale: <Vector2>,
         *
         *  displacementMap: new THREE.Texture( <Image> ),
         *  displacementScale: <float>,
         *  displacementBias: <float>,
         *
         *  alphaMap: new THREE.Texture( <Image> ),
         *
         *  skinning: <bool>,
         *  morphTargets: <bool>,
         *  morphNormals: <bool>
         * }
         */
    
        function MeshMatcapMaterial( parameters ) {
    
            Material.call( this );
    
            this.defines = { 'MATCAP': '' };
    
            this.type = 'MeshMatcapMaterial';
    
            this.color = new Color( 0xffffff ); // diffuse
    
            this.matcap = null;
    
            this.map = null;
    
            this.bumpMap = null;
            this.bumpScale = 1;
    
            this.normalMap = null;
            this.normalMapType = TangentSpaceNormalMap;
            this.normalScale = new Vector2( 1, 1 );
    
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
    
            this.alphaMap = null;
    
            this.skinning = false;
            this.morphTargets = false;
            this.morphNormals = false;
    
            this.lights = false;
    
            this.setValues( parameters );
    
        }
    
        MeshMatcapMaterial.prototype = Object.create( Material.prototype );
        MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
    
        MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
    
        MeshMatcapMaterial.prototype.copy = function ( source ) {
    
            Material.prototype.copy.call( this, source );
    
            this.defines = { 'MATCAP': '' };
    
            this.color.copy( source.color );
    
            this.matcap = source.matcap;
    
            this.map = source.map;
    
            this.bumpMap = source.bumpMap;
            this.bumpScale = source.bumpScale;
    
            this.normalMap = source.normalMap;
            this.normalMapType = source.normalMapType;
            this.normalScale.copy( source.normalScale );
    
            this.displacementMap = source.displacementMap;
            this.displacementScale = source.displacementScale;
            this.displacementBias = source.displacementBias;
    
            this.alphaMap = source.alphaMap;
    
            this.skinning = source.skinning;
            this.morphTargets = source.morphTargets;
            this.morphNormals = source.morphNormals;
    
            return this;
    
        };
    
        /**
         * @author alteredq / http://alteredqualia.com/
         *
         * parameters = {
         *  color: <hex>,
         *  opacity: <float>,
         *
         *  linewidth: <float>,
         *
         *  scale: <float>,
         *  dashSize: <float>,
         *  gapSize: <float>
         * }
         */
    
        function LineDashedMaterial( parameters ) {
    
            LineBasicMaterial.call( this );
    
            this.type = 'LineDashedMaterial';
    
            this.scale = 1;
            this.dashSize = 3;
            this.gapSize = 1;
    
            this.setValues( parameters );
    
        }
    
        LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
        LineDashedMaterial.prototype.constructor = LineDashedMaterial;
    
        LineDashedMaterial.prototype.isLineDashedMaterial = true;
    
        LineDashedMaterial.prototype.copy = function ( source ) {
    
            LineBasicMaterial.prototype.copy.call( this, source );
    
            this.scale = source.scale;
            this.dashSize = source.dashSize;
            this.gapSize = source.gapSize;
    
            return this;
    
        };
    
    
    
        var Materials = /*#__PURE__*/Object.freeze({
            ShadowMaterial: ShadowMaterial,
            SpriteMaterial: SpriteMaterial,
            RawShaderMaterial: RawShaderMaterial,
            ShaderMaterial: ShaderMaterial,
            PointsMaterial: PointsMaterial,
            MeshPhysicalMaterial: MeshPhysicalMaterial,
            MeshStandardMaterial: MeshStandardMaterial,
            MeshPhongMaterial: MeshPhongMaterial,
            MeshToonMaterial: MeshToonMaterial,
            MeshNormalMaterial: MeshNormalMaterial,
            MeshLambertMaterial: MeshLambertMaterial,
            MeshDepthMaterial: MeshDepthMaterial,
            MeshDistanceMaterial: MeshDistanceMaterial,
            MeshBasicMaterial: MeshBasicMaterial,
            MeshMatcapMaterial: MeshMatcapMaterial,
            LineDashedMaterial: LineDashedMaterial,
            LineBasicMaterial: LineBasicMaterial,
            Material: Material
        });
    
        /**
         * @author tschw
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         */
    
        var AnimationUtils = {
    
            // same as Array.prototype.slice, but also works on typed arrays
            arraySlice: function ( array, from, to ) {
    
                if ( AnimationUtils.isTypedArray( array ) ) {
    
                    // in ios9 array.subarray(from, undefined) will return empty array
                    // but array.subarray(from) or array.subarray(from, len) is correct
                    return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );
    
                }
    
                return array.slice( from, to );
    
            },
    
            // converts an array to a specific type
            convertArray: function ( array, type, forceClone ) {
    
                if ( ! array || // let 'undefined' and 'null' pass
                    ! forceClone && array.constructor === type ) return array;
    
                if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {
    
                    return new type( array ); // create typed array
    
                }
    
                return Array.prototype.slice.call( array ); // create Array
    
            },
    
            isTypedArray: function ( object ) {
    
                return ArrayBuffer.isView( object ) &&
                    ! ( object instanceof DataView );
    
            },
    
            // returns an array by which times and values can be sorted
            getKeyframeOrder: function ( times ) {
    
                function compareTime( i, j ) {
    
                    return times[ i ] - times[ j ];
    
                }
    
                var n = times.length;
                var result = new Array( n );
                for ( var i = 0; i !== n; ++ i ) result[ i ] = i;
    
                result.sort( compareTime );
    
                return result;
    
            },
    
            // uses the array previously returned by 'getKeyframeOrder' to sort data
            sortedArray: function ( values, stride, order ) {
    
                var nValues = values.length;
                var result = new values.constructor( nValues );
    
                for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {
    
                    var srcOffset = order[ i ] * stride;
    
                    for ( var j = 0; j !== stride; ++ j ) {
    
                        result[ dstOffset ++ ] = values[ srcOffset + j ];
    
                    }
    
                }
    
                return result;
    
            },
    
            // function for parsing AOS keyframe formats
            flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {
    
                var i = 1, key = jsonKeys[ 0 ];
    
                while ( key !== undefined && key[ valuePropertyName ] === undefined ) {
    
                    key = jsonKeys[ i ++ ];
    
                }
    
                if ( key === undefined ) return; // no data
    
                var value = key[ valuePropertyName ];
                if ( value === undefined ) return; // no data
    
                if ( Array.isArray( value ) ) {
    
                    do {
    
                        value = key[ valuePropertyName ];
    
                        if ( value !== undefined ) {
    
                            times.push( key.time );
                            values.push.apply( values, value ); // push all elements
    
                        }
    
                        key = jsonKeys[ i ++ ];
    
                    } while ( key !== undefined );
    
                } else if ( value.toArray !== undefined ) {
    
                    // ...assume THREE.Math-ish
    
                    do {
    
                        value = key[ valuePropertyName ];
    
                        if ( value !== undefined ) {
    
                            times.push( key.time );
                            value.toArray( values, values.length );
    
                        }
    
                        key = jsonKeys[ i ++ ];
    
                    } while ( key !== undefined );
    
                } else {
    
                    // otherwise push as-is
    
                    do {
    
                        value = key[ valuePropertyName ];
    
                        if ( value !== undefined ) {
    
                            times.push( key.time );
                            values.push( value );
    
                        }
    
                        key = jsonKeys[ i ++ ];
    
                    } while ( key !== undefined );
    
                }
    
            }
    
        };
    
        /**
         * Abstract base class of interpolants over parametric samples.
         *
         * The parameter domain is one dimensional, typically the time or a path
         * along a curve defined by the data.
         *
         * The sample values can have any dimensionality and derived classes may
         * apply special interpretations to the data.
         *
         * This class provides the interval seek in a Template Method, deferring
         * the actual interpolation to derived classes.
         *
         * Time complexity is O(1) for linear access crossing at most two points
         * and O(log N) for random access, where N is the number of positions.
         *
         * References:
         *
         * 		http://www.oodesign.com/template-method-pattern.html
         *
         * @author tschw
         */
    
        function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
    
            this.parameterPositions = parameterPositions;
            this._cachedIndex = 0;
    
            this.resultBuffer = resultBuffer !== undefined ?
                resultBuffer : new sampleValues.constructor( sampleSize );
            this.sampleValues = sampleValues;
            this.valueSize = sampleSize;
    
        }
    
        Object.assign( Interpolant.prototype, {
    
            evaluate: function ( t ) {
    
                var pp = this.parameterPositions,
                    i1 = this._cachedIndex,
    
                    t1 = pp[ i1 ],
                    t0 = pp[ i1 - 1 ];
    
                validate_interval: {
    
                    seek: {
    
                        var right;
    
                        linear_scan: {
    
                            //- See http://jsperf.com/comparison-to-undefined/3
                            //- slower code:
                            //-
                            //- 				if ( t >= t1 || t1 === undefined ) {
                            forward_scan: if ( ! ( t < t1 ) ) {
    
                                for ( var giveUpAt = i1 + 2; ; ) {
    
                                    if ( t1 === undefined ) {
    
                                        if ( t < t0 ) break forward_scan;
    
                                        // after end
    
                                        i1 = pp.length;
                                        this._cachedIndex = i1;
                                        return this.afterEnd_( i1 - 1, t, t0 );
    
                                    }
    
                                    if ( i1 === giveUpAt ) break; // this loop
    
                                    t0 = t1;
                                    t1 = pp[ ++ i1 ];
    
                                    if ( t < t1 ) {
    
                                        // we have arrived at the sought interval
                                        break seek;
    
                                    }
    
                                }
    
                                // prepare binary search on the right side of the index
                                right = pp.length;
                                break linear_scan;
    
                            }
    
                            //- slower code:
                            //-					if ( t < t0 || t0 === undefined ) {
                            if ( ! ( t >= t0 ) ) {
    
                                // looping?
    
                                var t1global = pp[ 1 ];
    
                                if ( t < t1global ) {
    
                                    i1 = 2; // + 1, using the scan for the details
                                    t0 = t1global;
    
                                }
    
                                // linear reverse scan
    
                                for ( var giveUpAt = i1 - 2; ; ) {
    
                                    if ( t0 === undefined ) {
    
                                        // before start
    
                                        this._cachedIndex = 0;
                                        return this.beforeStart_( 0, t, t1 );
    
                                    }
    
                                    if ( i1 === giveUpAt ) break; // this loop
    
                                    t1 = t0;
                                    t0 = pp[ -- i1 - 1 ];
    
                                    if ( t >= t0 ) {
    
                                        // we have arrived at the sought interval
                                        break seek;
    
                                    }
    
                                }
    
                                // prepare binary search on the left side of the index
                                right = i1;
                                i1 = 0;
                                break linear_scan;
    
                            }
    
                            // the interval is valid
    
                            break validate_interval;
    
                        } // linear scan
    
                        // binary search
    
                        while ( i1 < right ) {
    
                            var mid = ( i1 + right ) >>> 1;
    
                            if ( t < pp[ mid ] ) {
    
                                right = mid;
    
                            } else {
    
                                i1 = mid + 1;
    
                            }
    
                        }
    
                        t1 = pp[ i1 ];
                        t0 = pp[ i1 - 1 ];
    
                        // check boundary cases, again
    
                        if ( t0 === undefined ) {
    
                            this._cachedIndex = 0;
                            return this.beforeStart_( 0, t, t1 );
    
                        }
    
                        if ( t1 === undefined ) {
    
                            i1 = pp.length;
                            this._cachedIndex = i1;
                            return this.afterEnd_( i1 - 1, t0, t );
    
                        }
    
                    } // seek
    
                    this._cachedIndex = i1;
    
                    this.intervalChanged_( i1, t0, t1 );
    
                } // validate_interval
    
                return this.interpolate_( i1, t0, t, t1 );
    
            },
    
            settings: null, // optional, subclass-specific settings structure
            // Note: The indirection allows central control of many interpolants.
    
            // --- Protected interface
    
            DefaultSettings_: {},
    
            getSettings_: function () {
    
                return this.settings || this.DefaultSettings_;
    
            },
    
            copySampleValue_: function ( index ) {
    
                // copies a sample value to the result buffer
    
                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
                    offset = index * stride;
    
                for ( var i = 0; i !== stride; ++ i ) {
    
                    result[ i ] = values[ offset + i ];
    
                }
    
                return result;
    
            },
    
            // Template methods for derived classes:
    
            interpolate_: function ( /* i1, t0, t, t1 */ ) {
    
                throw new Error( 'call to abstract method' );
                // implementations shall return this.resultBuffer
    
            },
    
            intervalChanged_: function ( /* i1, t0, t1 */ ) {
    
                // empty
    
            }
    
        } );
    
        //!\ DECLARE ALIAS AFTER assign prototype !
        Object.assign( Interpolant.prototype, {
    
            //( 0, t, t0 ), returns this.resultBuffer
            beforeStart_: Interpolant.prototype.copySampleValue_,
    
            //( N-1, tN-1, t ), returns this.resultBuffer
            afterEnd_: Interpolant.prototype.copySampleValue_,
    
        } );
    
        /**
         * Fast and simple cubic spline interpolant.
         *
         * It was derived from a Hermitian construction setting the first derivative
         * at each sample position to the linear slope between neighboring positions
         * over their parameter interval.
         *
         * @author tschw
         */
    
        function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
    
            Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
    
            this._weightPrev = - 0;
            this._offsetPrev = - 0;
            this._weightNext = - 0;
            this._offsetNext = - 0;
    
        }
    
        CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
    
            constructor: CubicInterpolant,
    
            DefaultSettings_: {
    
                endingStart: ZeroCurvatureEnding,
                endingEnd: ZeroCurvatureEnding
    
            },
    
            intervalChanged_: function ( i1, t0, t1 ) {
    
                var pp = this.parameterPositions,
                    iPrev = i1 - 2,
                    iNext = i1 + 1,
    
                    tPrev = pp[ iPrev ],
                    tNext = pp[ iNext ];
    
                if ( tPrev === undefined ) {
    
                    switch ( this.getSettings_().endingStart ) {
    
                        case ZeroSlopeEnding:
    
                            // f'(t0) = 0
                            iPrev = i1;
                            tPrev = 2 * t0 - t1;
    
                            break;
    
                        case WrapAroundEnding:
    
                            // use the other end of the curve
                            iPrev = pp.length - 2;
                            tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];
    
                            break;
    
                        default: // ZeroCurvatureEnding
    
                            // f''(t0) = 0 a.k.a. Natural Spline
                            iPrev = i1;
                            tPrev = t1;
    
                    }
    
                }
    
                if ( tNext === undefined ) {
    
                    switch ( this.getSettings_().endingEnd ) {
    
                        case ZeroSlopeEnding:
    
                            // f'(tN) = 0
                            iNext = i1;
                            tNext = 2 * t1 - t0;
    
                            break;
    
                        case WrapAroundEnding:
    
                            // use the other end of the curve
                            iNext = 1;
                            tNext = t1 + pp[ 1 ] - pp[ 0 ];
    
                            break;
    
                        default: // ZeroCurvatureEnding
    
                            // f''(tN) = 0, a.k.a. Natural Spline
                            iNext = i1 - 1;
                            tNext = t0;
    
                    }
    
                }
    
                var halfDt = ( t1 - t0 ) * 0.5,
                    stride = this.valueSize;
    
                this._weightPrev = halfDt / ( t0 - tPrev );
                this._weightNext = halfDt / ( tNext - t1 );
                this._offsetPrev = iPrev * stride;
                this._offsetNext = iNext * stride;
    
            },
    
            interpolate_: function ( i1, t0, t, t1 ) {
    
                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
    
                    o1 = i1 * stride,		o0 = o1 - stride,
                    oP = this._offsetPrev, 	oN = this._offsetNext,
                    wP = this._weightPrev,	wN = this._weightNext,
    
                    p = ( t - t0 ) / ( t1 - t0 ),
                    pp = p * p,
                    ppp = pp * p;
    
                // evaluate polynomials
    
                var sP = - wP * ppp + 2 * wP * pp - wP * p;
                var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
                var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
                var sN = wN * ppp - wN * pp;
    
                // combine data linearly
    
                for ( var i = 0; i !== stride; ++ i ) {
    
                    result[ i ] =
                            sP * values[ oP + i ] +
                            s0 * values[ o0 + i ] +
                            s1 * values[ o1 + i ] +
                            sN * values[ oN + i ];
    
                }
    
                return result;
    
            }
    
        } );
    
        /**
         * @author tschw
         */
    
        function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
    
            Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
    
        }
    
        LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
    
            constructor: LinearInterpolant,
    
            interpolate_: function ( i1, t0, t, t1 ) {
    
                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
    
                    offset1 = i1 * stride,
                    offset0 = offset1 - stride,
    
                    weight1 = ( t - t0 ) / ( t1 - t0 ),
                    weight0 = 1 - weight1;
    
                for ( var i = 0; i !== stride; ++ i ) {
    
                    result[ i ] =
                            values[ offset0 + i ] * weight0 +
                            values[ offset1 + i ] * weight1;
    
                }
    
                return result;
    
            }
    
        } );
    
        /**
         *
         * Interpolant that evaluates to the sample value at the position preceeding
         * the parameter.
         *
         * @author tschw
         */
    
        function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
    
            Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
    
        }
    
        DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
    
            constructor: DiscreteInterpolant,
    
            interpolate_: function ( i1 /*, t0, t, t1 */ ) {
    
                return this.copySampleValue_( i1 - 1 );
    
            }
    
        } );
    
        /**
         *
         * A timed sequence of keyframes for a specific property.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function KeyframeTrack( name, times, values, interpolation ) {
    
            if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
            if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );
    
            this.name = name;
    
            this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
            this.values = AnimationUtils.convertArray( values, this.ValueBufferType );
    
            this.setInterpolation( interpolation || this.DefaultInterpolation );
    
        }
    
        // Static methods
    
        Object.assign( KeyframeTrack, {
    
            // Serialization (in static context, because of constructor invocation
            // and automatic invocation of .toJSON):
    
            toJSON: function ( track ) {
    
                var trackType = track.constructor;
    
                var json;
    
                // derived classes can define a static toJSON method
                if ( trackType.toJSON !== undefined ) {
    
                    json = trackType.toJSON( track );
    
                } else {
    
                    // by default, we assume the data can be serialized as-is
                    json = {
    
                        'name': track.name,
                        'times': AnimationUtils.convertArray( track.times, Array ),
                        'values': AnimationUtils.convertArray( track.values, Array )
    
                    };
    
                    var interpolation = track.getInterpolation();
    
                    if ( interpolation !== track.DefaultInterpolation ) {
    
                        json.interpolation = interpolation;
    
                    }
    
                }
    
                json.type = track.ValueTypeName; // mandatory
    
                return json;
    
            }
    
        } );
    
        Object.assign( KeyframeTrack.prototype, {
    
            constructor: KeyframeTrack,
    
            TimeBufferType: Float32Array,
    
            ValueBufferType: Float32Array,
    
            DefaultInterpolation: InterpolateLinear,
    
            InterpolantFactoryMethodDiscrete: function ( result ) {
    
                return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );
    
            },
    
            InterpolantFactoryMethodLinear: function ( result ) {
    
                return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );
    
            },
    
            InterpolantFactoryMethodSmooth: function ( result ) {
    
                return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );
    
            },
    
            setInterpolation: function ( interpolation ) {
    
                var factoryMethod;
    
                switch ( interpolation ) {
    
                    case InterpolateDiscrete:
    
                        factoryMethod = this.InterpolantFactoryMethodDiscrete;
    
                        break;
    
                    case InterpolateLinear:
    
                        factoryMethod = this.InterpolantFactoryMethodLinear;
    
                        break;
    
                    case InterpolateSmooth:
    
                        factoryMethod = this.InterpolantFactoryMethodSmooth;
    
                        break;
    
                }
    
                if ( factoryMethod === undefined ) {
    
                    var message = "unsupported interpolation for " +
                        this.ValueTypeName + " keyframe track named " + this.name;
    
                    if ( this.createInterpolant === undefined ) {
    
                        // fall back to default, unless the default itself is messed up
                        if ( interpolation !== this.DefaultInterpolation ) {
    
                            this.setInterpolation( this.DefaultInterpolation );
    
                        } else {
    
                            throw new Error( message ); // fatal, in this case
    
                        }
    
                    }
    
                    console.warn( 'THREE.KeyframeTrack:', message );
                    return this;
    
                }
    
                this.createInterpolant = factoryMethod;
    
                return this;
    
            },
    
            getInterpolation: function () {
    
                switch ( this.createInterpolant ) {
    
                    case this.InterpolantFactoryMethodDiscrete:
    
                        return InterpolateDiscrete;
    
                    case this.InterpolantFactoryMethodLinear:
    
                        return InterpolateLinear;
    
                    case this.InterpolantFactoryMethodSmooth:
    
                        return InterpolateSmooth;
    
                }
    
            },
    
            getValueSize: function () {
    
                return this.values.length / this.times.length;
    
            },
    
            // move all keyframes either forwards or backwards in time
            shift: function ( timeOffset ) {
    
                if ( timeOffset !== 0.0 ) {
    
                    var times = this.times;
    
                    for ( var i = 0, n = times.length; i !== n; ++ i ) {
    
                        times[ i ] += timeOffset;
    
                    }
    
                }
    
                return this;
    
            },
    
            // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
            scale: function ( timeScale ) {
    
                if ( timeScale !== 1.0 ) {
    
                    var times = this.times;
    
                    for ( var i = 0, n = times.length; i !== n; ++ i ) {
    
                        times[ i ] *= timeScale;
    
                    }
    
                }
    
                return this;
    
            },
    
            // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
            // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
            trim: function ( startTime, endTime ) {
    
                var times = this.times,
                    nKeys = times.length,
                    from = 0,
                    to = nKeys - 1;
    
                while ( from !== nKeys && times[ from ] < startTime ) {
    
                    ++ from;
    
                }
    
                while ( to !== - 1 && times[ to ] > endTime ) {
    
                    -- to;
    
                }
    
                ++ to; // inclusive -> exclusive bound
    
                if ( from !== 0 || to !== nKeys ) {
    
                    // empty tracks are forbidden, so keep at least one keyframe
                    if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;
    
                    var stride = this.getValueSize();
                    this.times = AnimationUtils.arraySlice( times, from, to );
                    this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );
    
                }
    
                return this;
    
            },
    
            // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
            validate: function () {
    
                var valid = true;
    
                var valueSize = this.getValueSize();
                if ( valueSize - Math.floor( valueSize ) !== 0 ) {
    
                    console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
                    valid = false;
    
                }
    
                var times = this.times,
                    values = this.values,
    
                    nKeys = times.length;
    
                if ( nKeys === 0 ) {
    
                    console.error( 'THREE.KeyframeTrack: Track is empty.', this );
                    valid = false;
    
                }
    
                var prevTime = null;
    
                for ( var i = 0; i !== nKeys; i ++ ) {
    
                    var currTime = times[ i ];
    
                    if ( typeof currTime === 'number' && isNaN( currTime ) ) {
    
                        console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
                        valid = false;
                        break;
    
                    }
    
                    if ( prevTime !== null && prevTime > currTime ) {
    
                        console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
                        valid = false;
                        break;
    
                    }
    
                    prevTime = currTime;
    
                }
    
                if ( values !== undefined ) {
    
                    if ( AnimationUtils.isTypedArray( values ) ) {
    
                        for ( var i = 0, n = values.length; i !== n; ++ i ) {
    
                            var value = values[ i ];
    
                            if ( isNaN( value ) ) {
    
                                console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
                                valid = false;
                                break;
    
                            }
    
                        }
    
                    }
    
                }
    
                return valid;
    
            },
    
            // removes equivalent sequential keys as common in morph target sequences
            // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
            optimize: function () {
    
                var times = this.times,
                    values = this.values,
                    stride = this.getValueSize(),
    
                    smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
    
                    writeIndex = 1,
                    lastIndex = times.length - 1;
    
                for ( var i = 1; i < lastIndex; ++ i ) {
    
                    var keep = false;
    
                    var time = times[ i ];
                    var timeNext = times[ i + 1 ];
    
                    // remove adjacent keyframes scheduled at the same time
    
                    if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {
    
                        if ( ! smoothInterpolation ) {
    
                            // remove unnecessary keyframes same as their neighbors
    
                            var offset = i * stride,
                                offsetP = offset - stride,
                                offsetN = offset + stride;
    
                            for ( var j = 0; j !== stride; ++ j ) {
    
                                var value = values[ offset + j ];
    
                                if ( value !== values[ offsetP + j ] ||
                                    value !== values[ offsetN + j ] ) {
    
                                    keep = true;
                                    break;
    
                                }
    
                            }
    
                        } else {
    
                            keep = true;
    
                        }
    
                    }
    
                    // in-place compaction
    
                    if ( keep ) {
    
                        if ( i !== writeIndex ) {
    
                            times[ writeIndex ] = times[ i ];
    
                            var readOffset = i * stride,
                                writeOffset = writeIndex * stride;
    
                            for ( var j = 0; j !== stride; ++ j ) {
    
                                values[ writeOffset + j ] = values[ readOffset + j ];
    
                            }
    
                        }
    
                        ++ writeIndex;
    
                    }
    
                }
    
                // flush last keyframe (compaction looks ahead)
    
                if ( lastIndex > 0 ) {
    
                    times[ writeIndex ] = times[ lastIndex ];
    
                    for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {
    
                        values[ writeOffset + j ] = values[ readOffset + j ];
    
                    }
    
                    ++ writeIndex;
    
                }
    
                if ( writeIndex !== times.length ) {
    
                    this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
                    this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );
    
                }
    
                return this;
    
            },
    
            clone: function () {
    
                var times = AnimationUtils.arraySlice( this.times, 0 );
                var values = AnimationUtils.arraySlice( this.values, 0 );
    
                var TypedKeyframeTrack = this.constructor;
                var track = new TypedKeyframeTrack( this.name, times, values );
    
                // Interpolant argument to constructor is not saved, so copy the factory method directly.
                track.createInterpolant = this.createInterpolant;
    
                return track;
    
            }
    
        } );
    
        /**
         *
         * A Track of Boolean keyframe values.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function BooleanKeyframeTrack( name, times, values ) {
    
            KeyframeTrack.call( this, name, times, values );
    
        }
    
        BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
    
            constructor: BooleanKeyframeTrack,
    
            ValueTypeName: 'bool',
            ValueBufferType: Array,
    
            DefaultInterpolation: InterpolateDiscrete,
    
            InterpolantFactoryMethodLinear: undefined,
            InterpolantFactoryMethodSmooth: undefined
    
            // Note: Actually this track could have a optimized / compressed
            // representation of a single value and a custom interpolant that
            // computes "firstValue ^ isOdd( index )".
    
        } );
    
        /**
         *
         * A Track of keyframe values that represent color.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function ColorKeyframeTrack( name, times, values, interpolation ) {
    
            KeyframeTrack.call( this, name, times, values, interpolation );
    
        }
    
        ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
    
            constructor: ColorKeyframeTrack,
    
            ValueTypeName: 'color'
    
            // ValueBufferType is inherited
    
            // DefaultInterpolation is inherited
    
            // Note: Very basic implementation and nothing special yet.
            // However, this is the place for color space parameterization.
    
        } );
    
        /**
         *
         * A Track of numeric keyframe values.
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function NumberKeyframeTrack( name, times, values, interpolation ) {
    
            KeyframeTrack.call( this, name, times, values, interpolation );
    
        }
    
        NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
    
            constructor: NumberKeyframeTrack,
    
            ValueTypeName: 'number'
    
            // ValueBufferType is inherited
    
            // DefaultInterpolation is inherited
    
        } );
    
        /**
         * Spherical linear unit quaternion interpolant.
         *
         * @author tschw
         */
    
        function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
    
            Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
    
        }
    
        QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
    
            constructor: QuaternionLinearInterpolant,
    
            interpolate_: function ( i1, t0, t, t1 ) {
    
                var result = this.resultBuffer,
                    values = this.sampleValues,
                    stride = this.valueSize,
    
                    offset = i1 * stride,
    
                    alpha = ( t - t0 ) / ( t1 - t0 );
    
                for ( var end = offset + stride; offset !== end; offset += 4 ) {
    
                    Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );
    
                }
    
                return result;
    
            }
    
        } );
    
        /**
         *
         * A Track of quaternion keyframe values.
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function QuaternionKeyframeTrack( name, times, values, interpolation ) {
    
            KeyframeTrack.call( this, name, times, values, interpolation );
    
        }
    
        QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
    
            constructor: QuaternionKeyframeTrack,
    
            ValueTypeName: 'quaternion',
    
            // ValueBufferType is inherited
    
            DefaultInterpolation: InterpolateLinear,
    
            InterpolantFactoryMethodLinear: function ( result ) {
    
                return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );
    
            },
    
            InterpolantFactoryMethodSmooth: undefined // not yet implemented
    
        } );
    
        /**
         *
         * A Track that interpolates Strings
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function StringKeyframeTrack( name, times, values, interpolation ) {
    
            KeyframeTrack.call( this, name, times, values, interpolation );
    
        }
    
        StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
    
            constructor: StringKeyframeTrack,
    
            ValueTypeName: 'string',
            ValueBufferType: Array,
    
            DefaultInterpolation: InterpolateDiscrete,
    
            InterpolantFactoryMethodLinear: undefined,
    
            InterpolantFactoryMethodSmooth: undefined
    
        } );
    
        /**
         *
         * A Track of vectored keyframe values.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function VectorKeyframeTrack( name, times, values, interpolation ) {
    
            KeyframeTrack.call( this, name, times, values, interpolation );
    
        }
    
        VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
    
            constructor: VectorKeyframeTrack,
    
            ValueTypeName: 'vector'
    
            // ValueBufferType is inherited
    
            // DefaultInterpolation is inherited
    
        } );
    
        /**
         *
         * Reusable set of Tracks that represent an animation.
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         */
    
        function AnimationClip( name, duration, tracks ) {
    
            this.name = name;
            this.tracks = tracks;
            this.duration = ( duration !== undefined ) ? duration : - 1;
    
            this.uuid = _Math.generateUUID();
    
            // this means it should figure out its duration by scanning the tracks
            if ( this.duration < 0 ) {
    
                this.resetDuration();
    
            }
    
        }
    
        function getTrackTypeForValueTypeName( typeName ) {
    
            switch ( typeName.toLowerCase() ) {
    
                case 'scalar':
                case 'double':
                case 'float':
                case 'number':
                case 'integer':
    
                    return NumberKeyframeTrack;
    
                case 'vector':
                case 'vector2':
                case 'vector3':
                case 'vector4':
    
                    return VectorKeyframeTrack;
    
                case 'color':
    
                    return ColorKeyframeTrack;
    
                case 'quaternion':
    
                    return QuaternionKeyframeTrack;
    
                case 'bool':
                case 'boolean':
    
                    return BooleanKeyframeTrack;
    
                case 'string':
    
                    return StringKeyframeTrack;
    
            }
    
            throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );
    
        }
    
        function parseKeyframeTrack( json ) {
    
            if ( json.type === undefined ) {
    
                throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );
    
            }
    
            var trackType = getTrackTypeForValueTypeName( json.type );
    
            if ( json.times === undefined ) {
    
                var times = [], values = [];
    
                AnimationUtils.flattenJSON( json.keys, times, values, 'value' );
    
                json.times = times;
                json.values = values;
    
            }
    
            // derived classes can define a static parse method
            if ( trackType.parse !== undefined ) {
    
                return trackType.parse( json );
    
            } else {
    
                // by default, we assume a constructor compatible with the base
                return new trackType( json.name, json.times, json.values, json.interpolation );
    
            }
    
        }
    
        Object.assign( AnimationClip, {
    
            parse: function ( json ) {
    
                var tracks = [],
                    jsonTracks = json.tracks,
                    frameTime = 1.0 / ( json.fps || 1.0 );
    
                for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {
    
                    tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );
    
                }
    
                return new AnimationClip( json.name, json.duration, tracks );
    
            },
    
            toJSON: function ( clip ) {
    
                var tracks = [],
                    clipTracks = clip.tracks;
    
                var json = {
    
                    'name': clip.name,
                    'duration': clip.duration,
                    'tracks': tracks,
                    'uuid': clip.uuid
    
                };
    
                for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {
    
                    tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );
    
                }
    
                return json;
    
            },
    
            CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {
    
                var numMorphTargets = morphTargetSequence.length;
                var tracks = [];
    
                for ( var i = 0; i < numMorphTargets; i ++ ) {
    
                    var times = [];
                    var values = [];
    
                    times.push(
                        ( i + numMorphTargets - 1 ) % numMorphTargets,
                        i,
                        ( i + 1 ) % numMorphTargets );
    
                    values.push( 0, 1, 0 );
    
                    var order = AnimationUtils.getKeyframeOrder( times );
                    times = AnimationUtils.sortedArray( times, 1, order );
                    values = AnimationUtils.sortedArray( values, 1, order );
    
                    // if there is a key at the first frame, duplicate it as the
                    // last frame as well for perfect loop.
                    if ( ! noLoop && times[ 0 ] === 0 ) {
    
                        times.push( numMorphTargets );
                        values.push( values[ 0 ] );
    
                    }
    
                    tracks.push(
                        new NumberKeyframeTrack(
                            '.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
                            times, values
                        ).scale( 1.0 / fps ) );
    
                }
    
                return new AnimationClip( name, - 1, tracks );
    
            },
    
            findByName: function ( objectOrClipArray, name ) {
    
                var clipArray = objectOrClipArray;
    
                if ( ! Array.isArray( objectOrClipArray ) ) {
    
                    var o = objectOrClipArray;
                    clipArray = o.geometry && o.geometry.animations || o.animations;
    
                }
    
                for ( var i = 0; i < clipArray.length; i ++ ) {
    
                    if ( clipArray[ i ].name === name ) {
    
                        return clipArray[ i ];
    
                    }
    
                }
    
                return null;
    
            },
    
            CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {
    
                var animationToMorphTargets = {};
    
                // tested with https://regex101.com/ on trick sequences
                // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
                var pattern = /^([\w-]*?)([\d]+)$/;
    
                // sort morph target names into animation groups based
                // patterns like Walk_001, Walk_002, Run_001, Run_002
                for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {
    
                    var morphTarget = morphTargets[ i ];
                    var parts = morphTarget.name.match( pattern );
    
                    if ( parts && parts.length > 1 ) {
    
                        var name = parts[ 1 ];
    
                        var animationMorphTargets = animationToMorphTargets[ name ];
                        if ( ! animationMorphTargets ) {
    
                            animationToMorphTargets[ name ] = animationMorphTargets = [];
    
                        }
    
                        animationMorphTargets.push( morphTarget );
    
                    }
    
                }
    
                var clips = [];
    
                for ( var name in animationToMorphTargets ) {
    
                    clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );
    
                }
    
                return clips;
    
            },
    
            // parse the animation.hierarchy format
            parseAnimation: function ( animation, bones ) {
    
                if ( ! animation ) {
    
                    console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
                    return null;
    
                }
    
                var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {
    
                    // only return track if there are actually keys.
                    if ( animationKeys.length !== 0 ) {
    
                        var times = [];
                        var values = [];
    
                        AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );
    
                        // empty keys are filtered out, so check again
                        if ( times.length !== 0 ) {
    
                            destTracks.push( new trackType( trackName, times, values ) );
    
                        }
    
                    }
    
                };
    
                var tracks = [];
    
                var clipName = animation.name || 'default';
                // automatic length determination in AnimationClip.
                var duration = animation.length || - 1;
                var fps = animation.fps || 30;
    
                var hierarchyTracks = animation.hierarchy || [];
    
                for ( var h = 0; h < hierarchyTracks.length; h ++ ) {
    
                    var animationKeys = hierarchyTracks[ h ].keys;
    
                    // skip empty tracks
                    if ( ! animationKeys || animationKeys.length === 0 ) continue;
    
                    // process morph targets
                    if ( animationKeys[ 0 ].morphTargets ) {
    
                        // figure out all morph targets used in this track
                        var morphTargetNames = {};
    
                        for ( var k = 0; k < animationKeys.length; k ++ ) {
    
                            if ( animationKeys[ k ].morphTargets ) {
    
                                for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {
    
                                    morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;
    
                                }
    
                            }
    
                        }
    
                        // create a track for each morph target with all zero
                        // morphTargetInfluences except for the keys in which
                        // the morphTarget is named.
                        for ( var morphTargetName in morphTargetNames ) {
    
                            var times = [];
                            var values = [];
    
                            for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {
    
                                var animationKey = animationKeys[ k ];
    
                                times.push( animationKey.time );
                                values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );
    
                            }
    
                            tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );
    
                        }
    
                        duration = morphTargetNames.length * ( fps || 1.0 );
    
                    } else {
    
                        // ...assume skeletal animation
    
                        var boneName = '.bones[' + bones[ h ].name + ']';
    
                        addNonemptyTrack(
                            VectorKeyframeTrack, boneName + '.position',
                            animationKeys, 'pos', tracks );
    
                        addNonemptyTrack(
                            QuaternionKeyframeTrack, boneName + '.quaternion',
                            animationKeys, 'rot', tracks );
    
                        addNonemptyTrack(
                            VectorKeyframeTrack, boneName + '.scale',
                            animationKeys, 'scl', tracks );
    
                    }
    
                }
    
                if ( tracks.length === 0 ) {
    
                    return null;
    
                }
    
                var clip = new AnimationClip( clipName, duration, tracks );
    
                return clip;
    
            }
    
        } );
    
        Object.assign( AnimationClip.prototype, {
    
            resetDuration: function () {
    
                var tracks = this.tracks, duration = 0;
    
                for ( var i = 0, n = tracks.length; i !== n; ++ i ) {
    
                    var track = this.tracks[ i ];
    
                    duration = Math.max( duration, track.times[ track.times.length - 1 ] );
    
                }
    
                this.duration = duration;
    
                return this;
    
            },
    
            trim: function () {
    
                for ( var i = 0; i < this.tracks.length; i ++ ) {
    
                    this.tracks[ i ].trim( 0, this.duration );
    
                }
    
                return this;
    
            },
    
            validate: function () {
    
                var valid = true;
    
                for ( var i = 0; i < this.tracks.length; i ++ ) {
    
                    valid = valid && this.tracks[ i ].validate();
    
                }
    
                return valid;
    
            },
    
            optimize: function () {
    
                for ( var i = 0; i < this.tracks.length; i ++ ) {
    
                    this.tracks[ i ].optimize();
    
                }
    
                return this;
    
            },
    
    
            clone: function () {
    
                var tracks = [];
    
                for ( var i = 0; i < this.tracks.length; i ++ ) {
    
                    tracks.push( this.tracks[ i ].clone() );
    
                }
    
                return new AnimationClip( this.name, this.duration, tracks );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        var Cache = {
    
            enabled: false,
    
            files: {},
    
            add: function ( key, file ) {
    
                if ( this.enabled === false ) return;
    
                // console.log( 'THREE.Cache', 'Adding key:', key );
    
                this.files[ key ] = file;
    
            },
    
            get: function ( key ) {
    
                if ( this.enabled === false ) return;
    
                // console.log( 'THREE.Cache', 'Checking key:', key );
    
                return this.files[ key ];
    
            },
    
            remove: function ( key ) {
    
                delete this.files[ key ];
    
            },
    
            clear: function () {
    
                this.files = {};
    
            }
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function LoadingManager( onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var isLoading = false;
            var itemsLoaded = 0;
            var itemsTotal = 0;
            var urlModifier = undefined;
    
            // Refer to #5689 for the reason why we don't set .onStart
            // in the constructor
    
            this.onStart = undefined;
            this.onLoad = onLoad;
            this.onProgress = onProgress;
            this.onError = onError;
    
            this.itemStart = function ( url ) {
    
                itemsTotal ++;
    
                if ( isLoading === false ) {
    
                    if ( scope.onStart !== undefined ) {
    
                        scope.onStart( url, itemsLoaded, itemsTotal );
    
                    }
    
                }
    
                isLoading = true;
    
            };
    
            this.itemEnd = function ( url ) {
    
                itemsLoaded ++;
    
                if ( scope.onProgress !== undefined ) {
    
                    scope.onProgress( url, itemsLoaded, itemsTotal );
    
                }
    
                if ( itemsLoaded === itemsTotal ) {
    
                    isLoading = false;
    
                    if ( scope.onLoad !== undefined ) {
    
                        scope.onLoad();
    
                    }
    
                }
    
            };
    
            this.itemError = function ( url ) {
    
                if ( scope.onError !== undefined ) {
    
                    scope.onError( url );
    
                }
    
            };
    
            this.resolveURL = function ( url ) {
    
                if ( urlModifier ) {
    
                    return urlModifier( url );
    
                }
    
                return url;
    
            };
    
            this.setURLModifier = function ( transform ) {
    
                urlModifier = transform;
                return this;
    
            };
    
        }
    
        var DefaultLoadingManager = new LoadingManager();
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        var loading = {};
    
        function FileLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
        }
    
        Object.assign( FileLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                if ( url === undefined ) url = '';
    
                if ( this.path !== undefined ) url = this.path + url;
    
                url = this.manager.resolveURL( url );
    
                var scope = this;
    
                var cached = Cache.get( url );
    
                if ( cached !== undefined ) {
    
                    scope.manager.itemStart( url );
    
                    setTimeout( function () {
    
                        if ( onLoad ) onLoad( cached );
    
                        scope.manager.itemEnd( url );
    
                    }, 0 );
    
                    return cached;
    
                }
    
                // Check if request is duplicate
    
                if ( loading[ url ] !== undefined ) {
    
                    loading[ url ].push( {
    
                        onLoad: onLoad,
                        onProgress: onProgress,
                        onError: onError
    
                    } );
    
                    return;
    
                }
    
                // Check for data: URI
                var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
                var dataUriRegexResult = url.match( dataUriRegex );
    
                // Safari can not handle Data URIs through XMLHttpRequest so process manually
                if ( dataUriRegexResult ) {
    
                    var mimeType = dataUriRegexResult[ 1 ];
                    var isBase64 = !! dataUriRegexResult[ 2 ];
                    var data = dataUriRegexResult[ 3 ];
    
                    data = decodeURIComponent( data );
    
                    if ( isBase64 ) data = atob( data );
    
                    try {
    
                        var response;
                        var responseType = ( this.responseType || '' ).toLowerCase();
    
                        switch ( responseType ) {
    
                            case 'arraybuffer':
                            case 'blob':
    
                                var view = new Uint8Array( data.length );
    
                                for ( var i = 0; i < data.length; i ++ ) {
    
                                    view[ i ] = data.charCodeAt( i );
    
                                }
    
                                if ( responseType === 'blob' ) {
    
                                    response = new Blob( [ view.buffer ], { type: mimeType } );
    
                                } else {
    
                                    response = view.buffer;
    
                                }
    
                                break;
    
                            case 'document':
    
                                var parser = new DOMParser();
                                response = parser.parseFromString( data, mimeType );
    
                                break;
    
                            case 'json':
    
                                response = JSON.parse( data );
    
                                break;
    
                            default: // 'text' or other
    
                                response = data;
    
                                break;
    
                        }
    
                        // Wait for next browser tick like standard XMLHttpRequest event dispatching does
                        setTimeout( function () {
    
                            if ( onLoad ) onLoad( response );
    
                            scope.manager.itemEnd( url );
    
                        }, 0 );
    
                    } catch ( error ) {
    
                        // Wait for next browser tick like standard XMLHttpRequest event dispatching does
                        setTimeout( function () {
    
                            if ( onError ) onError( error );
    
                            scope.manager.itemError( url );
                            scope.manager.itemEnd( url );
    
                        }, 0 );
    
                    }
    
                } else {
    
                    // Initialise array for duplicate requests
    
                    loading[ url ] = [];
    
                    loading[ url ].push( {
    
                        onLoad: onLoad,
                        onProgress: onProgress,
                        onError: onError
    
                    } );
    
                    var request = new XMLHttpRequest();
    
                    request.open( 'GET', url, true );
    
                    request.addEventListener( 'load', function ( event ) {
    
                        var response = this.response;
    
                        Cache.add( url, response );
    
                        var callbacks = loading[ url ];
    
                        delete loading[ url ];
    
                        if ( this.status === 200 || this.status === 0 ) {
    
                            // Some browsers return HTTP Status 0 when using non-http protocol
                            // e.g. 'file://' or 'data://'. Handle as success.
    
                            if ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );
    
                            for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
    
                                var callback = callbacks[ i ];
                                if ( callback.onLoad ) callback.onLoad( response );
    
                            }
    
                            scope.manager.itemEnd( url );
    
                        } else {
    
                            for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
    
                                var callback = callbacks[ i ];
                                if ( callback.onError ) callback.onError( event );
    
                            }
    
                            scope.manager.itemError( url );
                            scope.manager.itemEnd( url );
    
                        }
    
                    }, false );
    
                    request.addEventListener( 'progress', function ( event ) {
    
                        var callbacks = loading[ url ];
    
                        for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
    
                            var callback = callbacks[ i ];
                            if ( callback.onProgress ) callback.onProgress( event );
    
                        }
    
                    }, false );
    
                    request.addEventListener( 'error', function ( event ) {
    
                        var callbacks = loading[ url ];
    
                        delete loading[ url ];
    
                        for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
    
                            var callback = callbacks[ i ];
                            if ( callback.onError ) callback.onError( event );
    
                        }
    
                        scope.manager.itemError( url );
                        scope.manager.itemEnd( url );
    
                    }, false );
    
                    request.addEventListener( 'abort', function ( event ) {
    
                        var callbacks = loading[ url ];
    
                        delete loading[ url ];
    
                        for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
    
                            var callback = callbacks[ i ];
                            if ( callback.onError ) callback.onError( event );
    
                        }
    
                        scope.manager.itemError( url );
                        scope.manager.itemEnd( url );
    
                    }, false );
    
                    if ( this.responseType !== undefined ) request.responseType = this.responseType;
                    if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;
    
                    if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );
    
                    for ( var header in this.requestHeader ) {
    
                        request.setRequestHeader( header, this.requestHeader[ header ] );
    
                    }
    
                    request.send( null );
    
                }
    
                scope.manager.itemStart( url );
    
                return request;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            },
    
            setResponseType: function ( value ) {
    
                this.responseType = value;
                return this;
    
            },
    
            setWithCredentials: function ( value ) {
    
                this.withCredentials = value;
                return this;
    
            },
    
            setMimeType: function ( value ) {
    
                this.mimeType = value;
                return this;
    
            },
    
            setRequestHeader: function ( value ) {
    
                this.requestHeader = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author bhouston / http://clara.io/
         */
    
        function AnimationLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
        }
    
        Object.assign( AnimationLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var loader = new FileLoader( scope.manager );
                loader.setPath( scope.path );
                loader.load( url, function ( text ) {
    
                    onLoad( scope.parse( JSON.parse( text ) ) );
    
                }, onProgress, onError );
    
            },
    
            parse: function ( json ) {
    
                var animations = [];
    
                for ( var i = 0; i < json.length; i ++ ) {
    
                    var clip = AnimationClip.parse( json[ i ] );
    
                    animations.push( clip );
    
                }
    
                return animations;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         *
         * Abstract Base class to block based textures loader (dds, pvr, ...)
         */
    
        function CompressedTextureLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
            // override in sub classes
            this._parser = null;
    
        }
    
        Object.assign( CompressedTextureLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var images = [];
    
                var texture = new CompressedTexture();
                texture.image = images;
    
                var loader = new FileLoader( this.manager );
                loader.setPath( this.path );
                loader.setResponseType( 'arraybuffer' );
    
                function loadTexture( i ) {
    
                    loader.load( url[ i ], function ( buffer ) {
    
                        var texDatas = scope._parser( buffer, true );
    
                        images[ i ] = {
                            width: texDatas.width,
                            height: texDatas.height,
                            format: texDatas.format,
                            mipmaps: texDatas.mipmaps
                        };
    
                        loaded += 1;
    
                        if ( loaded === 6 ) {
    
                            if ( texDatas.mipmapCount === 1 )
                                texture.minFilter = LinearFilter;
    
                            texture.format = texDatas.format;
                            texture.needsUpdate = true;
    
                            if ( onLoad ) onLoad( texture );
    
                        }
    
                    }, onProgress, onError );
    
                }
    
                if ( Array.isArray( url ) ) {
    
                    var loaded = 0;
    
                    for ( var i = 0, il = url.length; i < il; ++ i ) {
    
                        loadTexture( i );
    
                    }
    
                } else {
    
                    // compressed cubemap texture stored in a single DDS file
    
                    loader.load( url, function ( buffer ) {
    
                        var texDatas = scope._parser( buffer, true );
    
                        if ( texDatas.isCubemap ) {
    
                            var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
    
                            for ( var f = 0; f < faces; f ++ ) {
    
                                images[ f ] = { mipmaps: [] };
    
                                for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {
    
                                    images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
                                    images[ f ].format = texDatas.format;
                                    images[ f ].width = texDatas.width;
                                    images[ f ].height = texDatas.height;
    
                                }
    
                            }
    
                        } else {
    
                            texture.image.width = texDatas.width;
                            texture.image.height = texDatas.height;
                            texture.mipmaps = texDatas.mipmaps;
    
                        }
    
                        if ( texDatas.mipmapCount === 1 ) {
    
                            texture.minFilter = LinearFilter;
    
                        }
    
                        texture.format = texDatas.format;
                        texture.needsUpdate = true;
    
                        if ( onLoad ) onLoad( texture );
    
                    }, onProgress, onError );
    
                }
    
                return texture;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author Nikos M. / https://github.com/foo123/
         *
         * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
         */
    
        function DataTextureLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
            // override in sub classes
            this._parser = null;
    
        }
    
        Object.assign( DataTextureLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var texture = new DataTexture();
    
                var loader = new FileLoader( this.manager );
                loader.setResponseType( 'arraybuffer' );
                loader.setPath( this.path );
                loader.load( url, function ( buffer ) {
    
                    var texData = scope._parser( buffer );
    
                    if ( ! texData ) return;
    
                    if ( texData.image !== undefined ) {
    
                        texture.image = texData.image;
    
                    } else if ( texData.data !== undefined ) {
    
                        texture.image.width = texData.width;
                        texture.image.height = texData.height;
                        texture.image.data = texData.data;
    
                    }
    
                    texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
                    texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
    
                    texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
                    texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearMipMapLinearFilter;
    
                    texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
    
                    if ( texData.format !== undefined ) {
    
                        texture.format = texData.format;
    
                    }
                    if ( texData.type !== undefined ) {
    
                        texture.type = texData.type;
    
                    }
    
                    if ( texData.mipmaps !== undefined ) {
    
                        texture.mipmaps = texData.mipmaps;
    
                    }
    
                    if ( texData.mipmapCount === 1 ) {
    
                        texture.minFilter = LinearFilter;
    
                    }
    
                    texture.needsUpdate = true;
    
                    if ( onLoad ) onLoad( texture, texData );
    
                }, onProgress, onError );
    
    
                return texture;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
    
        function ImageLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
        }
    
        Object.assign( ImageLoader.prototype, {
    
            crossOrigin: 'anonymous',
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                if ( url === undefined ) url = '';
    
                if ( this.path !== undefined ) url = this.path + url;
    
                url = this.manager.resolveURL( url );
    
                var scope = this;
    
                var cached = Cache.get( url );
    
                if ( cached !== undefined ) {
    
                    scope.manager.itemStart( url );
    
                    setTimeout( function () {
    
                        if ( onLoad ) onLoad( cached );
    
                        scope.manager.itemEnd( url );
    
                    }, 0 );
    
                    return cached;
    
                }
    
                var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
    
                function onImageLoad() {
    
                    image.removeEventListener( 'load', onImageLoad, false );
                    image.removeEventListener( 'error', onImageError, false );
    
                    Cache.add( url, this );
    
                    if ( onLoad ) onLoad( this );
    
                    scope.manager.itemEnd( url );
    
                }
    
                function onImageError( event ) {
    
                    image.removeEventListener( 'load', onImageLoad, false );
                    image.removeEventListener( 'error', onImageError, false );
    
                    if ( onError ) onError( event );
    
                    scope.manager.itemError( url );
                    scope.manager.itemEnd( url );
    
                }
    
                image.addEventListener( 'load', onImageLoad, false );
                image.addEventListener( 'error', onImageError, false );
    
                if ( url.substr( 0, 5 ) !== 'data:' ) {
    
                    if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;
    
                }
    
                scope.manager.itemStart( url );
    
                image.src = url;
    
                return image;
    
            },
    
            setCrossOrigin: function ( value ) {
    
                this.crossOrigin = value;
                return this;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
    
        function CubeTextureLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
        }
    
        Object.assign( CubeTextureLoader.prototype, {
    
            crossOrigin: 'anonymous',
    
            load: function ( urls, onLoad, onProgress, onError ) {
    
                var texture = new CubeTexture();
    
                var loader = new ImageLoader( this.manager );
                loader.setCrossOrigin( this.crossOrigin );
                loader.setPath( this.path );
    
                var loaded = 0;
    
                function loadTexture( i ) {
    
                    loader.load( urls[ i ], function ( image ) {
    
                        texture.images[ i ] = image;
    
                        loaded ++;
    
                        if ( loaded === 6 ) {
    
                            texture.needsUpdate = true;
    
                            if ( onLoad ) onLoad( texture );
    
                        }
    
                    }, undefined, onError );
    
                }
    
                for ( var i = 0; i < urls.length; ++ i ) {
    
                    loadTexture( i );
    
                }
    
                return texture;
    
            },
    
            setCrossOrigin: function ( value ) {
    
                this.crossOrigin = value;
                return this;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
    
        function TextureLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
        }
    
        Object.assign( TextureLoader.prototype, {
    
            crossOrigin: 'anonymous',
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var texture = new Texture();
    
                var loader = new ImageLoader( this.manager );
                loader.setCrossOrigin( this.crossOrigin );
                loader.setPath( this.path );
    
                loader.load( url, function ( image ) {
    
                    texture.image = image;
    
                    // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
                    var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;
    
                    texture.format = isJPEG ? RGBFormat : RGBAFormat;
                    texture.needsUpdate = true;
    
                    if ( onLoad !== undefined ) {
    
                        onLoad( texture );
    
                    }
    
                }, onProgress, onError );
    
                return texture;
    
            },
    
            setCrossOrigin: function ( value ) {
    
                this.crossOrigin = value;
                return this;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * Extensible curve object
         *
         * Some common of curve methods:
         * .getPoint( t, optionalTarget ), .getTangent( t )
         * .getPointAt( u, optionalTarget ), .getTangentAt( u )
         * .getPoints(), .getSpacedPoints()
         * .getLength()
         * .updateArcLengths()
         *
         * This following curves inherit from THREE.Curve:
         *
         * -- 2D curves --
         * THREE.ArcCurve
         * THREE.CubicBezierCurve
         * THREE.EllipseCurve
         * THREE.LineCurve
         * THREE.QuadraticBezierCurve
         * THREE.SplineCurve
         *
         * -- 3D curves --
         * THREE.CatmullRomCurve3
         * THREE.CubicBezierCurve3
         * THREE.LineCurve3
         * THREE.QuadraticBezierCurve3
         *
         * A series of curves can be represented as a THREE.CurvePath.
         *
         **/
    
        /**************************************************************
         *	Abstract Curve base class
         **************************************************************/
    
        function Curve() {
    
            this.type = 'Curve';
    
            this.arcLengthDivisions = 200;
    
        }
    
        Object.assign( Curve.prototype, {
    
            // Virtual base class method to overwrite and implement in subclasses
            //	- t [0 .. 1]
    
            getPoint: function ( /* t, optionalTarget */ ) {
    
                console.warn( 'THREE.Curve: .getPoint() not implemented.' );
                return null;
    
            },
    
            // Get point at relative position in curve according to arc length
            // - u [0 .. 1]
    
            getPointAt: function ( u, optionalTarget ) {
    
                var t = this.getUtoTmapping( u );
                return this.getPoint( t, optionalTarget );
    
            },
    
            // Get sequence of points using getPoint( t )
    
            getPoints: function ( divisions ) {
    
                if ( divisions === undefined ) divisions = 5;
    
                var points = [];
    
                for ( var d = 0; d <= divisions; d ++ ) {
    
                    points.push( this.getPoint( d / divisions ) );
    
                }
    
                return points;
    
            },
    
            // Get sequence of points using getPointAt( u )
    
            getSpacedPoints: function ( divisions ) {
    
                if ( divisions === undefined ) divisions = 5;
    
                var points = [];
    
                for ( var d = 0; d <= divisions; d ++ ) {
    
                    points.push( this.getPointAt( d / divisions ) );
    
                }
    
                return points;
    
            },
    
            // Get total curve arc length
    
            getLength: function () {
    
                var lengths = this.getLengths();
                return lengths[ lengths.length - 1 ];
    
            },
    
            // Get list of cumulative segment lengths
    
            getLengths: function ( divisions ) {
    
                if ( divisions === undefined ) divisions = this.arcLengthDivisions;
    
                if ( this.cacheArcLengths &&
                    ( this.cacheArcLengths.length === divisions + 1 ) &&
                    ! this.needsUpdate ) {
    
                    return this.cacheArcLengths;
    
                }
    
                this.needsUpdate = false;
    
                var cache = [];
                var current, last = this.getPoint( 0 );
                var p, sum = 0;
    
                cache.push( 0 );
    
                for ( p = 1; p <= divisions; p ++ ) {
    
                    current = this.getPoint( p / divisions );
                    sum += current.distanceTo( last );
                    cache.push( sum );
                    last = current;
    
                }
    
                this.cacheArcLengths = cache;
    
                return cache; // { sums: cache, sum: sum }; Sum is in the last element.
    
            },
    
            updateArcLengths: function () {
    
                this.needsUpdate = true;
                this.getLengths();
    
            },
    
            // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
    
            getUtoTmapping: function ( u, distance ) {
    
                var arcLengths = this.getLengths();
    
                var i = 0, il = arcLengths.length;
    
                var targetArcLength; // The targeted u distance value to get
    
                if ( distance ) {
    
                    targetArcLength = distance;
    
                } else {
    
                    targetArcLength = u * arcLengths[ il - 1 ];
    
                }
    
                // binary search for the index with largest value smaller than target u distance
    
                var low = 0, high = il - 1, comparison;
    
                while ( low <= high ) {
    
                    i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
    
                    comparison = arcLengths[ i ] - targetArcLength;
    
                    if ( comparison < 0 ) {
    
                        low = i + 1;
    
                    } else if ( comparison > 0 ) {
    
                        high = i - 1;
    
                    } else {
    
                        high = i;
                        break;
    
                        // DONE
    
                    }
    
                }
    
                i = high;
    
                if ( arcLengths[ i ] === targetArcLength ) {
    
                    return i / ( il - 1 );
    
                }
    
                // we could get finer grain at lengths, or use simple interpolation between two points
    
                var lengthBefore = arcLengths[ i ];
                var lengthAfter = arcLengths[ i + 1 ];
    
                var segmentLength = lengthAfter - lengthBefore;
    
                // determine where we are between the 'before' and 'after' points
    
                var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
    
                // add that fractional amount to t
    
                var t = ( i + segmentFraction ) / ( il - 1 );
    
                return t;
    
            },
    
            // Returns a unit vector tangent at t
            // In case any sub curve does not implement its tangent derivation,
            // 2 points a small delta apart will be used to find its gradient
            // which seems to give a reasonable approximation
    
            getTangent: function ( t ) {
    
                var delta = 0.0001;
                var t1 = t - delta;
                var t2 = t + delta;
    
                // Capping in case of danger
    
                if ( t1 < 0 ) t1 = 0;
                if ( t2 > 1 ) t2 = 1;
    
                var pt1 = this.getPoint( t1 );
                var pt2 = this.getPoint( t2 );
    
                var vec = pt2.clone().sub( pt1 );
                return vec.normalize();
    
            },
    
            getTangentAt: function ( u ) {
    
                var t = this.getUtoTmapping( u );
                return this.getTangent( t );
    
            },
    
            computeFrenetFrames: function ( segments, closed ) {
    
                // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
    
                var normal = new Vector3();
    
                var tangents = [];
                var normals = [];
                var binormals = [];
    
                var vec = new Vector3();
                var mat = new Matrix4();
    
                var i, u, theta;
    
                // compute the tangent vectors for each segment on the curve
    
                for ( i = 0; i <= segments; i ++ ) {
    
                    u = i / segments;
    
                    tangents[ i ] = this.getTangentAt( u );
                    tangents[ i ].normalize();
    
                }
    
                // select an initial normal vector perpendicular to the first tangent vector,
                // and in the direction of the minimum tangent xyz component
    
                normals[ 0 ] = new Vector3();
                binormals[ 0 ] = new Vector3();
                var min = Number.MAX_VALUE;
                var tx = Math.abs( tangents[ 0 ].x );
                var ty = Math.abs( tangents[ 0 ].y );
                var tz = Math.abs( tangents[ 0 ].z );
    
                if ( tx <= min ) {
    
                    min = tx;
                    normal.set( 1, 0, 0 );
    
                }
    
                if ( ty <= min ) {
    
                    min = ty;
                    normal.set( 0, 1, 0 );
    
                }
    
                if ( tz <= min ) {
    
                    normal.set( 0, 0, 1 );
    
                }
    
                vec.crossVectors( tangents[ 0 ], normal ).normalize();
    
                normals[ 0 ].crossVectors( tangents[ 0 ], vec );
                binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
    
    
                // compute the slowly-varying normal and binormal vectors for each segment on the curve
    
                for ( i = 1; i <= segments; i ++ ) {
    
                    normals[ i ] = normals[ i - 1 ].clone();
    
                    binormals[ i ] = binormals[ i - 1 ].clone();
    
                    vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
    
                    if ( vec.length() > Number.EPSILON ) {
    
                        vec.normalize();
    
                        theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
    
                        normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
    
                    }
    
                    binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
    
                }
    
                // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
    
                if ( closed === true ) {
    
                    theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
                    theta /= segments;
    
                    if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {
    
                        theta = - theta;
    
                    }
    
                    for ( i = 1; i <= segments; i ++ ) {
    
                        // twist a little...
                        normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
                        binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
    
                    }
    
                }
    
                return {
                    tangents: tangents,
                    normals: normals,
                    binormals: binormals
                };
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( source ) {
    
                this.arcLengthDivisions = source.arcLengthDivisions;
    
                return this;
    
            },
    
            toJSON: function () {
    
                var data = {
                    metadata: {
                        version: 4.5,
                        type: 'Curve',
                        generator: 'Curve.toJSON'
                    }
                };
    
                data.arcLengthDivisions = this.arcLengthDivisions;
                data.type = this.type;
    
                return data;
    
            },
    
            fromJSON: function ( json ) {
    
                this.arcLengthDivisions = json.arcLengthDivisions;
    
                return this;
    
            }
    
        } );
    
        function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
    
            Curve.call( this );
    
            this.type = 'EllipseCurve';
    
            this.aX = aX || 0;
            this.aY = aY || 0;
    
            this.xRadius = xRadius || 1;
            this.yRadius = yRadius || 1;
    
            this.aStartAngle = aStartAngle || 0;
            this.aEndAngle = aEndAngle || 2 * Math.PI;
    
            this.aClockwise = aClockwise || false;
    
            this.aRotation = aRotation || 0;
    
        }
    
        EllipseCurve.prototype = Object.create( Curve.prototype );
        EllipseCurve.prototype.constructor = EllipseCurve;
    
        EllipseCurve.prototype.isEllipseCurve = true;
    
        EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector2();
    
            var twoPi = Math.PI * 2;
            var deltaAngle = this.aEndAngle - this.aStartAngle;
            var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;
    
            // ensures that deltaAngle is 0 .. 2 PI
            while ( deltaAngle < 0 ) deltaAngle += twoPi;
            while ( deltaAngle > twoPi ) deltaAngle -= twoPi;
    
            if ( deltaAngle < Number.EPSILON ) {
    
                if ( samePoints ) {
    
                    deltaAngle = 0;
    
                } else {
    
                    deltaAngle = twoPi;
    
                }
    
            }
    
            if ( this.aClockwise === true && ! samePoints ) {
    
                if ( deltaAngle === twoPi ) {
    
                    deltaAngle = - twoPi;
    
                } else {
    
                    deltaAngle = deltaAngle - twoPi;
    
                }
    
            }
    
            var angle = this.aStartAngle + t * deltaAngle;
            var x = this.aX + this.xRadius * Math.cos( angle );
            var y = this.aY + this.yRadius * Math.sin( angle );
    
            if ( this.aRotation !== 0 ) {
    
                var cos = Math.cos( this.aRotation );
                var sin = Math.sin( this.aRotation );
    
                var tx = x - this.aX;
                var ty = y - this.aY;
    
                // Rotate the point about the center of the ellipse.
                x = tx * cos - ty * sin + this.aX;
                y = tx * sin + ty * cos + this.aY;
    
            }
    
            return point.set( x, y );
    
        };
    
        EllipseCurve.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.aX = source.aX;
            this.aY = source.aY;
    
            this.xRadius = source.xRadius;
            this.yRadius = source.yRadius;
    
            this.aStartAngle = source.aStartAngle;
            this.aEndAngle = source.aEndAngle;
    
            this.aClockwise = source.aClockwise;
    
            this.aRotation = source.aRotation;
    
            return this;
    
        };
    
    
        EllipseCurve.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.aX = this.aX;
            data.aY = this.aY;
    
            data.xRadius = this.xRadius;
            data.yRadius = this.yRadius;
    
            data.aStartAngle = this.aStartAngle;
            data.aEndAngle = this.aEndAngle;
    
            data.aClockwise = this.aClockwise;
    
            data.aRotation = this.aRotation;
    
            return data;
    
        };
    
        EllipseCurve.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.aX = json.aX;
            this.aY = json.aY;
    
            this.xRadius = json.xRadius;
            this.yRadius = json.yRadius;
    
            this.aStartAngle = json.aStartAngle;
            this.aEndAngle = json.aEndAngle;
    
            this.aClockwise = json.aClockwise;
    
            this.aRotation = json.aRotation;
    
            return this;
    
        };
    
        function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
    
            EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
    
            this.type = 'ArcCurve';
    
        }
    
        ArcCurve.prototype = Object.create( EllipseCurve.prototype );
        ArcCurve.prototype.constructor = ArcCurve;
    
        ArcCurve.prototype.isArcCurve = true;
    
        /**
         * @author zz85 https://github.com/zz85
         *
         * Centripetal CatmullRom Curve - which is useful for avoiding
         * cusps and self-intersections in non-uniform catmull rom curves.
         * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
         *
         * curve.type accepts centripetal(default), chordal and catmullrom
         * curve.tension is used for catmullrom which defaults to 0.5
         */
    
    
        /*
        Based on an optimized c++ solution in
         - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
         - http://ideone.com/NoEbVM
    
        This CubicPoly class could be used for reusing some variables and calculations,
        but for three.js curve use, it could be possible inlined and flatten into a single function call
        which can be placed in CurveUtils.
        */
    
        function CubicPoly() {
    
            var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    
            /*
             * Compute coefficients for a cubic polynomial
             *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
             * such that
             *   p(0) = x0, p(1) = x1
             *  and
             *   p'(0) = t0, p'(1) = t1.
             */
            function init( x0, x1, t0, t1 ) {
    
                c0 = x0;
                c1 = t0;
                c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
                c3 = 2 * x0 - 2 * x1 + t0 + t1;
    
            }
    
            return {
    
                initCatmullRom: function ( x0, x1, x2, x3, tension ) {
    
                    init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
    
                },
    
                initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {
    
                    // compute tangents when parameterized in [t1,t2]
                    var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
                    var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
    
                    // rescale tangents for parametrization in [0,1]
                    t1 *= dt1;
                    t2 *= dt1;
    
                    init( x1, x2, t1, t2 );
    
                },
    
                calc: function ( t ) {
    
                    var t2 = t * t;
                    var t3 = t2 * t;
                    return c0 + c1 * t + c2 * t2 + c3 * t3;
    
                }
    
            };
    
        }
    
        //
    
        var tmp = new Vector3();
        var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();
    
        function CatmullRomCurve3( points, closed, curveType, tension ) {
    
            Curve.call( this );
    
            this.type = 'CatmullRomCurve3';
    
            this.points = points || [];
            this.closed = closed || false;
            this.curveType = curveType || 'centripetal';
            this.tension = tension || 0.5;
    
        }
    
        CatmullRomCurve3.prototype = Object.create( Curve.prototype );
        CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
    
        CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
    
        CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector3();
    
            var points = this.points;
            var l = points.length;
    
            var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
            var intPoint = Math.floor( p );
            var weight = p - intPoint;
    
            if ( this.closed ) {
    
                intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;
    
            } else if ( weight === 0 && intPoint === l - 1 ) {
    
                intPoint = l - 2;
                weight = 1;
    
            }
    
            var p0, p1, p2, p3; // 4 points
    
            if ( this.closed || intPoint > 0 ) {
    
                p0 = points[ ( intPoint - 1 ) % l ];
    
            } else {
    
                // extrapolate first point
                tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
                p0 = tmp;
    
            }
    
            p1 = points[ intPoint % l ];
            p2 = points[ ( intPoint + 1 ) % l ];
    
            if ( this.closed || intPoint + 2 < l ) {
    
                p3 = points[ ( intPoint + 2 ) % l ];
    
            } else {
    
                // extrapolate last point
                tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
                p3 = tmp;
    
            }
    
            if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {
    
                // init Centripetal / Chordal Catmull-Rom
                var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
                var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
                var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
                var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
    
                // safety check for repeated points
                if ( dt1 < 1e-4 ) dt1 = 1.0;
                if ( dt0 < 1e-4 ) dt0 = dt1;
                if ( dt2 < 1e-4 ) dt2 = dt1;
    
                px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
                py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
                pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
    
            } else if ( this.curveType === 'catmullrom' ) {
    
                px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
                py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
                pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );
    
            }
    
            point.set(
                px.calc( weight ),
                py.calc( weight ),
                pz.calc( weight )
            );
    
            return point;
    
        };
    
        CatmullRomCurve3.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.points = [];
    
            for ( var i = 0, l = source.points.length; i < l; i ++ ) {
    
                var point = source.points[ i ];
    
                this.points.push( point.clone() );
    
            }
    
            this.closed = source.closed;
            this.curveType = source.curveType;
            this.tension = source.tension;
    
            return this;
    
        };
    
        CatmullRomCurve3.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.points = [];
    
            for ( var i = 0, l = this.points.length; i < l; i ++ ) {
    
                var point = this.points[ i ];
                data.points.push( point.toArray() );
    
            }
    
            data.closed = this.closed;
            data.curveType = this.curveType;
            data.tension = this.tension;
    
            return data;
    
        };
    
        CatmullRomCurve3.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.points = [];
    
            for ( var i = 0, l = json.points.length; i < l; i ++ ) {
    
                var point = json.points[ i ];
                this.points.push( new Vector3().fromArray( point ) );
    
            }
    
            this.closed = json.closed;
            this.curveType = json.curveType;
            this.tension = json.tension;
    
            return this;
    
        };
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         *
         * Bezier Curves formulas obtained from
         * http://en.wikipedia.org/wiki/Bézier_curve
         */
    
        function CatmullRom( t, p0, p1, p2, p3 ) {
    
            var v0 = ( p2 - p0 ) * 0.5;
            var v1 = ( p3 - p1 ) * 0.5;
            var t2 = t * t;
            var t3 = t * t2;
            return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
    
        }
    
        //
    
        function QuadraticBezierP0( t, p ) {
    
            var k = 1 - t;
            return k * k * p;
    
        }
    
        function QuadraticBezierP1( t, p ) {
    
            return 2 * ( 1 - t ) * t * p;
    
        }
    
        function QuadraticBezierP2( t, p ) {
    
            return t * t * p;
    
        }
    
        function QuadraticBezier( t, p0, p1, p2 ) {
    
            return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
                QuadraticBezierP2( t, p2 );
    
        }
    
        //
    
        function CubicBezierP0( t, p ) {
    
            var k = 1 - t;
            return k * k * k * p;
    
        }
    
        function CubicBezierP1( t, p ) {
    
            var k = 1 - t;
            return 3 * k * k * t * p;
    
        }
    
        function CubicBezierP2( t, p ) {
    
            return 3 * ( 1 - t ) * t * t * p;
    
        }
    
        function CubicBezierP3( t, p ) {
    
            return t * t * t * p;
    
        }
    
        function CubicBezier( t, p0, p1, p2, p3 ) {
    
            return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
                CubicBezierP3( t, p3 );
    
        }
    
        function CubicBezierCurve( v0, v1, v2, v3 ) {
    
            Curve.call( this );
    
            this.type = 'CubicBezierCurve';
    
            this.v0 = v0 || new Vector2();
            this.v1 = v1 || new Vector2();
            this.v2 = v2 || new Vector2();
            this.v3 = v3 || new Vector2();
    
        }
    
        CubicBezierCurve.prototype = Object.create( Curve.prototype );
        CubicBezierCurve.prototype.constructor = CubicBezierCurve;
    
        CubicBezierCurve.prototype.isCubicBezierCurve = true;
    
        CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector2();
    
            var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
    
            point.set(
                CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
                CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
            );
    
            return point;
    
        };
    
        CubicBezierCurve.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.v0.copy( source.v0 );
            this.v1.copy( source.v1 );
            this.v2.copy( source.v2 );
            this.v3.copy( source.v3 );
    
            return this;
    
        };
    
        CubicBezierCurve.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.v0 = this.v0.toArray();
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
            data.v3 = this.v3.toArray();
    
            return data;
    
        };
    
        CubicBezierCurve.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.v0.fromArray( json.v0 );
            this.v1.fromArray( json.v1 );
            this.v2.fromArray( json.v2 );
            this.v3.fromArray( json.v3 );
    
            return this;
    
        };
    
        function CubicBezierCurve3( v0, v1, v2, v3 ) {
    
            Curve.call( this );
    
            this.type = 'CubicBezierCurve3';
    
            this.v0 = v0 || new Vector3();
            this.v1 = v1 || new Vector3();
            this.v2 = v2 || new Vector3();
            this.v3 = v3 || new Vector3();
    
        }
    
        CubicBezierCurve3.prototype = Object.create( Curve.prototype );
        CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
    
        CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
    
        CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector3();
    
            var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
    
            point.set(
                CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
                CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
                CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
            );
    
            return point;
    
        };
    
        CubicBezierCurve3.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.v0.copy( source.v0 );
            this.v1.copy( source.v1 );
            this.v2.copy( source.v2 );
            this.v3.copy( source.v3 );
    
            return this;
    
        };
    
        CubicBezierCurve3.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.v0 = this.v0.toArray();
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
            data.v3 = this.v3.toArray();
    
            return data;
    
        };
    
        CubicBezierCurve3.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.v0.fromArray( json.v0 );
            this.v1.fromArray( json.v1 );
            this.v2.fromArray( json.v2 );
            this.v3.fromArray( json.v3 );
    
            return this;
    
        };
    
        function LineCurve( v1, v2 ) {
    
            Curve.call( this );
    
            this.type = 'LineCurve';
    
            this.v1 = v1 || new Vector2();
            this.v2 = v2 || new Vector2();
    
        }
    
        LineCurve.prototype = Object.create( Curve.prototype );
        LineCurve.prototype.constructor = LineCurve;
    
        LineCurve.prototype.isLineCurve = true;
    
        LineCurve.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector2();
    
            if ( t === 1 ) {
    
                point.copy( this.v2 );
    
            } else {
    
                point.copy( this.v2 ).sub( this.v1 );
                point.multiplyScalar( t ).add( this.v1 );
    
            }
    
            return point;
    
        };
    
        // Line curve is linear, so we can overwrite default getPointAt
    
        LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {
    
            return this.getPoint( u, optionalTarget );
    
        };
    
        LineCurve.prototype.getTangent = function ( /* t */ ) {
    
            var tangent = this.v2.clone().sub( this.v1 );
    
            return tangent.normalize();
    
        };
    
        LineCurve.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.v1.copy( source.v1 );
            this.v2.copy( source.v2 );
    
            return this;
    
        };
    
        LineCurve.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
    
            return data;
    
        };
    
        LineCurve.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.v1.fromArray( json.v1 );
            this.v2.fromArray( json.v2 );
    
            return this;
    
        };
    
        function LineCurve3( v1, v2 ) {
    
            Curve.call( this );
    
            this.type = 'LineCurve3';
    
            this.v1 = v1 || new Vector3();
            this.v2 = v2 || new Vector3();
    
        }
    
        LineCurve3.prototype = Object.create( Curve.prototype );
        LineCurve3.prototype.constructor = LineCurve3;
    
        LineCurve3.prototype.isLineCurve3 = true;
    
        LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector3();
    
            if ( t === 1 ) {
    
                point.copy( this.v2 );
    
            } else {
    
                point.copy( this.v2 ).sub( this.v1 );
                point.multiplyScalar( t ).add( this.v1 );
    
            }
    
            return point;
    
        };
    
        // Line curve is linear, so we can overwrite default getPointAt
    
        LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {
    
            return this.getPoint( u, optionalTarget );
    
        };
    
        LineCurve3.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.v1.copy( source.v1 );
            this.v2.copy( source.v2 );
    
            return this;
    
        };
    
        LineCurve3.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
    
            return data;
    
        };
    
        LineCurve3.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.v1.fromArray( json.v1 );
            this.v2.fromArray( json.v2 );
    
            return this;
    
        };
    
        function QuadraticBezierCurve( v0, v1, v2 ) {
    
            Curve.call( this );
    
            this.type = 'QuadraticBezierCurve';
    
            this.v0 = v0 || new Vector2();
            this.v1 = v1 || new Vector2();
            this.v2 = v2 || new Vector2();
    
        }
    
        QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
        QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
    
        QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
    
        QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector2();
    
            var v0 = this.v0, v1 = this.v1, v2 = this.v2;
    
            point.set(
                QuadraticBezier( t, v0.x, v1.x, v2.x ),
                QuadraticBezier( t, v0.y, v1.y, v2.y )
            );
    
            return point;
    
        };
    
        QuadraticBezierCurve.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.v0.copy( source.v0 );
            this.v1.copy( source.v1 );
            this.v2.copy( source.v2 );
    
            return this;
    
        };
    
        QuadraticBezierCurve.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.v0 = this.v0.toArray();
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
    
            return data;
    
        };
    
        QuadraticBezierCurve.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.v0.fromArray( json.v0 );
            this.v1.fromArray( json.v1 );
            this.v2.fromArray( json.v2 );
    
            return this;
    
        };
    
        function QuadraticBezierCurve3( v0, v1, v2 ) {
    
            Curve.call( this );
    
            this.type = 'QuadraticBezierCurve3';
    
            this.v0 = v0 || new Vector3();
            this.v1 = v1 || new Vector3();
            this.v2 = v2 || new Vector3();
    
        }
    
        QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
        QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
    
        QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
    
        QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector3();
    
            var v0 = this.v0, v1 = this.v1, v2 = this.v2;
    
            point.set(
                QuadraticBezier( t, v0.x, v1.x, v2.x ),
                QuadraticBezier( t, v0.y, v1.y, v2.y ),
                QuadraticBezier( t, v0.z, v1.z, v2.z )
            );
    
            return point;
    
        };
    
        QuadraticBezierCurve3.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.v0.copy( source.v0 );
            this.v1.copy( source.v1 );
            this.v2.copy( source.v2 );
    
            return this;
    
        };
    
        QuadraticBezierCurve3.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.v0 = this.v0.toArray();
            data.v1 = this.v1.toArray();
            data.v2 = this.v2.toArray();
    
            return data;
    
        };
    
        QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.v0.fromArray( json.v0 );
            this.v1.fromArray( json.v1 );
            this.v2.fromArray( json.v2 );
    
            return this;
    
        };
    
        function SplineCurve( points /* array of Vector2 */ ) {
    
            Curve.call( this );
    
            this.type = 'SplineCurve';
    
            this.points = points || [];
    
        }
    
        SplineCurve.prototype = Object.create( Curve.prototype );
        SplineCurve.prototype.constructor = SplineCurve;
    
        SplineCurve.prototype.isSplineCurve = true;
    
        SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {
    
            var point = optionalTarget || new Vector2();
    
            var points = this.points;
            var p = ( points.length - 1 ) * t;
    
            var intPoint = Math.floor( p );
            var weight = p - intPoint;
    
            var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
            var p1 = points[ intPoint ];
            var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
            var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
    
            point.set(
                CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
                CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
            );
    
            return point;
    
        };
    
        SplineCurve.prototype.copy = function ( source ) {
    
            Curve.prototype.copy.call( this, source );
    
            this.points = [];
    
            for ( var i = 0, l = source.points.length; i < l; i ++ ) {
    
                var point = source.points[ i ];
    
                this.points.push( point.clone() );
    
            }
    
            return this;
    
        };
    
        SplineCurve.prototype.toJSON = function () {
    
            var data = Curve.prototype.toJSON.call( this );
    
            data.points = [];
    
            for ( var i = 0, l = this.points.length; i < l; i ++ ) {
    
                var point = this.points[ i ];
                data.points.push( point.toArray() );
    
            }
    
            return data;
    
        };
    
        SplineCurve.prototype.fromJSON = function ( json ) {
    
            Curve.prototype.fromJSON.call( this, json );
    
            this.points = [];
    
            for ( var i = 0, l = json.points.length; i < l; i ++ ) {
    
                var point = json.points[ i ];
                this.points.push( new Vector2().fromArray( point ) );
    
            }
    
            return this;
    
        };
    
    
    
        var Curves = /*#__PURE__*/Object.freeze({
            ArcCurve: ArcCurve,
            CatmullRomCurve3: CatmullRomCurve3,
            CubicBezierCurve: CubicBezierCurve,
            CubicBezierCurve3: CubicBezierCurve3,
            EllipseCurve: EllipseCurve,
            LineCurve: LineCurve,
            LineCurve3: LineCurve3,
            QuadraticBezierCurve: QuadraticBezierCurve,
            QuadraticBezierCurve3: QuadraticBezierCurve3,
            SplineCurve: SplineCurve
        });
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         *
         **/
    
        /**************************************************************
         *	Curved Path - a curve path is simply a array of connected
         *  curves, but retains the api of a curve
         **************************************************************/
    
        function CurvePath() {
    
            Curve.call( this );
    
            this.type = 'CurvePath';
    
            this.curves = [];
            this.autoClose = false; // Automatically closes the path
    
        }
    
        CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {
    
            constructor: CurvePath,
    
            add: function ( curve ) {
    
                this.curves.push( curve );
    
            },
    
            closePath: function () {
    
                // Add a line curve if start and end of lines are not connected
                var startPoint = this.curves[ 0 ].getPoint( 0 );
                var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
    
                if ( ! startPoint.equals( endPoint ) ) {
    
                    this.curves.push( new LineCurve( endPoint, startPoint ) );
    
                }
    
            },
    
            // To get accurate point with reference to
            // entire path distance at time t,
            // following has to be done:
    
            // 1. Length of each sub path have to be known
            // 2. Locate and identify type of curve
            // 3. Get t for the curve
            // 4. Return curve.getPointAt(t')
    
            getPoint: function ( t ) {
    
                var d = t * this.getLength();
                var curveLengths = this.getCurveLengths();
                var i = 0;
    
                // To think about boundaries points.
    
                while ( i < curveLengths.length ) {
    
                    if ( curveLengths[ i ] >= d ) {
    
                        var diff = curveLengths[ i ] - d;
                        var curve = this.curves[ i ];
    
                        var segmentLength = curve.getLength();
                        var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
    
                        return curve.getPointAt( u );
    
                    }
    
                    i ++;
    
                }
    
                return null;
    
                // loop where sum != 0, sum > d , sum+1 <d
    
            },
    
            // We cannot use the default THREE.Curve getPoint() with getLength() because in
            // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
            // getPoint() depends on getLength
    
            getLength: function () {
    
                var lens = this.getCurveLengths();
                return lens[ lens.length - 1 ];
    
            },
    
            // cacheLengths must be recalculated.
            updateArcLengths: function () {
    
                this.needsUpdate = true;
                this.cacheLengths = null;
                this.getCurveLengths();
    
            },
    
            // Compute lengths and cache them
            // We cannot overwrite getLengths() because UtoT mapping uses it.
    
            getCurveLengths: function () {
    
                // We use cache values if curves and cache array are same length
    
                if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
    
                    return this.cacheLengths;
    
                }
    
                // Get length of sub-curve
                // Push sums into cached array
    
                var lengths = [], sums = 0;
    
                for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
    
                    sums += this.curves[ i ].getLength();
                    lengths.push( sums );
    
                }
    
                this.cacheLengths = lengths;
    
                return lengths;
    
            },
    
            getSpacedPoints: function ( divisions ) {
    
                if ( divisions === undefined ) divisions = 40;
    
                var points = [];
    
                for ( var i = 0; i <= divisions; i ++ ) {
    
                    points.push( this.getPoint( i / divisions ) );
    
                }
    
                if ( this.autoClose ) {
    
                    points.push( points[ 0 ] );
    
                }
    
                return points;
    
            },
    
            getPoints: function ( divisions ) {
    
                divisions = divisions || 12;
    
                var points = [], last;
    
                for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {
    
                    var curve = curves[ i ];
                    var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
                        : ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
                            : ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
                                : divisions;
    
                    var pts = curve.getPoints( resolution );
    
                    for ( var j = 0; j < pts.length; j ++ ) {
    
                        var point = pts[ j ];
    
                        if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates
    
                        points.push( point );
                        last = point;
    
                    }
    
                }
    
                if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {
    
                    points.push( points[ 0 ] );
    
                }
    
                return points;
    
            },
    
            copy: function ( source ) {
    
                Curve.prototype.copy.call( this, source );
    
                this.curves = [];
    
                for ( var i = 0, l = source.curves.length; i < l; i ++ ) {
    
                    var curve = source.curves[ i ];
    
                    this.curves.push( curve.clone() );
    
                }
    
                this.autoClose = source.autoClose;
    
                return this;
    
            },
    
            toJSON: function () {
    
                var data = Curve.prototype.toJSON.call( this );
    
                data.autoClose = this.autoClose;
                data.curves = [];
    
                for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
    
                    var curve = this.curves[ i ];
                    data.curves.push( curve.toJSON() );
    
                }
    
                return data;
    
            },
    
            fromJSON: function ( json ) {
    
                Curve.prototype.fromJSON.call( this, json );
    
                this.autoClose = json.autoClose;
                this.curves = [];
    
                for ( var i = 0, l = json.curves.length; i < l; i ++ ) {
    
                    var curve = json.curves[ i ];
                    this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );
    
                }
    
                return this;
    
            }
    
        } );
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * Creates free form 2d path using series of points, lines or curves.
         **/
    
        function Path( points ) {
    
            CurvePath.call( this );
    
            this.type = 'Path';
    
            this.currentPoint = new Vector2();
    
            if ( points ) {
    
                this.setFromPoints( points );
    
            }
    
        }
    
        Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {
    
            constructor: Path,
    
            setFromPoints: function ( points ) {
    
                this.moveTo( points[ 0 ].x, points[ 0 ].y );
    
                for ( var i = 1, l = points.length; i < l; i ++ ) {
    
                    this.lineTo( points[ i ].x, points[ i ].y );
    
                }
    
            },
    
            moveTo: function ( x, y ) {
    
                this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?
    
            },
    
            lineTo: function ( x, y ) {
    
                var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
                this.curves.push( curve );
    
                this.currentPoint.set( x, y );
    
            },
    
            quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
    
                var curve = new QuadraticBezierCurve(
                    this.currentPoint.clone(),
                    new Vector2( aCPx, aCPy ),
                    new Vector2( aX, aY )
                );
    
                this.curves.push( curve );
    
                this.currentPoint.set( aX, aY );
    
            },
    
            bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
    
                var curve = new CubicBezierCurve(
                    this.currentPoint.clone(),
                    new Vector2( aCP1x, aCP1y ),
                    new Vector2( aCP2x, aCP2y ),
                    new Vector2( aX, aY )
                );
    
                this.curves.push( curve );
    
                this.currentPoint.set( aX, aY );
    
            },
    
            splineThru: function ( pts /*Array of Vector*/ ) {
    
                var npts = [ this.currentPoint.clone() ].concat( pts );
    
                var curve = new SplineCurve( npts );
                this.curves.push( curve );
    
                this.currentPoint.copy( pts[ pts.length - 1 ] );
    
            },
    
            arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
    
                var x0 = this.currentPoint.x;
                var y0 = this.currentPoint.y;
    
                this.absarc( aX + x0, aY + y0, aRadius,
                    aStartAngle, aEndAngle, aClockwise );
    
            },
    
            absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
    
                this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
    
            },
    
            ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
    
                var x0 = this.currentPoint.x;
                var y0 = this.currentPoint.y;
    
                this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
    
            },
    
            absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
    
                var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
    
                if ( this.curves.length > 0 ) {
    
                    // if a previous curve is present, attempt to join
                    var firstPoint = curve.getPoint( 0 );
    
                    if ( ! firstPoint.equals( this.currentPoint ) ) {
    
                        this.lineTo( firstPoint.x, firstPoint.y );
    
                    }
    
                }
    
                this.curves.push( curve );
    
                var lastPoint = curve.getPoint( 1 );
                this.currentPoint.copy( lastPoint );
    
            },
    
            copy: function ( source ) {
    
                CurvePath.prototype.copy.call( this, source );
    
                this.currentPoint.copy( source.currentPoint );
    
                return this;
    
            },
    
            toJSON: function () {
    
                var data = CurvePath.prototype.toJSON.call( this );
    
                data.currentPoint = this.currentPoint.toArray();
    
                return data;
    
            },
    
            fromJSON: function ( json ) {
    
                CurvePath.prototype.fromJSON.call( this, json );
    
                this.currentPoint.fromArray( json.currentPoint );
    
                return this;
    
            }
    
        } );
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * Defines a 2d shape plane using paths.
         **/
    
        // STEP 1 Create a path.
        // STEP 2 Turn path into shape.
        // STEP 3 ExtrudeGeometry takes in Shape/Shapes
        // STEP 3a - Extract points from each shape, turn to vertices
        // STEP 3b - Triangulate each shape, add faces.
    
        function Shape( points ) {
    
            Path.call( this, points );
    
            this.uuid = _Math.generateUUID();
    
            this.type = 'Shape';
    
            this.holes = [];
    
        }
    
        Shape.prototype = Object.assign( Object.create( Path.prototype ), {
    
            constructor: Shape,
    
            getPointsHoles: function ( divisions ) {
    
                var holesPts = [];
    
                for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
    
                    holesPts[ i ] = this.holes[ i ].getPoints( divisions );
    
                }
    
                return holesPts;
    
            },
    
            // get points of shape and holes (keypoints based on segments parameter)
    
            extractPoints: function ( divisions ) {
    
                return {
    
                    shape: this.getPoints( divisions ),
                    holes: this.getPointsHoles( divisions )
    
                };
    
            },
    
            copy: function ( source ) {
    
                Path.prototype.copy.call( this, source );
    
                this.holes = [];
    
                for ( var i = 0, l = source.holes.length; i < l; i ++ ) {
    
                    var hole = source.holes[ i ];
    
                    this.holes.push( hole.clone() );
    
                }
    
                return this;
    
            },
    
            toJSON: function () {
    
                var data = Path.prototype.toJSON.call( this );
    
                data.uuid = this.uuid;
                data.holes = [];
    
                for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
    
                    var hole = this.holes[ i ];
                    data.holes.push( hole.toJSON() );
    
                }
    
                return data;
    
            },
    
            fromJSON: function ( json ) {
    
                Path.prototype.fromJSON.call( this, json );
    
                this.uuid = json.uuid;
                this.holes = [];
    
                for ( var i = 0, l = json.holes.length; i < l; i ++ ) {
    
                    var hole = json.holes[ i ];
                    this.holes.push( new Path().fromJSON( hole ) );
    
                }
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */
    
        function Light( color, intensity ) {
    
            Object3D.call( this );
    
            this.type = 'Light';
    
            this.color = new Color( color );
            this.intensity = intensity !== undefined ? intensity : 1;
    
            this.receiveShadow = undefined;
    
        }
    
        Light.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Light,
    
            isLight: true,
    
            copy: function ( source ) {
    
                Object3D.prototype.copy.call( this, source );
    
                this.color.copy( source.color );
                this.intensity = source.intensity;
    
                return this;
    
            },
    
            toJSON: function ( meta ) {
    
                var data = Object3D.prototype.toJSON.call( this, meta );
    
                data.object.color = this.color.getHex();
                data.object.intensity = this.intensity;
    
                if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();
    
                if ( this.distance !== undefined ) data.object.distance = this.distance;
                if ( this.angle !== undefined ) data.object.angle = this.angle;
                if ( this.decay !== undefined ) data.object.decay = this.decay;
                if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;
    
                if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
    
                return data;
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         */
    
        function HemisphereLight( skyColor, groundColor, intensity ) {
    
            Light.call( this, skyColor, intensity );
    
            this.type = 'HemisphereLight';
    
            this.castShadow = undefined;
    
            this.position.copy( Object3D.DefaultUp );
            this.updateMatrix();
    
            this.groundColor = new Color( groundColor );
    
        }
    
        HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {
    
            constructor: HemisphereLight,
    
            isHemisphereLight: true,
    
            copy: function ( source ) {
    
                Light.prototype.copy.call( this, source );
    
                this.groundColor.copy( source.groundColor );
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function LightShadow( camera ) {
    
            this.camera = camera;
    
            this.bias = 0;
            this.radius = 1;
    
            this.mapSize = new Vector2( 512, 512 );
    
            this.map = null;
            this.matrix = new Matrix4();
    
        }
    
        Object.assign( LightShadow.prototype, {
    
            copy: function ( source ) {
    
                this.camera = source.camera.clone();
    
                this.bias = source.bias;
                this.radius = source.radius;
    
                this.mapSize.copy( source.mapSize );
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            toJSON: function () {
    
                var object = {};
    
                if ( this.bias !== 0 ) object.bias = this.bias;
                if ( this.radius !== 1 ) object.radius = this.radius;
                if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();
    
                object.camera = this.camera.toJSON( false ).object;
                delete object.camera.matrix;
    
                return object;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function SpotLightShadow() {
    
            LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );
    
        }
    
        SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
    
            constructor: SpotLightShadow,
    
            isSpotLightShadow: true,
    
            update: function ( light ) {
    
                var camera = this.camera;
    
                var fov = _Math.RAD2DEG * 2 * light.angle;
                var aspect = this.mapSize.width / this.mapSize.height;
                var far = light.distance || camera.far;
    
                if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {
    
                    camera.fov = fov;
                    camera.aspect = aspect;
                    camera.far = far;
                    camera.updateProjectionMatrix();
    
                }
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         */
    
        function SpotLight( color, intensity, distance, angle, penumbra, decay ) {
    
            Light.call( this, color, intensity );
    
            this.type = 'SpotLight';
    
            this.position.copy( Object3D.DefaultUp );
            this.updateMatrix();
    
            this.target = new Object3D();
    
            Object.defineProperty( this, 'power', {
                get: function () {
    
                    // intensity = power per solid angle.
                    // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
                    return this.intensity * Math.PI;
    
                },
                set: function ( power ) {
    
                    // intensity = power per solid angle.
                    // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
                    this.intensity = power / Math.PI;
    
                }
            } );
    
            this.distance = ( distance !== undefined ) ? distance : 0;
            this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
            this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
            this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
    
            this.shadow = new SpotLightShadow();
    
        }
    
        SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {
    
            constructor: SpotLight,
    
            isSpotLight: true,
    
            copy: function ( source ) {
    
                Light.prototype.copy.call( this, source );
    
                this.distance = source.distance;
                this.angle = source.angle;
                this.penumbra = source.penumbra;
                this.decay = source.decay;
    
                this.target = source.target.clone();
    
                this.shadow = source.shadow.clone();
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
    
        function PointLight( color, intensity, distance, decay ) {
    
            Light.call( this, color, intensity );
    
            this.type = 'PointLight';
    
            Object.defineProperty( this, 'power', {
                get: function () {
    
                    // intensity = power per solid angle.
                    // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
                    return this.intensity * 4 * Math.PI;
    
                },
                set: function ( power ) {
    
                    // intensity = power per solid angle.
                    // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
                    this.intensity = power / ( 4 * Math.PI );
    
                }
            } );
    
            this.distance = ( distance !== undefined ) ? distance : 0;
            this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
    
            this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );
    
        }
    
        PointLight.prototype = Object.assign( Object.create( Light.prototype ), {
    
            constructor: PointLight,
    
            isPointLight: true,
    
            copy: function ( source ) {
    
                Light.prototype.copy.call( this, source );
    
                this.distance = source.distance;
                this.decay = source.decay;
    
                this.shadow = source.shadow.clone();
    
                return this;
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author arose / http://github.com/arose
         */
    
        function OrthographicCamera( left, right, top, bottom, near, far ) {
    
            Camera.call( this );
    
            this.type = 'OrthographicCamera';
    
            this.zoom = 1;
            this.view = null;
    
            this.left = ( left !== undefined ) ? left : - 1;
            this.right = ( right !== undefined ) ? right : 1;
            this.top = ( top !== undefined ) ? top : 1;
            this.bottom = ( bottom !== undefined ) ? bottom : - 1;
    
            this.near = ( near !== undefined ) ? near : 0.1;
            this.far = ( far !== undefined ) ? far : 2000;
    
            this.updateProjectionMatrix();
    
        }
    
        OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
    
            constructor: OrthographicCamera,
    
            isOrthographicCamera: true,
    
            copy: function ( source, recursive ) {
    
                Camera.prototype.copy.call( this, source, recursive );
    
                this.left = source.left;
                this.right = source.right;
                this.top = source.top;
                this.bottom = source.bottom;
                this.near = source.near;
                this.far = source.far;
    
                this.zoom = source.zoom;
                this.view = source.view === null ? null : Object.assign( {}, source.view );
    
                return this;
    
            },
    
            setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
    
                if ( this.view === null ) {
    
                    this.view = {
                        enabled: true,
                        fullWidth: 1,
                        fullHeight: 1,
                        offsetX: 0,
                        offsetY: 0,
                        width: 1,
                        height: 1
                    };
    
                }
    
                this.view.enabled = true;
                this.view.fullWidth = fullWidth;
                this.view.fullHeight = fullHeight;
                this.view.offsetX = x;
                this.view.offsetY = y;
                this.view.width = width;
                this.view.height = height;
    
                this.updateProjectionMatrix();
    
            },
    
            clearViewOffset: function () {
    
                if ( this.view !== null ) {
    
                    this.view.enabled = false;
    
                }
    
                this.updateProjectionMatrix();
    
            },
    
            updateProjectionMatrix: function () {
    
                var dx = ( this.right - this.left ) / ( 2 * this.zoom );
                var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
                var cx = ( this.right + this.left ) / 2;
                var cy = ( this.top + this.bottom ) / 2;
    
                var left = cx - dx;
                var right = cx + dx;
                var top = cy + dy;
                var bottom = cy - dy;
    
                if ( this.view !== null && this.view.enabled ) {
    
                    var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
                    var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
                    var scaleW = ( this.right - this.left ) / this.view.width;
                    var scaleH = ( this.top - this.bottom ) / this.view.height;
    
                    left += scaleW * ( this.view.offsetX / zoomW );
                    right = left + scaleW * ( this.view.width / zoomW );
                    top -= scaleH * ( this.view.offsetY / zoomH );
                    bottom = top - scaleH * ( this.view.height / zoomH );
    
                }
    
                this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );
    
                this.projectionMatrixInverse.getInverse( this.projectionMatrix );
    
            },
    
            toJSON: function ( meta ) {
    
                var data = Object3D.prototype.toJSON.call( this, meta );
    
                data.object.zoom = this.zoom;
                data.object.left = this.left;
                data.object.right = this.right;
                data.object.top = this.top;
                data.object.bottom = this.bottom;
                data.object.near = this.near;
                data.object.far = this.far;
    
                if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
    
                return data;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function DirectionalLightShadow( ) {
    
            LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );
    
        }
    
        DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
    
            constructor: DirectionalLightShadow
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author alteredq / http://alteredqualia.com/
         */
    
        function DirectionalLight( color, intensity ) {
    
            Light.call( this, color, intensity );
    
            this.type = 'DirectionalLight';
    
            this.position.copy( Object3D.DefaultUp );
            this.updateMatrix();
    
            this.target = new Object3D();
    
            this.shadow = new DirectionalLightShadow();
    
        }
    
        DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {
    
            constructor: DirectionalLight,
    
            isDirectionalLight: true,
    
            copy: function ( source ) {
    
                Light.prototype.copy.call( this, source );
    
                this.target = source.target.clone();
    
                this.shadow = source.shadow.clone();
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function AmbientLight( color, intensity ) {
    
            Light.call( this, color, intensity );
    
            this.type = 'AmbientLight';
    
            this.castShadow = undefined;
    
        }
    
        AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {
    
            constructor: AmbientLight,
    
            isAmbientLight: true
    
        } );
    
        /**
         * @author abelnation / http://github.com/abelnation
         */
    
        function RectAreaLight( color, intensity, width, height ) {
    
            Light.call( this, color, intensity );
    
            this.type = 'RectAreaLight';
    
            this.width = ( width !== undefined ) ? width : 10;
            this.height = ( height !== undefined ) ? height : 10;
    
        }
    
        RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {
    
            constructor: RectAreaLight,
    
            isRectAreaLight: true,
    
            copy: function ( source ) {
    
                Light.prototype.copy.call( this, source );
    
                this.width = source.width;
                this.height = source.height;
    
                return this;
    
            },
    
            toJSON: function ( meta ) {
    
                var data = Light.prototype.toJSON.call( this, meta );
    
                data.object.width = this.width;
                data.object.height = this.height;
    
                return data;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function MaterialLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
            this.textures = {};
    
        }
    
        Object.assign( MaterialLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var loader = new FileLoader( scope.manager );
                loader.setPath( scope.path );
                loader.load( url, function ( text ) {
    
                    onLoad( scope.parse( JSON.parse( text ) ) );
    
                }, onProgress, onError );
    
            },
    
            parse: function ( json ) {
    
                var textures = this.textures;
    
                function getTexture( name ) {
    
                    if ( textures[ name ] === undefined ) {
    
                        console.warn( 'THREE.MaterialLoader: Undefined texture', name );
    
                    }
    
                    return textures[ name ];
    
                }
    
                var material = new Materials[ json.type ]();
    
                if ( json.uuid !== undefined ) material.uuid = json.uuid;
                if ( json.name !== undefined ) material.name = json.name;
                if ( json.color !== undefined ) material.color.setHex( json.color );
                if ( json.roughness !== undefined ) material.roughness = json.roughness;
                if ( json.metalness !== undefined ) material.metalness = json.metalness;
                if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
                if ( json.specular !== undefined ) material.specular.setHex( json.specular );
                if ( json.shininess !== undefined ) material.shininess = json.shininess;
                if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
                if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
                if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
                if ( json.fog !== undefined ) material.fog = json.fog;
                if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
                if ( json.blending !== undefined ) material.blending = json.blending;
                if ( json.combine !== undefined ) material.combine = json.combine;
                if ( json.side !== undefined ) material.side = json.side;
                if ( json.opacity !== undefined ) material.opacity = json.opacity;
                if ( json.transparent !== undefined ) material.transparent = json.transparent;
                if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
                if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
                if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
                if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
                if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
                if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
                if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
                if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
    
                if ( json.rotation !== undefined ) material.rotation = json.rotation;
    
                if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
                if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
                if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
                if ( json.scale !== undefined ) material.scale = json.scale;
    
                if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
                if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
                if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;
    
                if ( json.skinning !== undefined ) material.skinning = json.skinning;
                if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
                if ( json.dithering !== undefined ) material.dithering = json.dithering;
    
                if ( json.visible !== undefined ) material.visible = json.visible;
                if ( json.userData !== undefined ) material.userData = json.userData;
    
                // Shader Material
    
                if ( json.uniforms !== undefined ) {
    
                    for ( var name in json.uniforms ) {
    
                        var uniform = json.uniforms[ name ];
    
                        material.uniforms[ name ] = {};
    
                        switch ( uniform.type ) {
    
                            case 't':
                                material.uniforms[ name ].value = getTexture( uniform.value );
                                break;
    
                            case 'c':
                                material.uniforms[ name ].value = new Color().setHex( uniform.value );
                                break;
    
                            case 'v2':
                                material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
                                break;
    
                            case 'v3':
                                material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
                                break;
    
                            case 'v4':
                                material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
                                break;
    
                            case 'm3':
                                material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );
    
                            case 'm4':
                                material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
                                break;
    
                            default:
                                material.uniforms[ name ].value = uniform.value;
    
                        }
    
                    }
    
                }
    
                if ( json.defines !== undefined ) material.defines = json.defines;
                if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
                if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
    
                if ( json.extensions !== undefined ) {
    
                    for ( var key in json.extensions ) {
    
                        material.extensions[ key ] = json.extensions[ key ];
    
                    }
    
                }
    
                // Deprecated
    
                if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading
    
                // for PointsMaterial
    
                if ( json.size !== undefined ) material.size = json.size;
                if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;
    
                // maps
    
                if ( json.map !== undefined ) material.map = getTexture( json.map );
    
                if ( json.alphaMap !== undefined ) {
    
                    material.alphaMap = getTexture( json.alphaMap );
                    material.transparent = true;
    
                }
    
                if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
                if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;
    
                if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
                if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
                if ( json.normalScale !== undefined ) {
    
                    var normalScale = json.normalScale;
    
                    if ( Array.isArray( normalScale ) === false ) {
    
                        // Blender exporter used to export a scalar. See #7459
    
                        normalScale = [ normalScale, normalScale ];
    
                    }
    
                    material.normalScale = new Vector2().fromArray( normalScale );
    
                }
    
                if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
                if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
                if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;
    
                if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
                if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );
    
                if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
                if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;
    
                if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );
    
                if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
                if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;
    
                if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
    
                if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
                if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;
    
                if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
                if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;
    
                if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );
    
                return material;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            },
    
            setTextures: function ( value ) {
    
                this.textures = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author Don McCurdy / https://www.donmccurdy.com
         */
    
        var LoaderUtils = {
    
            decodeText: function ( array ) {
    
                if ( typeof TextDecoder !== 'undefined' ) {
    
                    return new TextDecoder().decode( array );
    
                }
    
                // Avoid the String.fromCharCode.apply(null, array) shortcut, which
                // throws a "maximum call stack size exceeded" error for large arrays.
    
                var s = '';
    
                for ( var i = 0, il = array.length; i < il; i ++ ) {
    
                    // Implicitly assumes little-endian.
                    s += String.fromCharCode( array[ i ] );
    
                }
    
                // Merges multi-byte utf-8 characters.
                return decodeURIComponent( escape( s ) );
    
            },
    
            extractUrlBase: function ( url ) {
    
                var index = url.lastIndexOf( '/' );
    
                if ( index === - 1 ) return './';
    
                return url.substr( 0, index + 1 );
    
            }
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function BufferGeometryLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
        }
    
        Object.assign( BufferGeometryLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var loader = new FileLoader( scope.manager );
                loader.setPath( scope.path );
                loader.load( url, function ( text ) {
    
                    onLoad( scope.parse( JSON.parse( text ) ) );
    
                }, onProgress, onError );
    
            },
    
            parse: function ( json ) {
    
                var geometry = new BufferGeometry();
    
                var index = json.data.index;
    
                if ( index !== undefined ) {
    
                    var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
                    geometry.setIndex( new BufferAttribute( typedArray, 1 ) );
    
                }
    
                var attributes = json.data.attributes;
    
                for ( var key in attributes ) {
    
                    var attribute = attributes[ key ];
                    var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
    
                    var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
                    if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
                    geometry.addAttribute( key, bufferAttribute );
    
                }
    
                var morphAttributes = json.data.morphAttributes;
    
                if ( morphAttributes ) {
    
                    for ( var key in morphAttributes ) {
    
                        var attributeArray = morphAttributes[ key ];
    
                        var array = [];
    
                        for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {
    
                            var attribute = attributeArray[ i ];
                            var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
    
                            var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
                            if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
                            array.push( bufferAttribute );
    
                        }
    
                        geometry.morphAttributes[ key ] = array;
    
                    }
    
                }
    
                var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
    
                if ( groups !== undefined ) {
    
                    for ( var i = 0, n = groups.length; i !== n; ++ i ) {
    
                        var group = groups[ i ];
    
                        geometry.addGroup( group.start, group.count, group.materialIndex );
    
                    }
    
                }
    
                var boundingSphere = json.data.boundingSphere;
    
                if ( boundingSphere !== undefined ) {
    
                    var center = new Vector3();
    
                    if ( boundingSphere.center !== undefined ) {
    
                        center.fromArray( boundingSphere.center );
    
                    }
    
                    geometry.boundingSphere = new Sphere( center, boundingSphere.radius );
    
                }
    
                if ( json.name ) geometry.name = json.name;
                if ( json.userData ) geometry.userData = json.userData;
    
                return geometry;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        var TYPED_ARRAYS = {
            Int8Array: Int8Array,
            Uint8Array: Uint8Array,
            // Workaround for IE11 pre KB2929437. See #11440
            Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
            Int16Array: Int16Array,
            Uint16Array: Uint16Array,
            Int32Array: Int32Array,
            Uint32Array: Uint32Array,
            Float32Array: Float32Array,
            Float64Array: Float64Array
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function ObjectLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
            this.resourcePath = '';
    
        }
    
        Object.assign( ObjectLoader.prototype, {
    
            crossOrigin: 'anonymous',
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var path = ( this.path === undefined ) ? LoaderUtils.extractUrlBase( url ) : this.path;
                this.resourcePath = this.resourcePath || path;
    
                var loader = new FileLoader( scope.manager );
                loader.setPath( this.path );
                loader.load( url, function ( text ) {
    
                    var json = null;
    
                    try {
    
                        json = JSON.parse( text );
    
                    } catch ( error ) {
    
                        if ( onError !== undefined ) onError( error );
    
                        console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );
    
                        return;
    
                    }
    
                    var metadata = json.metadata;
    
                    if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
    
                        console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
                        return;
    
                    }
    
                    scope.parse( json, onLoad );
    
                }, onProgress, onError );
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            },
    
            setResourcePath: function ( value ) {
    
                this.resourcePath = value;
                return this;
    
            },
    
            setCrossOrigin: function ( value ) {
    
                this.crossOrigin = value;
                return this;
    
            },
    
            parse: function ( json, onLoad ) {
    
                var shapes = this.parseShape( json.shapes );
                var geometries = this.parseGeometries( json.geometries, shapes );
    
                var images = this.parseImages( json.images, function () {
    
                    if ( onLoad !== undefined ) onLoad( object );
    
                } );
    
                var textures = this.parseTextures( json.textures, images );
                var materials = this.parseMaterials( json.materials, textures );
    
                var object = this.parseObject( json.object, geometries, materials );
    
                if ( json.animations ) {
    
                    object.animations = this.parseAnimations( json.animations );
    
                }
    
                if ( json.images === undefined || json.images.length === 0 ) {
    
                    if ( onLoad !== undefined ) onLoad( object );
    
                }
    
                return object;
    
            },
    
            parseShape: function ( json ) {
    
                var shapes = {};
    
                if ( json !== undefined ) {
    
                    for ( var i = 0, l = json.length; i < l; i ++ ) {
    
                        var shape = new Shape().fromJSON( json[ i ] );
    
                        shapes[ shape.uuid ] = shape;
    
                    }
    
                }
    
                return shapes;
    
            },
    
            parseGeometries: function ( json, shapes ) {
    
                var geometries = {};
    
                if ( json !== undefined ) {
    
                    var bufferGeometryLoader = new BufferGeometryLoader();
    
                    for ( var i = 0, l = json.length; i < l; i ++ ) {
    
                        var geometry;
                        var data = json[ i ];
    
                        switch ( data.type ) {
    
                            case 'PlaneGeometry':
                            case 'PlaneBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.width,
                                    data.height,
                                    data.widthSegments,
                                    data.heightSegments
                                );
    
                                break;
    
                            case 'BoxGeometry':
                            case 'BoxBufferGeometry':
                            case 'CubeGeometry': // backwards compatible
    
                                geometry = new Geometries[ data.type ](
                                    data.width,
                                    data.height,
                                    data.depth,
                                    data.widthSegments,
                                    data.heightSegments,
                                    data.depthSegments
                                );
    
                                break;
    
                            case 'CircleGeometry':
                            case 'CircleBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.radius,
                                    data.segments,
                                    data.thetaStart,
                                    data.thetaLength
                                );
    
                                break;
    
                            case 'CylinderGeometry':
                            case 'CylinderBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.radiusTop,
                                    data.radiusBottom,
                                    data.height,
                                    data.radialSegments,
                                    data.heightSegments,
                                    data.openEnded,
                                    data.thetaStart,
                                    data.thetaLength
                                );
    
                                break;
    
                            case 'ConeGeometry':
                            case 'ConeBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.radius,
                                    data.height,
                                    data.radialSegments,
                                    data.heightSegments,
                                    data.openEnded,
                                    data.thetaStart,
                                    data.thetaLength
                                );
    
                                break;
    
                            case 'SphereGeometry':
                            case 'SphereBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.radius,
                                    data.widthSegments,
                                    data.heightSegments,
                                    data.phiStart,
                                    data.phiLength,
                                    data.thetaStart,
                                    data.thetaLength
                                );
    
                                break;
    
                            case 'DodecahedronGeometry':
                            case 'DodecahedronBufferGeometry':
                            case 'IcosahedronGeometry':
                            case 'IcosahedronBufferGeometry':
                            case 'OctahedronGeometry':
                            case 'OctahedronBufferGeometry':
                            case 'TetrahedronGeometry':
                            case 'TetrahedronBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.radius,
                                    data.detail
                                );
    
                                break;
    
                            case 'RingGeometry':
                            case 'RingBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.innerRadius,
                                    data.outerRadius,
                                    data.thetaSegments,
                                    data.phiSegments,
                                    data.thetaStart,
                                    data.thetaLength
                                );
    
                                break;
    
                            case 'TorusGeometry':
                            case 'TorusBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.radius,
                                    data.tube,
                                    data.radialSegments,
                                    data.tubularSegments,
                                    data.arc
                                );
    
                                break;
    
                            case 'TorusKnotGeometry':
                            case 'TorusKnotBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.radius,
                                    data.tube,
                                    data.tubularSegments,
                                    data.radialSegments,
                                    data.p,
                                    data.q
                                );
    
                                break;
    
                            case 'TubeGeometry':
                            case 'TubeBufferGeometry':
    
                                // This only works for built-in curves (e.g. CatmullRomCurve3).
                                // User defined curves or instances of CurvePath will not be deserialized.
                                geometry = new Geometries[ data.type ](
                                    new Curves[ data.path.type ]().fromJSON( data.path ),
                                    data.tubularSegments,
                                    data.radius,
                                    data.radialSegments,
                                    data.closed
                                );
    
                                break;
    
                            case 'LatheGeometry':
                            case 'LatheBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.points,
                                    data.segments,
                                    data.phiStart,
                                    data.phiLength
                                );
    
                                break;
    
                            case 'PolyhedronGeometry':
                            case 'PolyhedronBufferGeometry':
    
                                geometry = new Geometries[ data.type ](
                                    data.vertices,
                                    data.indices,
                                    data.radius,
                                    data.details
                                );
    
                                break;
    
                            case 'ShapeGeometry':
                            case 'ShapeBufferGeometry':
    
                                var geometryShapes = [];
    
                                for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {
    
                                    var shape = shapes[ data.shapes[ j ] ];
    
                                    geometryShapes.push( shape );
    
                                }
    
                                geometry = new Geometries[ data.type ](
                                    geometryShapes,
                                    data.curveSegments
                                );
    
                                break;
    
    
                            case 'ExtrudeGeometry':
                            case 'ExtrudeBufferGeometry':
    
                                var geometryShapes = [];
    
                                for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {
    
                                    var shape = shapes[ data.shapes[ j ] ];
    
                                    geometryShapes.push( shape );
    
                                }
    
                                var extrudePath = data.options.extrudePath;
    
                                if ( extrudePath !== undefined ) {
    
                                    data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );
    
                                }
    
                                geometry = new Geometries[ data.type ](
                                    geometryShapes,
                                    data.options
                                );
    
                                break;
    
                            case 'BufferGeometry':
    
                                geometry = bufferGeometryLoader.parse( data );
    
                                break;
    
                            case 'Geometry':
    
                                if ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {
    
                                    var geometryLoader = new THREE.LegacyJSONLoader();
                                    geometry = geometryLoader.parse( data, this.resourcePath ).geometry;
    
    
                                } else {
    
                                    console.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".' );
    
                                }
    
                                break;
    
                            default:
    
                                console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );
    
                                continue;
    
                        }
    
                        geometry.uuid = data.uuid;
    
                        if ( data.name !== undefined ) geometry.name = data.name;
                        if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;
    
                        geometries[ data.uuid ] = geometry;
    
                    }
    
                }
    
                return geometries;
    
            },
    
            parseMaterials: function ( json, textures ) {
    
                var cache = {}; // MultiMaterial
                var materials = {};
    
                if ( json !== undefined ) {
    
                    var loader = new MaterialLoader();
                    loader.setTextures( textures );
    
                    for ( var i = 0, l = json.length; i < l; i ++ ) {
    
                        var data = json[ i ];
    
                        if ( data.type === 'MultiMaterial' ) {
    
                            // Deprecated
    
                            var array = [];
    
                            for ( var j = 0; j < data.materials.length; j ++ ) {
    
                                var material = data.materials[ j ];
    
                                if ( cache[ material.uuid ] === undefined ) {
    
                                    cache[ material.uuid ] = loader.parse( material );
    
                                }
    
                                array.push( cache[ material.uuid ] );
    
                            }
    
                            materials[ data.uuid ] = array;
    
                        } else {
    
                            if ( cache[ data.uuid ] === undefined ) {
    
                                cache[ data.uuid ] = loader.parse( data );
    
                            }
    
                            materials[ data.uuid ] = cache[ data.uuid ];
    
                        }
    
                    }
    
                }
    
                return materials;
    
            },
    
            parseAnimations: function ( json ) {
    
                var animations = [];
    
                for ( var i = 0; i < json.length; i ++ ) {
    
                    var data = json[ i ];
    
                    var clip = AnimationClip.parse( data );
    
                    if ( data.uuid !== undefined ) clip.uuid = data.uuid;
    
                    animations.push( clip );
    
                }
    
                return animations;
    
            },
    
            parseImages: function ( json, onLoad ) {
    
                var scope = this;
                var images = {};
    
                function loadImage( url ) {
    
                    scope.manager.itemStart( url );
    
                    return loader.load( url, function () {
    
                        scope.manager.itemEnd( url );
    
                    }, undefined, function () {
    
                        scope.manager.itemError( url );
                        scope.manager.itemEnd( url );
    
                    } );
    
                }
    
                if ( json !== undefined && json.length > 0 ) {
    
                    var manager = new LoadingManager( onLoad );
    
                    var loader = new ImageLoader( manager );
                    loader.setCrossOrigin( this.crossOrigin );
    
                    for ( var i = 0, il = json.length; i < il; i ++ ) {
    
                        var image = json[ i ];
                        var url = image.url;
    
                        if ( Array.isArray( url ) ) {
    
                            // load array of images e.g CubeTexture
    
                            images[ image.uuid ] = [];
    
                            for ( var j = 0, jl = url.length; j < jl; j ++ ) {
    
                                var currentUrl = url[ j ];
    
                                var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;
    
                                images[ image.uuid ].push( loadImage( path ) );
    
                            }
    
                        } else {
    
                            // load single image
    
                            var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;
    
                            images[ image.uuid ] = loadImage( path );
    
                        }
    
                    }
    
                }
    
                return images;
    
            },
    
            parseTextures: function ( json, images ) {
    
                function parseConstant( value, type ) {
    
                    if ( typeof value === 'number' ) return value;
    
                    console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
    
                    return type[ value ];
    
                }
    
                var textures = {};
    
                if ( json !== undefined ) {
    
                    for ( var i = 0, l = json.length; i < l; i ++ ) {
    
                        var data = json[ i ];
    
                        if ( data.image === undefined ) {
    
                            console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
    
                        }
    
                        if ( images[ data.image ] === undefined ) {
    
                            console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
    
                        }
    
                        var texture;
    
                        if ( Array.isArray( images[ data.image ] ) ) {
    
                            texture = new CubeTexture( images[ data.image ] );
    
                        } else {
    
                            texture = new Texture( images[ data.image ] );
    
                        }
    
                        texture.needsUpdate = true;
    
                        texture.uuid = data.uuid;
    
                        if ( data.name !== undefined ) texture.name = data.name;
    
                        if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );
    
                        if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
                        if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
                        if ( data.center !== undefined ) texture.center.fromArray( data.center );
                        if ( data.rotation !== undefined ) texture.rotation = data.rotation;
    
                        if ( data.wrap !== undefined ) {
    
                            texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
                            texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );
    
                        }
    
                        if ( data.format !== undefined ) texture.format = data.format;
                        if ( data.type !== undefined ) texture.type = data.type;
                        if ( data.encoding !== undefined ) texture.encoding = data.encoding;
    
                        if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
                        if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
                        if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
    
                        if ( data.flipY !== undefined ) texture.flipY = data.flipY;
    
                        if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
                        if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;
    
                        textures[ data.uuid ] = texture;
    
                    }
    
                }
    
                return textures;
    
            },
    
            parseObject: function ( data, geometries, materials ) {
    
                var object;
    
                function getGeometry( name ) {
    
                    if ( geometries[ name ] === undefined ) {
    
                        console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
    
                    }
    
                    return geometries[ name ];
    
                }
    
                function getMaterial( name ) {
    
                    if ( name === undefined ) return undefined;
    
                    if ( Array.isArray( name ) ) {
    
                        var array = [];
    
                        for ( var i = 0, l = name.length; i < l; i ++ ) {
    
                            var uuid = name[ i ];
    
                            if ( materials[ uuid ] === undefined ) {
    
                                console.warn( 'THREE.ObjectLoader: Undefined material', uuid );
    
                            }
    
                            array.push( materials[ uuid ] );
    
                        }
    
                        return array;
    
                    }
    
                    if ( materials[ name ] === undefined ) {
    
                        console.warn( 'THREE.ObjectLoader: Undefined material', name );
    
                    }
    
                    return materials[ name ];
    
                }
    
                switch ( data.type ) {
    
                    case 'Scene':
    
                        object = new Scene();
    
                        if ( data.background !== undefined ) {
    
                            if ( Number.isInteger( data.background ) ) {
    
                                object.background = new Color( data.background );
    
                            }
    
                        }
    
                        if ( data.fog !== undefined ) {
    
                            if ( data.fog.type === 'Fog' ) {
    
                                object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
    
                            } else if ( data.fog.type === 'FogExp2' ) {
    
                                object.fog = new FogExp2( data.fog.color, data.fog.density );
    
                            }
    
                        }
    
                        break;
    
                    case 'PerspectiveCamera':
    
                        object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
    
                        if ( data.focus !== undefined ) object.focus = data.focus;
                        if ( data.zoom !== undefined ) object.zoom = data.zoom;
                        if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
                        if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
                        if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
    
                        break;
    
                    case 'OrthographicCamera':
    
                        object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
    
                        if ( data.zoom !== undefined ) object.zoom = data.zoom;
                        if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
    
                        break;
    
                    case 'AmbientLight':
    
                        object = new AmbientLight( data.color, data.intensity );
    
                        break;
    
                    case 'DirectionalLight':
    
                        object = new DirectionalLight( data.color, data.intensity );
    
                        break;
    
                    case 'PointLight':
    
                        object = new PointLight( data.color, data.intensity, data.distance, data.decay );
    
                        break;
    
                    case 'RectAreaLight':
    
                        object = new RectAreaLight( data.color, data.intensity, data.width, data.height );
    
                        break;
    
                    case 'SpotLight':
    
                        object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );
    
                        break;
    
                    case 'HemisphereLight':
    
                        object = new HemisphereLight( data.color, data.groundColor, data.intensity );
    
                        break;
    
                    case 'SkinnedMesh':
    
                        console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );
    
                    case 'Mesh':
    
                        var geometry = getGeometry( data.geometry );
                        var material = getMaterial( data.material );
    
                        if ( geometry.bones && geometry.bones.length > 0 ) {
    
                            object = new SkinnedMesh( geometry, material );
    
                        } else {
    
                            object = new Mesh( geometry, material );
    
                        }
    
                        if ( data.drawMode !== undefined ) object.setDrawMode( data.drawMode );
    
                        break;
    
                    case 'LOD':
    
                        object = new LOD();
    
                        break;
    
                    case 'Line':
    
                        object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );
    
                        break;
    
                    case 'LineLoop':
    
                        object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );
    
                        break;
    
                    case 'LineSegments':
    
                        object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );
    
                        break;
    
                    case 'PointCloud':
                    case 'Points':
    
                        object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );
    
                        break;
    
                    case 'Sprite':
    
                        object = new Sprite( getMaterial( data.material ) );
    
                        break;
    
                    case 'Group':
    
                        object = new Group();
    
                        break;
    
                    default:
    
                        object = new Object3D();
    
                }
    
                object.uuid = data.uuid;
    
                if ( data.name !== undefined ) object.name = data.name;
    
                if ( data.matrix !== undefined ) {
    
                    object.matrix.fromArray( data.matrix );
    
                    if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
                    if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );
    
                } else {
    
                    if ( data.position !== undefined ) object.position.fromArray( data.position );
                    if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
                    if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
                    if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
    
                }
    
                if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
                if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;
    
                if ( data.shadow ) {
    
                    if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
                    if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
                    if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
                    if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );
    
                }
    
                if ( data.visible !== undefined ) object.visible = data.visible;
                if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
                if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
                if ( data.userData !== undefined ) object.userData = data.userData;
                if ( data.layers !== undefined ) object.layers.mask = data.layers;
    
                if ( data.children !== undefined ) {
    
                    var children = data.children;
    
                    for ( var i = 0; i < children.length; i ++ ) {
    
                        object.add( this.parseObject( children[ i ], geometries, materials ) );
    
                    }
    
                }
    
                if ( data.type === 'LOD' ) {
    
                    var levels = data.levels;
    
                    for ( var l = 0; l < levels.length; l ++ ) {
    
                        var level = levels[ l ];
                        var child = object.getObjectByProperty( 'uuid', level.object );
    
                        if ( child !== undefined ) {
    
                            object.addLevel( child, level.distance );
    
                        }
    
                    }
    
                }
    
                return object;
    
            }
    
        } );
    
        var TEXTURE_MAPPING = {
            UVMapping: UVMapping,
            CubeReflectionMapping: CubeReflectionMapping,
            CubeRefractionMapping: CubeRefractionMapping,
            EquirectangularReflectionMapping: EquirectangularReflectionMapping,
            EquirectangularRefractionMapping: EquirectangularRefractionMapping,
            SphericalReflectionMapping: SphericalReflectionMapping,
            CubeUVReflectionMapping: CubeUVReflectionMapping,
            CubeUVRefractionMapping: CubeUVRefractionMapping
        };
    
        var TEXTURE_WRAPPING = {
            RepeatWrapping: RepeatWrapping,
            ClampToEdgeWrapping: ClampToEdgeWrapping,
            MirroredRepeatWrapping: MirroredRepeatWrapping
        };
    
        var TEXTURE_FILTER = {
            NearestFilter: NearestFilter,
            NearestMipMapNearestFilter: NearestMipMapNearestFilter,
            NearestMipMapLinearFilter: NearestMipMapLinearFilter,
            LinearFilter: LinearFilter,
            LinearMipMapNearestFilter: LinearMipMapNearestFilter,
            LinearMipMapLinearFilter: LinearMipMapLinearFilter
        };
    
        /**
         * @author thespite / http://clicktorelease.com/
         */
    
    
        function ImageBitmapLoader( manager ) {
    
            if ( typeof createImageBitmap === 'undefined' ) {
    
                console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );
    
            }
    
            if ( typeof fetch === 'undefined' ) {
    
                console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );
    
            }
    
            this.manager = manager !== undefined ? manager : DefaultLoadingManager;
            this.options = undefined;
    
        }
    
        ImageBitmapLoader.prototype = {
    
            constructor: ImageBitmapLoader,
    
            setOptions: function setOptions( options ) {
    
                this.options = options;
    
                return this;
    
            },
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                if ( url === undefined ) url = '';
    
                if ( this.path !== undefined ) url = this.path + url;
    
                url = this.manager.resolveURL( url );
    
                var scope = this;
    
                var cached = Cache.get( url );
    
                if ( cached !== undefined ) {
    
                    scope.manager.itemStart( url );
    
                    setTimeout( function () {
    
                        if ( onLoad ) onLoad( cached );
    
                        scope.manager.itemEnd( url );
    
                    }, 0 );
    
                    return cached;
    
                }
    
                fetch( url ).then( function ( res ) {
    
                    return res.blob();
    
                } ).then( function ( blob ) {
    
                    if ( scope.options === undefined ) {
    
                        // Workaround for FireFox. It causes an error if you pass options.
                        return createImageBitmap( blob );
    
                    } else {
    
                        return createImageBitmap( blob, scope.options );
    
                    }
    
                } ).then( function ( imageBitmap ) {
    
                    Cache.add( url, imageBitmap );
    
                    if ( onLoad ) onLoad( imageBitmap );
    
                    scope.manager.itemEnd( url );
    
                } ).catch( function ( e ) {
    
                    if ( onError ) onError( e );
    
                    scope.manager.itemError( url );
                    scope.manager.itemEnd( url );
    
                } );
    
                scope.manager.itemStart( url );
    
            },
    
            setCrossOrigin: function ( /* value */ ) {
    
                return this;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        };
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
         **/
    
        function ShapePath() {
    
            this.type = 'ShapePath';
    
            this.color = new Color();
    
            this.subPaths = [];
            this.currentPath = null;
    
        }
    
        Object.assign( ShapePath.prototype, {
    
            moveTo: function ( x, y ) {
    
                this.currentPath = new Path();
                this.subPaths.push( this.currentPath );
                this.currentPath.moveTo( x, y );
    
            },
    
            lineTo: function ( x, y ) {
    
                this.currentPath.lineTo( x, y );
    
            },
    
            quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
    
                this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
    
            },
    
            bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
    
                this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
    
            },
    
            splineThru: function ( pts ) {
    
                this.currentPath.splineThru( pts );
    
            },
    
            toShapes: function ( isCCW, noHoles ) {
    
                function toShapesNoHoles( inSubpaths ) {
    
                    var shapes = [];
    
                    for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {
    
                        var tmpPath = inSubpaths[ i ];
    
                        var tmpShape = new Shape();
                        tmpShape.curves = tmpPath.curves;
    
                        shapes.push( tmpShape );
    
                    }
    
                    return shapes;
    
                }
    
                function isPointInsidePolygon( inPt, inPolygon ) {
    
                    var polyLen = inPolygon.length;
    
                    // inPt on polygon contour => immediate success    or
                    // toggling of inside/outside at every single! intersection point of an edge
                    //  with the horizontal line through inPt, left of inPt
                    //  not counting lowerY endpoints of edges and whole edges on that line
                    var inside = false;
                    for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
    
                        var edgeLowPt = inPolygon[ p ];
                        var edgeHighPt = inPolygon[ q ];
    
                        var edgeDx = edgeHighPt.x - edgeLowPt.x;
                        var edgeDy = edgeHighPt.y - edgeLowPt.y;
    
                        if ( Math.abs( edgeDy ) > Number.EPSILON ) {
    
                            // not parallel
                            if ( edgeDy < 0 ) {
    
                                edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
                                edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
    
                            }
                            if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
    
                            if ( inPt.y === edgeLowPt.y ) {
    
                                if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
                                // continue;				// no intersection or edgeLowPt => doesn't count !!!
    
                            } else {
    
                                var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
                                if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
                                if ( perpEdge < 0 ) 				continue;
                                inside = ! inside;		// true intersection left of inPt
    
                            }
    
                        } else {
    
                            // parallel or collinear
                            if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
                            // edge lies on the same horizontal line as inPt
                            if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
                                 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
                            // continue;
    
                        }
    
                    }
    
                    return	inside;
    
                }
    
                var isClockWise = ShapeUtils.isClockWise;
    
                var subPaths = this.subPaths;
                if ( subPaths.length === 0 ) return [];
    
                if ( noHoles === true )	return	toShapesNoHoles( subPaths );
    
    
                var solid, tmpPath, tmpShape, shapes = [];
    
                if ( subPaths.length === 1 ) {
    
                    tmpPath = subPaths[ 0 ];
                    tmpShape = new Shape();
                    tmpShape.curves = tmpPath.curves;
                    shapes.push( tmpShape );
                    return shapes;
    
                }
    
                var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
                holesFirst = isCCW ? ! holesFirst : holesFirst;
    
                // console.log("Holes first", holesFirst);
    
                var betterShapeHoles = [];
                var newShapes = [];
                var newShapeHoles = [];
                var mainIdx = 0;
                var tmpPoints;
    
                newShapes[ mainIdx ] = undefined;
                newShapeHoles[ mainIdx ] = [];
    
                for ( var i = 0, l = subPaths.length; i < l; i ++ ) {
    
                    tmpPath = subPaths[ i ];
                    tmpPoints = tmpPath.getPoints();
                    solid = isClockWise( tmpPoints );
                    solid = isCCW ? ! solid : solid;
    
                    if ( solid ) {
    
                        if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;
    
                        newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
                        newShapes[ mainIdx ].s.curves = tmpPath.curves;
    
                        if ( holesFirst )	mainIdx ++;
                        newShapeHoles[ mainIdx ] = [];
    
                        //console.log('cw', i);
    
                    } else {
    
                        newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
    
                        //console.log('ccw', i);
    
                    }
    
                }
    
                // only Holes? -> probably all Shapes with wrong orientation
                if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );
    
    
                if ( newShapes.length > 1 ) {
    
                    var ambiguous = false;
                    var toChange = [];
    
                    for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
    
                        betterShapeHoles[ sIdx ] = [];
    
                    }
    
                    for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
    
                        var sho = newShapeHoles[ sIdx ];
    
                        for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
    
                            var ho = sho[ hIdx ];
                            var hole_unassigned = true;
    
                            for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
    
                                if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
    
                                    if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
                                    if ( hole_unassigned ) {
    
                                        hole_unassigned = false;
                                        betterShapeHoles[ s2Idx ].push( ho );
    
                                    } else {
    
                                        ambiguous = true;
    
                                    }
    
                                }
    
                            }
                            if ( hole_unassigned ) {
    
                                betterShapeHoles[ sIdx ].push( ho );
    
                            }
    
                        }
    
                    }
                    // console.log("ambiguous: ", ambiguous);
                    if ( toChange.length > 0 ) {
    
                        // console.log("to change: ", toChange);
                        if ( ! ambiguous )	newShapeHoles = betterShapeHoles;
    
                    }
    
                }
    
                var tmpHoles;
    
                for ( var i = 0, il = newShapes.length; i < il; i ++ ) {
    
                    tmpShape = newShapes[ i ].s;
                    shapes.push( tmpShape );
                    tmpHoles = newShapeHoles[ i ];
    
                    for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
    
                        tmpShape.holes.push( tmpHoles[ j ].h );
    
                    }
    
                }
    
                //console.log("shape", shapes);
    
                return shapes;
    
            }
    
        } );
    
        /**
         * @author zz85 / http://www.lab4games.net/zz85/blog
         * @author mrdoob / http://mrdoob.com/
         */
    
    
        function Font( data ) {
    
            this.type = 'Font';
    
            this.data = data;
    
        }
    
        Object.assign( Font.prototype, {
    
            isFont: true,
    
            generateShapes: function ( text, size ) {
    
                if ( size === undefined ) size = 100;
    
                var shapes = [];
                var paths = createPaths( text, size, this.data );
    
                for ( var p = 0, pl = paths.length; p < pl; p ++ ) {
    
                    Array.prototype.push.apply( shapes, paths[ p ].toShapes() );
    
                }
    
                return shapes;
    
            }
    
        } );
    
        function createPaths( text, size, data ) {
    
            var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988
            var scale = size / data.resolution;
            var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;
    
            var paths = [];
    
            var offsetX = 0, offsetY = 0;
    
            for ( var i = 0; i < chars.length; i ++ ) {
    
                var char = chars[ i ];
    
                if ( char === '\n' ) {
    
                    offsetX = 0;
                    offsetY -= line_height;
    
                } else {
    
                    var ret = createPath( char, scale, offsetX, offsetY, data );
                    offsetX += ret.offsetX;
                    paths.push( ret.path );
    
                }
    
            }
    
            return paths;
    
        }
    
        function createPath( char, scale, offsetX, offsetY, data ) {
    
            var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];
    
            if ( ! glyph ) return;
    
            var path = new ShapePath();
    
            var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
    
            if ( glyph.o ) {
    
                var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
    
                for ( var i = 0, l = outline.length; i < l; ) {
    
                    var action = outline[ i ++ ];
    
                    switch ( action ) {
    
                        case 'm': // moveTo
    
                            x = outline[ i ++ ] * scale + offsetX;
                            y = outline[ i ++ ] * scale + offsetY;
    
                            path.moveTo( x, y );
    
                            break;
    
                        case 'l': // lineTo
    
                            x = outline[ i ++ ] * scale + offsetX;
                            y = outline[ i ++ ] * scale + offsetY;
    
                            path.lineTo( x, y );
    
                            break;
    
                        case 'q': // quadraticCurveTo
    
                            cpx = outline[ i ++ ] * scale + offsetX;
                            cpy = outline[ i ++ ] * scale + offsetY;
                            cpx1 = outline[ i ++ ] * scale + offsetX;
                            cpy1 = outline[ i ++ ] * scale + offsetY;
    
                            path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );
    
                            break;
    
                        case 'b': // bezierCurveTo
    
                            cpx = outline[ i ++ ] * scale + offsetX;
                            cpy = outline[ i ++ ] * scale + offsetY;
                            cpx1 = outline[ i ++ ] * scale + offsetX;
                            cpy1 = outline[ i ++ ] * scale + offsetY;
                            cpx2 = outline[ i ++ ] * scale + offsetX;
                            cpy2 = outline[ i ++ ] * scale + offsetY;
    
                            path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );
    
                            break;
    
                    }
    
                }
    
            }
    
            return { offsetX: glyph.ha * scale, path: path };
    
        }
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function FontLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
        }
    
        Object.assign( FontLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var loader = new FileLoader( this.manager );
                loader.setPath( this.path );
                loader.load( url, function ( text ) {
    
                    var json;
    
                    try {
    
                        json = JSON.parse( text );
    
                    } catch ( e ) {
    
                        console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
                        json = JSON.parse( text.substring( 65, text.length - 2 ) );
    
                    }
    
                    var font = scope.parse( json );
    
                    if ( onLoad ) onLoad( font );
    
                }, onProgress, onError );
    
            },
    
            parse: function ( json ) {
    
                return new Font( json );
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         */
    
        function Loader() {}
    
        Loader.Handlers = {
    
            handlers: [],
    
            add: function ( regex, loader ) {
    
                this.handlers.push( regex, loader );
    
            },
    
            get: function ( file ) {
    
                var handlers = this.handlers;
    
                for ( var i = 0, l = handlers.length; i < l; i += 2 ) {
    
                    var regex = handlers[ i ];
                    var loader = handlers[ i + 1 ];
    
                    if ( regex.test( file ) ) {
    
                        return loader;
    
                    }
    
                }
    
                return null;
    
            }
    
        };
    
        Object.assign( Loader.prototype, {
    
            crossOrigin: 'anonymous',
    
            onLoadStart: function () {},
    
            onLoadProgress: function () {},
    
            onLoadComplete: function () {},
    
            initMaterials: function ( materials, texturePath, crossOrigin ) {
    
                var array = [];
    
                for ( var i = 0; i < materials.length; ++ i ) {
    
                    array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );
    
                }
    
                return array;
    
            },
    
            createMaterial: ( function () {
    
                var BlendingMode = {
                    NoBlending: NoBlending,
                    NormalBlending: NormalBlending,
                    AdditiveBlending: AdditiveBlending,
                    SubtractiveBlending: SubtractiveBlending,
                    MultiplyBlending: MultiplyBlending,
                    CustomBlending: CustomBlending
                };
    
                var color = new Color();
                var textureLoader = new TextureLoader();
                var materialLoader = new MaterialLoader();
    
                return function createMaterial( m, texturePath, crossOrigin ) {
    
                    // convert from old material format
    
                    var textures = {};
    
                    function loadTexture( path, repeat, offset, wrap, anisotropy ) {
    
                        var fullPath = texturePath + path;
                        var loader = Loader.Handlers.get( fullPath );
    
                        var texture;
    
                        if ( loader !== null ) {
    
                            texture = loader.load( fullPath );
    
                        } else {
    
                            textureLoader.setCrossOrigin( crossOrigin );
                            texture = textureLoader.load( fullPath );
    
                        }
    
                        if ( repeat !== undefined ) {
    
                            texture.repeat.fromArray( repeat );
    
                            if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
                            if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;
    
                        }
    
                        if ( offset !== undefined ) {
    
                            texture.offset.fromArray( offset );
    
                        }
    
                        if ( wrap !== undefined ) {
    
                            if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
                            if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;
    
                            if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
                            if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;
    
                        }
    
                        if ( anisotropy !== undefined ) {
    
                            texture.anisotropy = anisotropy;
    
                        }
    
                        var uuid = _Math.generateUUID();
    
                        textures[ uuid ] = texture;
    
                        return uuid;
    
                    }
    
                    //
    
                    var json = {
                        uuid: _Math.generateUUID(),
                        type: 'MeshLambertMaterial'
                    };
    
                    for ( var name in m ) {
    
                        var value = m[ name ];
    
                        switch ( name ) {
    
                            case 'DbgColor':
                            case 'DbgIndex':
                            case 'opticalDensity':
                            case 'illumination':
                                break;
                            case 'DbgName':
                                json.name = value;
                                break;
                            case 'blending':
                                json.blending = BlendingMode[ value ];
                                break;
                            case 'colorAmbient':
                            case 'mapAmbient':
                                console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
                                break;
                            case 'colorDiffuse':
                                json.color = color.fromArray( value ).getHex();
                                break;
                            case 'colorSpecular':
                                json.specular = color.fromArray( value ).getHex();
                                break;
                            case 'colorEmissive':
                                json.emissive = color.fromArray( value ).getHex();
                                break;
                            case 'specularCoef':
                                json.shininess = value;
                                break;
                            case 'shading':
                                if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
                                if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
                                if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
                                break;
                            case 'mapDiffuse':
                                json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
                                break;
                            case 'mapDiffuseRepeat':
                            case 'mapDiffuseOffset':
                            case 'mapDiffuseWrap':
                            case 'mapDiffuseAnisotropy':
                                break;
                            case 'mapEmissive':
                                json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
                                break;
                            case 'mapEmissiveRepeat':
                            case 'mapEmissiveOffset':
                            case 'mapEmissiveWrap':
                            case 'mapEmissiveAnisotropy':
                                break;
                            case 'mapLight':
                                json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
                                break;
                            case 'mapLightRepeat':
                            case 'mapLightOffset':
                            case 'mapLightWrap':
                            case 'mapLightAnisotropy':
                                break;
                            case 'mapAO':
                                json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
                                break;
                            case 'mapAORepeat':
                            case 'mapAOOffset':
                            case 'mapAOWrap':
                            case 'mapAOAnisotropy':
                                break;
                            case 'mapBump':
                                json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
                                break;
                            case 'mapBumpScale':
                                json.bumpScale = value;
                                break;
                            case 'mapBumpRepeat':
                            case 'mapBumpOffset':
                            case 'mapBumpWrap':
                            case 'mapBumpAnisotropy':
                                break;
                            case 'mapNormal':
                                json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
                                break;
                            case 'mapNormalFactor':
                                json.normalScale = value;
                                break;
                            case 'mapNormalRepeat':
                            case 'mapNormalOffset':
                            case 'mapNormalWrap':
                            case 'mapNormalAnisotropy':
                                break;
                            case 'mapSpecular':
                                json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
                                break;
                            case 'mapSpecularRepeat':
                            case 'mapSpecularOffset':
                            case 'mapSpecularWrap':
                            case 'mapSpecularAnisotropy':
                                break;
                            case 'mapMetalness':
                                json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
                                break;
                            case 'mapMetalnessRepeat':
                            case 'mapMetalnessOffset':
                            case 'mapMetalnessWrap':
                            case 'mapMetalnessAnisotropy':
                                break;
                            case 'mapRoughness':
                                json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
                                break;
                            case 'mapRoughnessRepeat':
                            case 'mapRoughnessOffset':
                            case 'mapRoughnessWrap':
                            case 'mapRoughnessAnisotropy':
                                break;
                            case 'mapAlpha':
                                json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
                                break;
                            case 'mapAlphaRepeat':
                            case 'mapAlphaOffset':
                            case 'mapAlphaWrap':
                            case 'mapAlphaAnisotropy':
                                break;
                            case 'flipSided':
                                json.side = BackSide;
                                break;
                            case 'doubleSided':
                                json.side = DoubleSide;
                                break;
                            case 'transparency':
                                console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
                                json.opacity = value;
                                break;
                            case 'depthTest':
                            case 'depthWrite':
                            case 'colorWrite':
                            case 'opacity':
                            case 'reflectivity':
                            case 'transparent':
                            case 'visible':
                            case 'wireframe':
                                json[ name ] = value;
                                break;
                            case 'vertexColors':
                                if ( value === true ) json.vertexColors = VertexColors;
                                if ( value === 'face' ) json.vertexColors = FaceColors;
                                break;
                            default:
                                console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
                                break;
    
                        }
    
                    }
    
                    if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
                    if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;
    
                    if ( json.opacity < 1 ) json.transparent = true;
    
                    materialLoader.setTextures( textures );
    
                    return materialLoader.parse( json );
    
                };
    
            } )()
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        var context;
    
        var AudioContext = {
    
            getContext: function () {
    
                if ( context === undefined ) {
    
                    context = new ( window.AudioContext || window.webkitAudioContext )();
    
                }
    
                return context;
    
            },
    
            setContext: function ( value ) {
    
                context = value;
    
            }
    
        };
    
        /**
         * @author Reece Aaron Lecrivain / http://reecenotes.com/
         */
    
        function AudioLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
    
        }
    
        Object.assign( AudioLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var loader = new FileLoader( this.manager );
                loader.setResponseType( 'arraybuffer' );
                loader.setPath( this.path );
                loader.load( url, function ( buffer ) {
    
                    // Create a copy of the buffer. The `decodeAudioData` method
                    // detaches the buffer when complete, preventing reuse.
                    var bufferCopy = buffer.slice( 0 );
    
                    var context = AudioContext.getContext();
                    context.decodeAudioData( bufferCopy, function ( audioBuffer ) {
    
                        onLoad( audioBuffer );
    
                    } );
    
                }, onProgress, onError );
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function StereoCamera() {
    
            this.type = 'StereoCamera';
    
            this.aspect = 1;
    
            this.eyeSep = 0.064;
    
            this.cameraL = new PerspectiveCamera();
            this.cameraL.layers.enable( 1 );
            this.cameraL.matrixAutoUpdate = false;
    
            this.cameraR = new PerspectiveCamera();
            this.cameraR.layers.enable( 2 );
            this.cameraR.matrixAutoUpdate = false;
    
        }
    
        Object.assign( StereoCamera.prototype, {
    
            update: ( function () {
    
                var instance, focus, fov, aspect, near, far, zoom, eyeSep;
    
                var eyeRight = new Matrix4();
                var eyeLeft = new Matrix4();
    
                return function update( camera ) {
    
                    var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
                                                        aspect !== camera.aspect * this.aspect || near !== camera.near ||
                                                        far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;
    
                    if ( needsUpdate ) {
    
                        instance = this;
                        focus = camera.focus;
                        fov = camera.fov;
                        aspect = camera.aspect * this.aspect;
                        near = camera.near;
                        far = camera.far;
                        zoom = camera.zoom;
    
                        // Off-axis stereoscopic effect based on
                        // http://paulbourke.net/stereographics/stereorender/
    
                        var projectionMatrix = camera.projectionMatrix.clone();
                        eyeSep = this.eyeSep / 2;
                        var eyeSepOnProjection = eyeSep * near / focus;
                        var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
                        var xmin, xmax;
    
                        // translate xOffset
    
                        eyeLeft.elements[ 12 ] = - eyeSep;
                        eyeRight.elements[ 12 ] = eyeSep;
    
                        // for left eye
    
                        xmin = - ymax * aspect + eyeSepOnProjection;
                        xmax = ymax * aspect + eyeSepOnProjection;
    
                        projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
                        projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
    
                        this.cameraL.projectionMatrix.copy( projectionMatrix );
    
                        // for right eye
    
                        xmin = - ymax * aspect - eyeSepOnProjection;
                        xmax = ymax * aspect - eyeSepOnProjection;
    
                        projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
                        projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
    
                        this.cameraR.projectionMatrix.copy( projectionMatrix );
    
                    }
    
                    this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
                    this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );
    
                };
    
            } )()
    
        } );
    
        /**
         * Camera for rendering cube maps
         *	- renders scene into axis-aligned cube
         *
         * @author alteredq / http://alteredqualia.com/
         */
    
        function CubeCamera( near, far, cubeResolution, options ) {
    
            Object3D.call( this );
    
            this.type = 'CubeCamera';
    
            var fov = 90, aspect = 1;
    
            var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
            cameraPX.up.set( 0, - 1, 0 );
            cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
            this.add( cameraPX );
    
            var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
            cameraNX.up.set( 0, - 1, 0 );
            cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
            this.add( cameraNX );
    
            var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
            cameraPY.up.set( 0, 0, 1 );
            cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
            this.add( cameraPY );
    
            var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
            cameraNY.up.set( 0, 0, - 1 );
            cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
            this.add( cameraNY );
    
            var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
            cameraPZ.up.set( 0, - 1, 0 );
            cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
            this.add( cameraPZ );
    
            var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
            cameraNZ.up.set( 0, - 1, 0 );
            cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
            this.add( cameraNZ );
    
            options = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };
    
            this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
            this.renderTarget.texture.name = "CubeCamera";
    
            this.update = function ( renderer, scene ) {
    
                if ( this.parent === null ) this.updateMatrixWorld();
    
                var currentRenderTarget = renderer.getRenderTarget();
    
                var renderTarget = this.renderTarget;
                var generateMipmaps = renderTarget.texture.generateMipmaps;
    
                renderTarget.texture.generateMipmaps = false;
    
                renderer.setRenderTarget( renderTarget, 0 );
                renderer.render( scene, cameraPX );
    
                renderer.setRenderTarget( renderTarget, 1 );
                renderer.render( scene, cameraNX );
    
                renderer.setRenderTarget( renderTarget, 2 );
                renderer.render( scene, cameraPY );
    
                renderer.setRenderTarget( renderTarget, 3 );
                renderer.render( scene, cameraNY );
    
                renderer.setRenderTarget( renderTarget, 4 );
                renderer.render( scene, cameraPZ );
    
                renderTarget.texture.generateMipmaps = generateMipmaps;
    
                renderer.setRenderTarget( renderTarget, 5 );
                renderer.render( scene, cameraNZ );
    
                renderer.setRenderTarget( currentRenderTarget );
    
            };
    
            this.clear = function ( renderer, color, depth, stencil ) {
    
                var currentRenderTarget = renderer.getRenderTarget();
    
                var renderTarget = this.renderTarget;
    
                for ( var i = 0; i < 6; i ++ ) {
    
                    renderer.setRenderTarget( renderTarget, i );
    
                    renderer.clear( color, depth, stencil );
    
                }
    
                renderer.setRenderTarget( currentRenderTarget );
    
            };
    
        }
    
        CubeCamera.prototype = Object.create( Object3D.prototype );
        CubeCamera.prototype.constructor = CubeCamera;
    
        /**
         * @author alteredq / http://alteredqualia.com/
         */
    
        function Clock( autoStart ) {
    
            this.autoStart = ( autoStart !== undefined ) ? autoStart : true;
    
            this.startTime = 0;
            this.oldTime = 0;
            this.elapsedTime = 0;
    
            this.running = false;
    
        }
    
        Object.assign( Clock.prototype, {
    
            start: function () {
    
                this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732
    
                this.oldTime = this.startTime;
                this.elapsedTime = 0;
                this.running = true;
    
            },
    
            stop: function () {
    
                this.getElapsedTime();
                this.running = false;
                this.autoStart = false;
    
            },
    
            getElapsedTime: function () {
    
                this.getDelta();
                return this.elapsedTime;
    
            },
    
            getDelta: function () {
    
                var diff = 0;
    
                if ( this.autoStart && ! this.running ) {
    
                    this.start();
                    return 0;
    
                }
    
                if ( this.running ) {
    
                    var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();
    
                    diff = ( newTime - this.oldTime ) / 1000;
                    this.oldTime = newTime;
    
                    this.elapsedTime += diff;
    
                }
    
                return diff;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function AudioListener() {
    
            Object3D.call( this );
    
            this.type = 'AudioListener';
    
            this.context = AudioContext.getContext();
    
            this.gain = this.context.createGain();
            this.gain.connect( this.context.destination );
    
            this.filter = null;
    
            this.timeDelta = 0;
    
        }
    
        AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: AudioListener,
    
            getInput: function () {
    
                return this.gain;
    
            },
    
            removeFilter: function ( ) {
    
                if ( this.filter !== null ) {
    
                    this.gain.disconnect( this.filter );
                    this.filter.disconnect( this.context.destination );
                    this.gain.connect( this.context.destination );
                    this.filter = null;
    
                }
    
                return this;
    
            },
    
            getFilter: function () {
    
                return this.filter;
    
            },
    
            setFilter: function ( value ) {
    
                if ( this.filter !== null ) {
    
                    this.gain.disconnect( this.filter );
                    this.filter.disconnect( this.context.destination );
    
                } else {
    
                    this.gain.disconnect( this.context.destination );
    
                }
    
                this.filter = value;
                this.gain.connect( this.filter );
                this.filter.connect( this.context.destination );
    
                return this;
    
            },
    
            getMasterVolume: function () {
    
                return this.gain.gain.value;
    
            },
    
            setMasterVolume: function ( value ) {
    
                this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
    
                return this;
    
            },
    
            updateMatrixWorld: ( function () {
    
                var position = new Vector3();
                var quaternion = new Quaternion();
                var scale = new Vector3();
    
                var orientation = new Vector3();
                var clock = new Clock();
    
                return function updateMatrixWorld( force ) {
    
                    Object3D.prototype.updateMatrixWorld.call( this, force );
    
                    var listener = this.context.listener;
                    var up = this.up;
    
                    this.timeDelta = clock.getDelta();
    
                    this.matrixWorld.decompose( position, quaternion, scale );
    
                    orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );
    
                    if ( listener.positionX ) {
    
                        // code path for Chrome (see #14393)
    
                        var endTime = this.context.currentTime + this.timeDelta;
    
                        listener.positionX.linearRampToValueAtTime( position.x, endTime );
                        listener.positionY.linearRampToValueAtTime( position.y, endTime );
                        listener.positionZ.linearRampToValueAtTime( position.z, endTime );
                        listener.forwardX.linearRampToValueAtTime( orientation.x, endTime );
                        listener.forwardY.linearRampToValueAtTime( orientation.y, endTime );
                        listener.forwardZ.linearRampToValueAtTime( orientation.z, endTime );
                        listener.upX.linearRampToValueAtTime( up.x, endTime );
                        listener.upY.linearRampToValueAtTime( up.y, endTime );
                        listener.upZ.linearRampToValueAtTime( up.z, endTime );
    
                    } else {
    
                        listener.setPosition( position.x, position.y, position.z );
                        listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );
    
                    }
    
                };
    
            } )()
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Reece Aaron Lecrivain / http://reecenotes.com/
         */
    
        function Audio( listener ) {
    
            Object3D.call( this );
    
            this.type = 'Audio';
    
            this.listener = listener;
            this.context = listener.context;
    
            this.gain = this.context.createGain();
            this.gain.connect( listener.getInput() );
    
            this.autoplay = false;
    
            this.buffer = null;
            this.detune = 0;
            this.loop = false;
            this.startTime = 0;
            this.offset = 0;
            this.playbackRate = 1;
            this.isPlaying = false;
            this.hasPlaybackControl = true;
            this.sourceType = 'empty';
    
            this.filters = [];
    
        }
    
        Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {
    
            constructor: Audio,
    
            getOutput: function () {
    
                return this.gain;
    
            },
    
            setNodeSource: function ( audioNode ) {
    
                this.hasPlaybackControl = false;
                this.sourceType = 'audioNode';
                this.source = audioNode;
                this.connect();
    
                return this;
    
            },
    
            setMediaElementSource: function ( mediaElement ) {
    
                this.hasPlaybackControl = false;
                this.sourceType = 'mediaNode';
                this.source = this.context.createMediaElementSource( mediaElement );
                this.connect();
    
                return this;
    
            },
    
            setBuffer: function ( audioBuffer ) {
    
                this.buffer = audioBuffer;
                this.sourceType = 'buffer';
    
                if ( this.autoplay ) this.play();
    
                return this;
    
            },
    
            play: function () {
    
                if ( this.isPlaying === true ) {
    
                    console.warn( 'THREE.Audio: Audio is already playing.' );
                    return;
    
                }
    
                if ( this.hasPlaybackControl === false ) {
    
                    console.warn( 'THREE.Audio: this Audio has no playback control.' );
                    return;
    
                }
    
                var source = this.context.createBufferSource();
    
                source.buffer = this.buffer;
                source.loop = this.loop;
                source.onended = this.onEnded.bind( this );
                this.startTime = this.context.currentTime;
                source.start( this.startTime, this.offset );
    
                this.isPlaying = true;
    
                this.source = source;
    
                this.setDetune( this.detune );
                this.setPlaybackRate( this.playbackRate );
    
                return this.connect();
    
            },
    
            pause: function () {
    
                if ( this.hasPlaybackControl === false ) {
    
                    console.warn( 'THREE.Audio: this Audio has no playback control.' );
                    return;
    
                }
    
                if ( this.isPlaying === true ) {
    
                    this.source.stop();
                    this.source.onended = null;
                    this.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;
                    this.isPlaying = false;
    
                }
    
                return this;
    
            },
    
            stop: function () {
    
                if ( this.hasPlaybackControl === false ) {
    
                    console.warn( 'THREE.Audio: this Audio has no playback control.' );
                    return;
    
                }
    
                this.source.stop();
                this.source.onended = null;
                this.offset = 0;
                this.isPlaying = false;
    
                return this;
    
            },
    
            connect: function () {
    
                if ( this.filters.length > 0 ) {
    
                    this.source.connect( this.filters[ 0 ] );
    
                    for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
    
                        this.filters[ i - 1 ].connect( this.filters[ i ] );
    
                    }
    
                    this.filters[ this.filters.length - 1 ].connect( this.getOutput() );
    
                } else {
    
                    this.source.connect( this.getOutput() );
    
                }
    
                return this;
    
            },
    
            disconnect: function () {
    
                if ( this.filters.length > 0 ) {
    
                    this.source.disconnect( this.filters[ 0 ] );
    
                    for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
    
                        this.filters[ i - 1 ].disconnect( this.filters[ i ] );
    
                    }
    
                    this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );
    
                } else {
    
                    this.source.disconnect( this.getOutput() );
    
                }
    
                return this;
    
            },
    
            getFilters: function () {
    
                return this.filters;
    
            },
    
            setFilters: function ( value ) {
    
                if ( ! value ) value = [];
    
                if ( this.isPlaying === true ) {
    
                    this.disconnect();
                    this.filters = value;
                    this.connect();
    
                } else {
    
                    this.filters = value;
    
                }
    
                return this;
    
            },
    
            setDetune: function ( value ) {
    
                this.detune = value;
    
                if ( this.source.detune === undefined ) return; // only set detune when available
    
                if ( this.isPlaying === true ) {
    
                    this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );
    
                }
    
                return this;
    
            },
    
            getDetune: function () {
    
                return this.detune;
    
            },
    
            getFilter: function () {
    
                return this.getFilters()[ 0 ];
    
            },
    
            setFilter: function ( filter ) {
    
                return this.setFilters( filter ? [ filter ] : [] );
    
            },
    
            setPlaybackRate: function ( value ) {
    
                if ( this.hasPlaybackControl === false ) {
    
                    console.warn( 'THREE.Audio: this Audio has no playback control.' );
                    return;
    
                }
    
                this.playbackRate = value;
    
                if ( this.isPlaying === true ) {
    
                    this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );
    
                }
    
                return this;
    
            },
    
            getPlaybackRate: function () {
    
                return this.playbackRate;
    
            },
    
            onEnded: function () {
    
                this.isPlaying = false;
    
            },
    
            getLoop: function () {
    
                if ( this.hasPlaybackControl === false ) {
    
                    console.warn( 'THREE.Audio: this Audio has no playback control.' );
                    return false;
    
                }
    
                return this.loop;
    
            },
    
            setLoop: function ( value ) {
    
                if ( this.hasPlaybackControl === false ) {
    
                    console.warn( 'THREE.Audio: this Audio has no playback control.' );
                    return;
    
                }
    
                this.loop = value;
    
                if ( this.isPlaying === true ) {
    
                    this.source.loop = this.loop;
    
                }
    
                return this;
    
            },
    
            getVolume: function () {
    
                return this.gain.gain.value;
    
            },
    
            setVolume: function ( value ) {
    
                this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function PositionalAudio( listener ) {
    
            Audio.call( this, listener );
    
            this.panner = this.context.createPanner();
            this.panner.connect( this.gain );
    
        }
    
        PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {
    
            constructor: PositionalAudio,
    
            getOutput: function () {
    
                return this.panner;
    
            },
    
            getRefDistance: function () {
    
                return this.panner.refDistance;
    
            },
    
            setRefDistance: function ( value ) {
    
                this.panner.refDistance = value;
    
                return this;
    
            },
    
            getRolloffFactor: function () {
    
                return this.panner.rolloffFactor;
    
            },
    
            setRolloffFactor: function ( value ) {
    
                this.panner.rolloffFactor = value;
    
                return this;
    
            },
    
            getDistanceModel: function () {
    
                return this.panner.distanceModel;
    
            },
    
            setDistanceModel: function ( value ) {
    
                this.panner.distanceModel = value;
    
                return this;
    
            },
    
            getMaxDistance: function () {
    
                return this.panner.maxDistance;
    
            },
    
            setMaxDistance: function ( value ) {
    
                this.panner.maxDistance = value;
    
                return this;
    
            },
    
            setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {
    
                this.panner.coneInnerAngle = coneInnerAngle;
                this.panner.coneOuterAngle = coneOuterAngle;
                this.panner.coneOuterGain = coneOuterGain;
    
                return this;
    
            },
    
            updateMatrixWorld: ( function () {
    
                var position = new Vector3();
                var quaternion = new Quaternion();
                var scale = new Vector3();
    
                var orientation = new Vector3();
    
                return function updateMatrixWorld( force ) {
    
                    Object3D.prototype.updateMatrixWorld.call( this, force );
    
                    if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;
    
                    this.matrixWorld.decompose( position, quaternion, scale );
    
                    orientation.set( 0, 0, 1 ).applyQuaternion( quaternion );
    
                    var panner = this.panner;
    
                    if ( panner.positionX ) {
    
                        // code path for Chrome and Firefox (see #14393)
    
                        var endTime = this.context.currentTime + this.listener.timeDelta;
    
                        panner.positionX.linearRampToValueAtTime( position.x, endTime );
                        panner.positionY.linearRampToValueAtTime( position.y, endTime );
                        panner.positionZ.linearRampToValueAtTime( position.z, endTime );
                        panner.orientationX.linearRampToValueAtTime( orientation.x, endTime );
                        panner.orientationY.linearRampToValueAtTime( orientation.y, endTime );
                        panner.orientationZ.linearRampToValueAtTime( orientation.z, endTime );
    
                    } else {
    
                        panner.setPosition( position.x, position.y, position.z );
                        panner.setOrientation( orientation.x, orientation.y, orientation.z );
    
                    }
    
                };
    
            } )()
    
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function AudioAnalyser( audio, fftSize ) {
    
            this.analyser = audio.context.createAnalyser();
            this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;
    
            this.data = new Uint8Array( this.analyser.frequencyBinCount );
    
            audio.getOutput().connect( this.analyser );
    
        }
    
        Object.assign( AudioAnalyser.prototype, {
    
            getFrequencyData: function () {
    
                this.analyser.getByteFrequencyData( this.data );
    
                return this.data;
    
            },
    
            getAverageFrequency: function () {
    
                var value = 0, data = this.getFrequencyData();
    
                for ( var i = 0; i < data.length; i ++ ) {
    
                    value += data[ i ];
    
                }
    
                return value / data.length;
    
            }
    
        } );
    
        /**
         *
         * Buffered scene graph property that allows weighted accumulation.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function PropertyMixer( binding, typeName, valueSize ) {
    
            this.binding = binding;
            this.valueSize = valueSize;
    
            var bufferType = Float64Array,
                mixFunction;
    
            switch ( typeName ) {
    
                case 'quaternion':
                    mixFunction = this._slerp;
                    break;
    
                case 'string':
                case 'bool':
                    bufferType = Array;
                    mixFunction = this._select;
                    break;
    
                default:
                    mixFunction = this._lerp;
    
            }
    
            this.buffer = new bufferType( valueSize * 4 );
            // layout: [ incoming | accu0 | accu1 | orig ]
            //
            // interpolators can use .buffer as their .result
            // the data then goes to 'incoming'
            //
            // 'accu0' and 'accu1' are used frame-interleaved for
            // the cumulative result and are compared to detect
            // changes
            //
            // 'orig' stores the original state of the property
    
            this._mixBufferRegion = mixFunction;
    
            this.cumulativeWeight = 0;
    
            this.useCount = 0;
            this.referenceCount = 0;
    
        }
    
        Object.assign( PropertyMixer.prototype, {
    
            // accumulate data in the 'incoming' region into 'accu<i>'
            accumulate: function ( accuIndex, weight ) {
    
                // note: happily accumulating nothing when weight = 0, the caller knows
                // the weight and shouldn't have made the call in the first place
    
                var buffer = this.buffer,
                    stride = this.valueSize,
                    offset = accuIndex * stride + stride,
    
                    currentWeight = this.cumulativeWeight;
    
                if ( currentWeight === 0 ) {
    
                    // accuN := incoming * weight
    
                    for ( var i = 0; i !== stride; ++ i ) {
    
                        buffer[ offset + i ] = buffer[ i ];
    
                    }
    
                    currentWeight = weight;
    
                } else {
    
                    // accuN := accuN + incoming * weight
    
                    currentWeight += weight;
                    var mix = weight / currentWeight;
                    this._mixBufferRegion( buffer, offset, 0, mix, stride );
    
                }
    
                this.cumulativeWeight = currentWeight;
    
            },
    
            // apply the state of 'accu<i>' to the binding when accus differ
            apply: function ( accuIndex ) {
    
                var stride = this.valueSize,
                    buffer = this.buffer,
                    offset = accuIndex * stride + stride,
    
                    weight = this.cumulativeWeight,
    
                    binding = this.binding;
    
                this.cumulativeWeight = 0;
    
                if ( weight < 1 ) {
    
                    // accuN := accuN + original * ( 1 - cumulativeWeight )
    
                    var originalValueOffset = stride * 3;
    
                    this._mixBufferRegion(
                        buffer, offset, originalValueOffset, 1 - weight, stride );
    
                }
    
                for ( var i = stride, e = stride + stride; i !== e; ++ i ) {
    
                    if ( buffer[ i ] !== buffer[ i + stride ] ) {
    
                        // value has changed -> update scene graph
    
                        binding.setValue( buffer, offset );
                        break;
    
                    }
    
                }
    
            },
    
            // remember the state of the bound property and copy it to both accus
            saveOriginalState: function () {
    
                var binding = this.binding;
    
                var buffer = this.buffer,
                    stride = this.valueSize,
    
                    originalValueOffset = stride * 3;
    
                binding.getValue( buffer, originalValueOffset );
    
                // accu[0..1] := orig -- initially detect changes against the original
                for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {
    
                    buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];
    
                }
    
                this.cumulativeWeight = 0;
    
            },
    
            // apply the state previously taken via 'saveOriginalState' to the binding
            restoreOriginalState: function () {
    
                var originalValueOffset = this.valueSize * 3;
                this.binding.setValue( this.buffer, originalValueOffset );
    
            },
    
    
            // mix functions
    
            _select: function ( buffer, dstOffset, srcOffset, t, stride ) {
    
                if ( t >= 0.5 ) {
    
                    for ( var i = 0; i !== stride; ++ i ) {
    
                        buffer[ dstOffset + i ] = buffer[ srcOffset + i ];
    
                    }
    
                }
    
            },
    
            _slerp: function ( buffer, dstOffset, srcOffset, t ) {
    
                Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );
    
            },
    
            _lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {
    
                var s = 1 - t;
    
                for ( var i = 0; i !== stride; ++ i ) {
    
                    var j = dstOffset + i;
    
                    buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;
    
                }
    
            }
    
        } );
    
        /**
         *
         * A reference to a real property in the scene graph.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        // Characters [].:/ are reserved for track binding syntax.
        var RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
    
        function Composite( targetGroup, path, optionalParsedPath ) {
    
            var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );
    
            this._targetGroup = targetGroup;
            this._bindings = targetGroup.subscribe_( path, parsedPath );
    
        }
    
        Object.assign( Composite.prototype, {
    
            getValue: function ( array, offset ) {
    
                this.bind(); // bind all binding
    
                var firstValidIndex = this._targetGroup.nCachedObjects_,
                    binding = this._bindings[ firstValidIndex ];
    
                // and only call .getValue on the first
                if ( binding !== undefined ) binding.getValue( array, offset );
    
            },
    
            setValue: function ( array, offset ) {
    
                var bindings = this._bindings;
    
                for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
    
                    bindings[ i ].setValue( array, offset );
    
                }
    
            },
    
            bind: function () {
    
                var bindings = this._bindings;
    
                for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
    
                    bindings[ i ].bind();
    
                }
    
            },
    
            unbind: function () {
    
                var bindings = this._bindings;
    
                for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
    
                    bindings[ i ].unbind();
    
                }
    
            }
    
        } );
    
    
        function PropertyBinding( rootNode, path, parsedPath ) {
    
            this.path = path;
            this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );
    
            this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;
    
            this.rootNode = rootNode;
    
        }
    
        Object.assign( PropertyBinding, {
    
            Composite: Composite,
    
            create: function ( root, path, parsedPath ) {
    
                if ( ! ( root && root.isAnimationObjectGroup ) ) {
    
                    return new PropertyBinding( root, path, parsedPath );
    
                } else {
    
                    return new PropertyBinding.Composite( root, path, parsedPath );
    
                }
    
            },
    
            /**
             * Replaces spaces with underscores and removes unsupported characters from
             * node names, to ensure compatibility with parseTrackName().
             *
             * @param  {string} name Node name to be sanitized.
             * @return {string}
             */
            sanitizeNodeName: ( function () {
    
                var reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );
    
                return function sanitizeNodeName( name ) {
    
                    return name.replace( /\s/g, '_' ).replace( reservedRe, '' );
    
                };
    
            }() ),
    
            parseTrackName: function () {
    
                // Attempts to allow node names from any language. ES5's `\w` regexp matches
                // only latin characters, and the unicode \p{L} is not yet supported. So
                // instead, we exclude reserved characters and match everything else.
                var wordChar = '[^' + RESERVED_CHARS_RE + ']';
                var wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';
    
                // Parent directories, delimited by '/' or ':'. Currently unused, but must
                // be matched to parse the rest of the track name.
                var directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', wordChar );
    
                // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
                var nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );
    
                // Object on target node, and accessor. May not contain reserved
                // characters. Accessor may contain any character except closing bracket.
                var objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', wordChar );
    
                // Property and accessor. May not contain reserved characters. Accessor may
                // contain any non-bracket characters.
                var propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', wordChar );
    
                var trackRe = new RegExp( ''
                    + '^'
                    + directoryRe
                    + nodeRe
                    + objectRe
                    + propertyRe
                    + '$'
                );
    
                var supportedObjectNames = [ 'material', 'materials', 'bones' ];
    
                return function parseTrackName( trackName ) {
    
                    var matches = trackRe.exec( trackName );
    
                    if ( ! matches ) {
    
                        throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );
    
                    }
    
                    var results = {
                        // directoryName: matches[ 1 ], // (tschw) currently unused
                        nodeName: matches[ 2 ],
                        objectName: matches[ 3 ],
                        objectIndex: matches[ 4 ],
                        propertyName: matches[ 5 ], // required
                        propertyIndex: matches[ 6 ]
                    };
    
                    var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );
    
                    if ( lastDot !== undefined && lastDot !== - 1 ) {
    
                        var objectName = results.nodeName.substring( lastDot + 1 );
    
                        // Object names must be checked against a whitelist. Otherwise, there
                        // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
                        // 'bar' could be the objectName, or part of a nodeName (which can
                        // include '.' characters).
                        if ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {
    
                            results.nodeName = results.nodeName.substring( 0, lastDot );
                            results.objectName = objectName;
    
                        }
    
                    }
    
                    if ( results.propertyName === null || results.propertyName.length === 0 ) {
    
                        throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );
    
                    }
    
                    return results;
    
                };
    
            }(),
    
            findNode: function ( root, nodeName ) {
    
                if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {
    
                    return root;
    
                }
    
                // search into skeleton bones.
                if ( root.skeleton ) {
    
                    var bone = root.skeleton.getBoneByName( nodeName );
    
                    if ( bone !== undefined ) {
    
                        return bone;
    
                    }
    
                }
    
                // search into node subtree.
                if ( root.children ) {
    
                    var searchNodeSubtree = function ( children ) {
    
                        for ( var i = 0; i < children.length; i ++ ) {
    
                            var childNode = children[ i ];
    
                            if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
    
                                return childNode;
    
                            }
    
                            var result = searchNodeSubtree( childNode.children );
    
                            if ( result ) return result;
    
                        }
    
                        return null;
    
                    };
    
                    var subTreeNode = searchNodeSubtree( root.children );
    
                    if ( subTreeNode ) {
    
                        return subTreeNode;
    
                    }
    
                }
    
                return null;
    
            }
    
        } );
    
        Object.assign( PropertyBinding.prototype, { // prototype, continued
    
            // these are used to "bind" a nonexistent property
            _getValue_unavailable: function () {},
            _setValue_unavailable: function () {},
    
            BindingType: {
                Direct: 0,
                EntireArray: 1,
                ArrayElement: 2,
                HasFromToArray: 3
            },
    
            Versioning: {
                None: 0,
                NeedsUpdate: 1,
                MatrixWorldNeedsUpdate: 2
            },
    
            GetterByBindingType: [
    
                function getValue_direct( buffer, offset ) {
    
                    buffer[ offset ] = this.node[ this.propertyName ];
    
                },
    
                function getValue_array( buffer, offset ) {
    
                    var source = this.resolvedProperty;
    
                    for ( var i = 0, n = source.length; i !== n; ++ i ) {
    
                        buffer[ offset ++ ] = source[ i ];
    
                    }
    
                },
    
                function getValue_arrayElement( buffer, offset ) {
    
                    buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];
    
                },
    
                function getValue_toArray( buffer, offset ) {
    
                    this.resolvedProperty.toArray( buffer, offset );
    
                }
    
            ],
    
            SetterByBindingTypeAndVersioning: [
    
                [
                    // Direct
    
                    function setValue_direct( buffer, offset ) {
    
                        this.targetObject[ this.propertyName ] = buffer[ offset ];
    
                    },
    
                    function setValue_direct_setNeedsUpdate( buffer, offset ) {
    
                        this.targetObject[ this.propertyName ] = buffer[ offset ];
                        this.targetObject.needsUpdate = true;
    
                    },
    
                    function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {
    
                        this.targetObject[ this.propertyName ] = buffer[ offset ];
                        this.targetObject.matrixWorldNeedsUpdate = true;
    
                    }
    
                ], [
    
                    // EntireArray
    
                    function setValue_array( buffer, offset ) {
    
                        var dest = this.resolvedProperty;
    
                        for ( var i = 0, n = dest.length; i !== n; ++ i ) {
    
                            dest[ i ] = buffer[ offset ++ ];
    
                        }
    
                    },
    
                    function setValue_array_setNeedsUpdate( buffer, offset ) {
    
                        var dest = this.resolvedProperty;
    
                        for ( var i = 0, n = dest.length; i !== n; ++ i ) {
    
                            dest[ i ] = buffer[ offset ++ ];
    
                        }
    
                        this.targetObject.needsUpdate = true;
    
                    },
    
                    function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {
    
                        var dest = this.resolvedProperty;
    
                        for ( var i = 0, n = dest.length; i !== n; ++ i ) {
    
                            dest[ i ] = buffer[ offset ++ ];
    
                        }
    
                        this.targetObject.matrixWorldNeedsUpdate = true;
    
                    }
    
                ], [
    
                    // ArrayElement
    
                    function setValue_arrayElement( buffer, offset ) {
    
                        this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
    
                    },
    
                    function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {
    
                        this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
                        this.targetObject.needsUpdate = true;
    
                    },
    
                    function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {
    
                        this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
                        this.targetObject.matrixWorldNeedsUpdate = true;
    
                    }
    
                ], [
    
                    // HasToFromArray
    
                    function setValue_fromArray( buffer, offset ) {
    
                        this.resolvedProperty.fromArray( buffer, offset );
    
                    },
    
                    function setValue_fromArray_setNeedsUpdate( buffer, offset ) {
    
                        this.resolvedProperty.fromArray( buffer, offset );
                        this.targetObject.needsUpdate = true;
    
                    },
    
                    function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {
    
                        this.resolvedProperty.fromArray( buffer, offset );
                        this.targetObject.matrixWorldNeedsUpdate = true;
    
                    }
    
                ]
    
            ],
    
            getValue: function getValue_unbound( targetArray, offset ) {
    
                this.bind();
                this.getValue( targetArray, offset );
    
                // Note: This class uses a State pattern on a per-method basis:
                // 'bind' sets 'this.getValue' / 'setValue' and shadows the
                // prototype version of these methods with one that represents
                // the bound state. When the property is not found, the methods
                // become no-ops.
    
            },
    
            setValue: function getValue_unbound( sourceArray, offset ) {
    
                this.bind();
                this.setValue( sourceArray, offset );
    
            },
    
            // create getter / setter pair for a property in the scene graph
            bind: function () {
    
                var targetObject = this.node,
                    parsedPath = this.parsedPath,
    
                    objectName = parsedPath.objectName,
                    propertyName = parsedPath.propertyName,
                    propertyIndex = parsedPath.propertyIndex;
    
                if ( ! targetObject ) {
    
                    targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;
    
                    this.node = targetObject;
    
                }
    
                // set fail state so we can just 'return' on error
                this.getValue = this._getValue_unavailable;
                this.setValue = this._setValue_unavailable;
    
                // ensure there is a value node
                if ( ! targetObject ) {
    
                    console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
                    return;
    
                }
    
                if ( objectName ) {
    
                    var objectIndex = parsedPath.objectIndex;
    
                    // special cases were we need to reach deeper into the hierarchy to get the face materials....
                    switch ( objectName ) {
    
                        case 'materials':
    
                            if ( ! targetObject.material ) {
    
                                console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
                                return;
    
                            }
    
                            if ( ! targetObject.material.materials ) {
    
                                console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
                                return;
    
                            }
    
                            targetObject = targetObject.material.materials;
    
                            break;
    
                        case 'bones':
    
                            if ( ! targetObject.skeleton ) {
    
                                console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
                                return;
    
                            }
    
                            // potential future optimization: skip this if propertyIndex is already an integer
                            // and convert the integer string to a true integer.
    
                            targetObject = targetObject.skeleton.bones;
    
                            // support resolving morphTarget names into indices.
                            for ( var i = 0; i < targetObject.length; i ++ ) {
    
                                if ( targetObject[ i ].name === objectIndex ) {
    
                                    objectIndex = i;
                                    break;
    
                                }
    
                            }
    
                            break;
    
                        default:
    
                            if ( targetObject[ objectName ] === undefined ) {
    
                                console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
                                return;
    
                            }
    
                            targetObject = targetObject[ objectName ];
    
                    }
    
    
                    if ( objectIndex !== undefined ) {
    
                        if ( targetObject[ objectIndex ] === undefined ) {
    
                            console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
                            return;
    
                        }
    
                        targetObject = targetObject[ objectIndex ];
    
                    }
    
                }
    
                // resolve property
                var nodeProperty = targetObject[ propertyName ];
    
                if ( nodeProperty === undefined ) {
    
                    var nodeName = parsedPath.nodeName;
    
                    console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
                        '.' + propertyName + ' but it wasn\'t found.', targetObject );
                    return;
    
                }
    
                // determine versioning scheme
                var versioning = this.Versioning.None;
    
                this.targetObject = targetObject;
    
                if ( targetObject.needsUpdate !== undefined ) { // material
    
                    versioning = this.Versioning.NeedsUpdate;
    
                } else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform
    
                    versioning = this.Versioning.MatrixWorldNeedsUpdate;
    
                }
    
                // determine how the property gets bound
                var bindingType = this.BindingType.Direct;
    
                if ( propertyIndex !== undefined ) {
    
                    // access a sub element of the property array (only primitives are supported right now)
    
                    if ( propertyName === "morphTargetInfluences" ) {
    
                        // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
    
                        // support resolving morphTarget names into indices.
                        if ( ! targetObject.geometry ) {
    
                            console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
                            return;
    
                        }
    
                        if ( targetObject.geometry.isBufferGeometry ) {
    
                            if ( ! targetObject.geometry.morphAttributes ) {
    
                                console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
                                return;
    
                            }
    
                            for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {
    
                                if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {
    
                                    propertyIndex = i;
                                    break;
    
                                }
    
                            }
    
    
                        } else {
    
                            if ( ! targetObject.geometry.morphTargets ) {
    
                                console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
                                return;
    
                            }
    
                            for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {
    
                                if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {
    
                                    propertyIndex = i;
                                    break;
    
                                }
    
                            }
    
                        }
    
                    }
    
                    bindingType = this.BindingType.ArrayElement;
    
                    this.resolvedProperty = nodeProperty;
                    this.propertyIndex = propertyIndex;
    
                } else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
    
                    // must use copy for Object3D.Euler/Quaternion
    
                    bindingType = this.BindingType.HasFromToArray;
    
                    this.resolvedProperty = nodeProperty;
    
                } else if ( Array.isArray( nodeProperty ) ) {
    
                    bindingType = this.BindingType.EntireArray;
    
                    this.resolvedProperty = nodeProperty;
    
                } else {
    
                    this.propertyName = propertyName;
    
                }
    
                // select getter / setter
                this.getValue = this.GetterByBindingType[ bindingType ];
                this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];
    
            },
    
            unbind: function () {
    
                this.node = null;
    
                // back to the prototype version of getValue / setValue
                // note: avoiding to mutate the shape of 'this' via 'delete'
                this.getValue = this._getValue_unbound;
                this.setValue = this._setValue_unbound;
    
            }
    
        } );
    
        //!\ DECLARE ALIAS AFTER assign prototype !
        Object.assign( PropertyBinding.prototype, {
    
            // initial state of these methods that calls 'bind'
            _getValue_unbound: PropertyBinding.prototype.getValue,
            _setValue_unbound: PropertyBinding.prototype.setValue,
    
        } );
    
        /**
         *
         * A group of objects that receives a shared animation state.
         *
         * Usage:
         *
         *  - Add objects you would otherwise pass as 'root' to the
         *    constructor or the .clipAction method of AnimationMixer.
         *
         *  - Instead pass this object as 'root'.
         *
         *  - You can also add and remove objects later when the mixer
         *    is running.
         *
         * Note:
         *
         *    Objects of this class appear as one object to the mixer,
         *    so cache control of the individual objects must be done
         *    on the group.
         *
         * Limitation:
         *
         *  - The animated properties must be compatible among the
         *    all objects in the group.
         *
         *  - A single property can either be controlled through a
         *    target group or directly, but not both.
         *
         * @author tschw
         */
    
        function AnimationObjectGroup() {
    
            this.uuid = _Math.generateUUID();
    
            // cached objects followed by the active ones
            this._objects = Array.prototype.slice.call( arguments );
    
            this.nCachedObjects_ = 0; // threshold
            // note: read by PropertyBinding.Composite
    
            var indices = {};
            this._indicesByUUID = indices; // for bookkeeping
    
            for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
    
                indices[ arguments[ i ].uuid ] = i;
    
            }
    
            this._paths = []; // inside: string
            this._parsedPaths = []; // inside: { we don't care, here }
            this._bindings = []; // inside: Array< PropertyBinding >
            this._bindingsIndicesByPath = {}; // inside: indices in these arrays
    
            var scope = this;
    
            this.stats = {
    
                objects: {
                    get total() {
    
                        return scope._objects.length;
    
                    },
                    get inUse() {
    
                        return this.total - scope.nCachedObjects_;
    
                    }
                },
                get bindingsPerObject() {
    
                    return scope._bindings.length;
    
                }
    
            };
    
        }
    
        Object.assign( AnimationObjectGroup.prototype, {
    
            isAnimationObjectGroup: true,
    
            add: function () {
    
                var objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    paths = this._paths,
                    parsedPaths = this._parsedPaths,
                    bindings = this._bindings,
                    nBindings = bindings.length,
                    knownObject = undefined;
    
                for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
    
                    var object = arguments[ i ],
                        uuid = object.uuid,
                        index = indicesByUUID[ uuid ];
    
                    if ( index === undefined ) {
    
                        // unknown object -> add it to the ACTIVE region
    
                        index = nObjects ++;
                        indicesByUUID[ uuid ] = index;
                        objects.push( object );
    
                        // accounting is done, now do the same for all bindings
    
                        for ( var j = 0, m = nBindings; j !== m; ++ j ) {
    
                            bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );
    
                        }
    
                    } else if ( index < nCachedObjects ) {
    
                        knownObject = objects[ index ];
    
                        // move existing object to the ACTIVE region
    
                        var firstActiveIndex = -- nCachedObjects,
                            lastCachedObject = objects[ firstActiveIndex ];
    
                        indicesByUUID[ lastCachedObject.uuid ] = index;
                        objects[ index ] = lastCachedObject;
    
                        indicesByUUID[ uuid ] = firstActiveIndex;
                        objects[ firstActiveIndex ] = object;
    
                        // accounting is done, now do the same for all bindings
    
                        for ( var j = 0, m = nBindings; j !== m; ++ j ) {
    
                            var bindingsForPath = bindings[ j ],
                                lastCached = bindingsForPath[ firstActiveIndex ],
                                binding = bindingsForPath[ index ];
    
                            bindingsForPath[ index ] = lastCached;
    
                            if ( binding === undefined ) {
    
                                // since we do not bother to create new bindings
                                // for objects that are cached, the binding may
                                // or may not exist
    
                                binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );
    
                            }
    
                            bindingsForPath[ firstActiveIndex ] = binding;
    
                        }
    
                    } else if ( objects[ index ] !== knownObject ) {
    
                        console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
                            'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );
    
                    } // else the object is already where we want it to be
    
                } // for arguments
    
                this.nCachedObjects_ = nCachedObjects;
    
            },
    
            remove: function () {
    
                var objects = this._objects,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    bindings = this._bindings,
                    nBindings = bindings.length;
    
                for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
    
                    var object = arguments[ i ],
                        uuid = object.uuid,
                        index = indicesByUUID[ uuid ];
    
                    if ( index !== undefined && index >= nCachedObjects ) {
    
                        // move existing object into the CACHED region
    
                        var lastCachedIndex = nCachedObjects ++,
                            firstActiveObject = objects[ lastCachedIndex ];
    
                        indicesByUUID[ firstActiveObject.uuid ] = index;
                        objects[ index ] = firstActiveObject;
    
                        indicesByUUID[ uuid ] = lastCachedIndex;
                        objects[ lastCachedIndex ] = object;
    
                        // accounting is done, now do the same for all bindings
    
                        for ( var j = 0, m = nBindings; j !== m; ++ j ) {
    
                            var bindingsForPath = bindings[ j ],
                                firstActive = bindingsForPath[ lastCachedIndex ],
                                binding = bindingsForPath[ index ];
    
                            bindingsForPath[ index ] = firstActive;
                            bindingsForPath[ lastCachedIndex ] = binding;
    
                        }
    
                    }
    
                } // for arguments
    
                this.nCachedObjects_ = nCachedObjects;
    
            },
    
            // remove & forget
            uncache: function () {
    
                var objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    indicesByUUID = this._indicesByUUID,
                    bindings = this._bindings,
                    nBindings = bindings.length;
    
                for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
    
                    var object = arguments[ i ],
                        uuid = object.uuid,
                        index = indicesByUUID[ uuid ];
    
                    if ( index !== undefined ) {
    
                        delete indicesByUUID[ uuid ];
    
                        if ( index < nCachedObjects ) {
    
                            // object is cached, shrink the CACHED region
    
                            var firstActiveIndex = -- nCachedObjects,
                                lastCachedObject = objects[ firstActiveIndex ],
                                lastIndex = -- nObjects,
                                lastObject = objects[ lastIndex ];
    
                            // last cached object takes this object's place
                            indicesByUUID[ lastCachedObject.uuid ] = index;
                            objects[ index ] = lastCachedObject;
    
                            // last object goes to the activated slot and pop
                            indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
                            objects[ firstActiveIndex ] = lastObject;
                            objects.pop();
    
                            // accounting is done, now do the same for all bindings
    
                            for ( var j = 0, m = nBindings; j !== m; ++ j ) {
    
                                var bindingsForPath = bindings[ j ],
                                    lastCached = bindingsForPath[ firstActiveIndex ],
                                    last = bindingsForPath[ lastIndex ];
    
                                bindingsForPath[ index ] = lastCached;
                                bindingsForPath[ firstActiveIndex ] = last;
                                bindingsForPath.pop();
    
                            }
    
                        } else {
    
                            // object is active, just swap with the last and pop
    
                            var lastIndex = -- nObjects,
                                lastObject = objects[ lastIndex ];
    
                            indicesByUUID[ lastObject.uuid ] = index;
                            objects[ index ] = lastObject;
                            objects.pop();
    
                            // accounting is done, now do the same for all bindings
    
                            for ( var j = 0, m = nBindings; j !== m; ++ j ) {
    
                                var bindingsForPath = bindings[ j ];
    
                                bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
                                bindingsForPath.pop();
    
                            }
    
                        } // cached or active
    
                    } // if object is known
    
                } // for arguments
    
                this.nCachedObjects_ = nCachedObjects;
    
            },
    
            // Internal interface used by befriended PropertyBinding.Composite:
    
            subscribe_: function ( path, parsedPath ) {
    
                // returns an array of bindings for the given path that is changed
                // according to the contained objects in the group
    
                var indicesByPath = this._bindingsIndicesByPath,
                    index = indicesByPath[ path ],
                    bindings = this._bindings;
    
                if ( index !== undefined ) return bindings[ index ];
    
                var paths = this._paths,
                    parsedPaths = this._parsedPaths,
                    objects = this._objects,
                    nObjects = objects.length,
                    nCachedObjects = this.nCachedObjects_,
                    bindingsForPath = new Array( nObjects );
    
                index = bindings.length;
    
                indicesByPath[ path ] = index;
    
                paths.push( path );
                parsedPaths.push( parsedPath );
                bindings.push( bindingsForPath );
    
                for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {
    
                    var object = objects[ i ];
                    bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );
    
                }
    
                return bindingsForPath;
    
            },
    
            unsubscribe_: function ( path ) {
    
                // tells the group to forget about a property path and no longer
                // update the array previously obtained with 'subscribe_'
    
                var indicesByPath = this._bindingsIndicesByPath,
                    index = indicesByPath[ path ];
    
                if ( index !== undefined ) {
    
                    var paths = this._paths,
                        parsedPaths = this._parsedPaths,
                        bindings = this._bindings,
                        lastBindingsIndex = bindings.length - 1,
                        lastBindings = bindings[ lastBindingsIndex ],
                        lastBindingsPath = path[ lastBindingsIndex ];
    
                    indicesByPath[ lastBindingsPath ] = index;
    
                    bindings[ index ] = lastBindings;
                    bindings.pop();
    
                    parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
                    parsedPaths.pop();
    
                    paths[ index ] = paths[ lastBindingsIndex ];
                    paths.pop();
    
                }
    
            }
    
        } );
    
        /**
         *
         * Action provided by AnimationMixer for scheduling clip playback on specific
         * objects.
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         *
         */
    
        function AnimationAction( mixer, clip, localRoot ) {
    
            this._mixer = mixer;
            this._clip = clip;
            this._localRoot = localRoot || null;
    
            var tracks = clip.tracks,
                nTracks = tracks.length,
                interpolants = new Array( nTracks );
    
            var interpolantSettings = {
                endingStart: ZeroCurvatureEnding,
                endingEnd: ZeroCurvatureEnding
            };
    
            for ( var i = 0; i !== nTracks; ++ i ) {
    
                var interpolant = tracks[ i ].createInterpolant( null );
                interpolants[ i ] = interpolant;
                interpolant.settings = interpolantSettings;
    
            }
    
            this._interpolantSettings = interpolantSettings;
    
            this._interpolants = interpolants; // bound by the mixer
    
            // inside: PropertyMixer (managed by the mixer)
            this._propertyBindings = new Array( nTracks );
    
            this._cacheIndex = null; // for the memory manager
            this._byClipCacheIndex = null; // for the memory manager
    
            this._timeScaleInterpolant = null;
            this._weightInterpolant = null;
    
            this.loop = LoopRepeat;
            this._loopCount = - 1;
    
            // global mixer time when the action is to be started
            // it's set back to 'null' upon start of the action
            this._startTime = null;
    
            // scaled local time of the action
            // gets clamped or wrapped to 0..clip.duration according to loop
            this.time = 0;
    
            this.timeScale = 1;
            this._effectiveTimeScale = 1;
    
            this.weight = 1;
            this._effectiveWeight = 1;
    
            this.repetitions = Infinity; // no. of repetitions when looping
    
            this.paused = false; // true -> zero effective time scale
            this.enabled = true; // false -> zero effective weight
    
            this.clampWhenFinished = false;// keep feeding the last frame?
    
            this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
            this.zeroSlopeAtEnd = true;// clips for start, loop and end
    
        }
    
        Object.assign( AnimationAction.prototype, {
    
            // State & Scheduling
    
            play: function () {
    
                this._mixer._activateAction( this );
    
                return this;
    
            },
    
            stop: function () {
    
                this._mixer._deactivateAction( this );
    
                return this.reset();
    
            },
    
            reset: function () {
    
                this.paused = false;
                this.enabled = true;
    
                this.time = 0; // restart clip
                this._loopCount = - 1;// forget previous loops
                this._startTime = null;// forget scheduling
    
                return this.stopFading().stopWarping();
    
            },
    
            isRunning: function () {
    
                return this.enabled && ! this.paused && this.timeScale !== 0 &&
                    this._startTime === null && this._mixer._isActiveAction( this );
    
            },
    
            // return true when play has been called
            isScheduled: function () {
    
                return this._mixer._isActiveAction( this );
    
            },
    
            startAt: function ( time ) {
    
                this._startTime = time;
    
                return this;
    
            },
    
            setLoop: function ( mode, repetitions ) {
    
                this.loop = mode;
                this.repetitions = repetitions;
    
                return this;
    
            },
    
            // Weight
    
            // set the weight stopping any scheduled fading
            // although .enabled = false yields an effective weight of zero, this
            // method does *not* change .enabled, because it would be confusing
            setEffectiveWeight: function ( weight ) {
    
                this.weight = weight;
    
                // note: same logic as when updated at runtime
                this._effectiveWeight = this.enabled ? weight : 0;
    
                return this.stopFading();
    
            },
    
            // return the weight considering fading and .enabled
            getEffectiveWeight: function () {
    
                return this._effectiveWeight;
    
            },
    
            fadeIn: function ( duration ) {
    
                return this._scheduleFading( duration, 0, 1 );
    
            },
    
            fadeOut: function ( duration ) {
    
                return this._scheduleFading( duration, 1, 0 );
    
            },
    
            crossFadeFrom: function ( fadeOutAction, duration, warp ) {
    
                fadeOutAction.fadeOut( duration );
                this.fadeIn( duration );
    
                if ( warp ) {
    
                    var fadeInDuration = this._clip.duration,
                        fadeOutDuration = fadeOutAction._clip.duration,
    
                        startEndRatio = fadeOutDuration / fadeInDuration,
                        endStartRatio = fadeInDuration / fadeOutDuration;
    
                    fadeOutAction.warp( 1.0, startEndRatio, duration );
                    this.warp( endStartRatio, 1.0, duration );
    
                }
    
                return this;
    
            },
    
            crossFadeTo: function ( fadeInAction, duration, warp ) {
    
                return fadeInAction.crossFadeFrom( this, duration, warp );
    
            },
    
            stopFading: function () {
    
                var weightInterpolant = this._weightInterpolant;
    
                if ( weightInterpolant !== null ) {
    
                    this._weightInterpolant = null;
                    this._mixer._takeBackControlInterpolant( weightInterpolant );
    
                }
    
                return this;
    
            },
    
            // Time Scale Control
    
            // set the time scale stopping any scheduled warping
            // although .paused = true yields an effective time scale of zero, this
            // method does *not* change .paused, because it would be confusing
            setEffectiveTimeScale: function ( timeScale ) {
    
                this.timeScale = timeScale;
                this._effectiveTimeScale = this.paused ? 0 : timeScale;
    
                return this.stopWarping();
    
            },
    
            // return the time scale considering warping and .paused
            getEffectiveTimeScale: function () {
    
                return this._effectiveTimeScale;
    
            },
    
            setDuration: function ( duration ) {
    
                this.timeScale = this._clip.duration / duration;
    
                return this.stopWarping();
    
            },
    
            syncWith: function ( action ) {
    
                this.time = action.time;
                this.timeScale = action.timeScale;
    
                return this.stopWarping();
    
            },
    
            halt: function ( duration ) {
    
                return this.warp( this._effectiveTimeScale, 0, duration );
    
            },
    
            warp: function ( startTimeScale, endTimeScale, duration ) {
    
                var mixer = this._mixer, now = mixer.time,
                    interpolant = this._timeScaleInterpolant,
    
                    timeScale = this.timeScale;
    
                if ( interpolant === null ) {
    
                    interpolant = mixer._lendControlInterpolant();
                    this._timeScaleInterpolant = interpolant;
    
                }
    
                var times = interpolant.parameterPositions,
                    values = interpolant.sampleValues;
    
                times[ 0 ] = now;
                times[ 1 ] = now + duration;
    
                values[ 0 ] = startTimeScale / timeScale;
                values[ 1 ] = endTimeScale / timeScale;
    
                return this;
    
            },
    
            stopWarping: function () {
    
                var timeScaleInterpolant = this._timeScaleInterpolant;
    
                if ( timeScaleInterpolant !== null ) {
    
                    this._timeScaleInterpolant = null;
                    this._mixer._takeBackControlInterpolant( timeScaleInterpolant );
    
                }
    
                return this;
    
            },
    
            // Object Accessors
    
            getMixer: function () {
    
                return this._mixer;
    
            },
    
            getClip: function () {
    
                return this._clip;
    
            },
    
            getRoot: function () {
    
                return this._localRoot || this._mixer._root;
    
            },
    
            // Interna
    
            _update: function ( time, deltaTime, timeDirection, accuIndex ) {
    
                // called by the mixer
    
                if ( ! this.enabled ) {
    
                    // call ._updateWeight() to update ._effectiveWeight
    
                    this._updateWeight( time );
                    return;
    
                }
    
                var startTime = this._startTime;
    
                if ( startTime !== null ) {
    
                    // check for scheduled start of action
    
                    var timeRunning = ( time - startTime ) * timeDirection;
                    if ( timeRunning < 0 || timeDirection === 0 ) {
    
                        return; // yet to come / don't decide when delta = 0
    
                    }
    
                    // start
    
                    this._startTime = null; // unschedule
                    deltaTime = timeDirection * timeRunning;
    
                }
    
                // apply time scale and advance time
    
                deltaTime *= this._updateTimeScale( time );
                var clipTime = this._updateTime( deltaTime );
    
                // note: _updateTime may disable the action resulting in
                // an effective weight of 0
    
                var weight = this._updateWeight( time );
    
                if ( weight > 0 ) {
    
                    var interpolants = this._interpolants;
                    var propertyMixers = this._propertyBindings;
    
                    for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {
    
                        interpolants[ j ].evaluate( clipTime );
                        propertyMixers[ j ].accumulate( accuIndex, weight );
    
                    }
    
                }
    
            },
    
            _updateWeight: function ( time ) {
    
                var weight = 0;
    
                if ( this.enabled ) {
    
                    weight = this.weight;
                    var interpolant = this._weightInterpolant;
    
                    if ( interpolant !== null ) {
    
                        var interpolantValue = interpolant.evaluate( time )[ 0 ];
    
                        weight *= interpolantValue;
    
                        if ( time > interpolant.parameterPositions[ 1 ] ) {
    
                            this.stopFading();
    
                            if ( interpolantValue === 0 ) {
    
                                // faded out, disable
                                this.enabled = false;
    
                            }
    
                        }
    
                    }
    
                }
    
                this._effectiveWeight = weight;
                return weight;
    
            },
    
            _updateTimeScale: function ( time ) {
    
                var timeScale = 0;
    
                if ( ! this.paused ) {
    
                    timeScale = this.timeScale;
    
                    var interpolant = this._timeScaleInterpolant;
    
                    if ( interpolant !== null ) {
    
                        var interpolantValue = interpolant.evaluate( time )[ 0 ];
    
                        timeScale *= interpolantValue;
    
                        if ( time > interpolant.parameterPositions[ 1 ] ) {
    
                            this.stopWarping();
    
                            if ( timeScale === 0 ) {
    
                                // motion has halted, pause
                                this.paused = true;
    
                            } else {
    
                                // warp done - apply final time scale
                                this.timeScale = timeScale;
    
                            }
    
                        }
    
                    }
    
                }
    
                this._effectiveTimeScale = timeScale;
                return timeScale;
    
            },
    
            _updateTime: function ( deltaTime ) {
    
                var time = this.time + deltaTime;
                var duration = this._clip.duration;
                var loop = this.loop;
                var loopCount = this._loopCount;
    
                var pingPong = ( loop === LoopPingPong );
    
                if ( deltaTime === 0 ) {
    
                    if ( loopCount === - 1 ) return time;
    
                    return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;
    
                }
    
                if ( loop === LoopOnce ) {
    
                    if ( loopCount === - 1 ) {
    
                        // just started
    
                        this._loopCount = 0;
                        this._setEndings( true, true, false );
    
                    }
    
                    handle_stop: {
    
                        if ( time >= duration ) {
    
                            time = duration;
    
                        } else if ( time < 0 ) {
    
                            time = 0;
    
                        } else break handle_stop;
    
                        if ( this.clampWhenFinished ) this.paused = true;
                        else this.enabled = false;
    
                        this._mixer.dispatchEvent( {
                            type: 'finished', action: this,
                            direction: deltaTime < 0 ? - 1 : 1
                        } );
    
                    }
    
                } else { // repetitive Repeat or PingPong
    
                    if ( loopCount === - 1 ) {
    
                        // just started
    
                        if ( deltaTime >= 0 ) {
    
                            loopCount = 0;
    
                            this._setEndings( true, this.repetitions === 0, pingPong );
    
                        } else {
    
                            // when looping in reverse direction, the initial
                            // transition through zero counts as a repetition,
                            // so leave loopCount at -1
    
                            this._setEndings( this.repetitions === 0, true, pingPong );
    
                        }
    
                    }
    
                    if ( time >= duration || time < 0 ) {
    
                        // wrap around
    
                        var loopDelta = Math.floor( time / duration ); // signed
                        time -= duration * loopDelta;
    
                        loopCount += Math.abs( loopDelta );
    
                        var pending = this.repetitions - loopCount;
    
                        if ( pending <= 0 ) {
    
                            // have to stop (switch state, clamp time, fire event)
    
                            if ( this.clampWhenFinished ) this.paused = true;
                            else this.enabled = false;
    
                            time = deltaTime > 0 ? duration : 0;
    
                            this._mixer.dispatchEvent( {
                                type: 'finished', action: this,
                                direction: deltaTime > 0 ? 1 : - 1
                            } );
    
                        } else {
    
                            // keep running
    
                            if ( pending === 1 ) {
    
                                // entering the last round
    
                                var atStart = deltaTime < 0;
                                this._setEndings( atStart, ! atStart, pingPong );
    
                            } else {
    
                                this._setEndings( false, false, pingPong );
    
                            }
    
                            this._loopCount = loopCount;
    
                            this._mixer.dispatchEvent( {
                                type: 'loop', action: this, loopDelta: loopDelta
                            } );
    
                        }
    
                    }
    
                    if ( pingPong && ( loopCount & 1 ) === 1 ) {
    
                        // invert time for the "pong round"
    
                        this.time = time;
                        return duration - time;
    
                    }
    
                }
    
                this.time = time;
                return time;
    
            },
    
            _setEndings: function ( atStart, atEnd, pingPong ) {
    
                var settings = this._interpolantSettings;
    
                if ( pingPong ) {
    
                    settings.endingStart = ZeroSlopeEnding;
                    settings.endingEnd = ZeroSlopeEnding;
    
                } else {
    
                    // assuming for LoopOnce atStart == atEnd == true
    
                    if ( atStart ) {
    
                        settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
    
                    } else {
    
                        settings.endingStart = WrapAroundEnding;
    
                    }
    
                    if ( atEnd ) {
    
                        settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
    
                    } else {
    
                        settings.endingEnd 	 = WrapAroundEnding;
    
                    }
    
                }
    
            },
    
            _scheduleFading: function ( duration, weightNow, weightThen ) {
    
                var mixer = this._mixer, now = mixer.time,
                    interpolant = this._weightInterpolant;
    
                if ( interpolant === null ) {
    
                    interpolant = mixer._lendControlInterpolant();
                    this._weightInterpolant = interpolant;
    
                }
    
                var times = interpolant.parameterPositions,
                    values = interpolant.sampleValues;
    
                times[ 0 ] = now;
                values[ 0 ] = weightNow;
                times[ 1 ] = now + duration;
                values[ 1 ] = weightThen;
    
                return this;
    
            }
    
        } );
    
        /**
         *
         * Player for AnimationClips.
         *
         *
         * @author Ben Houston / http://clara.io/
         * @author David Sarno / http://lighthaus.us/
         * @author tschw
         */
    
        function AnimationMixer( root ) {
    
            this._root = root;
            this._initMemoryManager();
            this._accuIndex = 0;
    
            this.time = 0;
    
            this.timeScale = 1.0;
    
        }
    
        AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
    
            constructor: AnimationMixer,
    
            _bindAction: function ( action, prototypeAction ) {
    
                var root = action._localRoot || this._root,
                    tracks = action._clip.tracks,
                    nTracks = tracks.length,
                    bindings = action._propertyBindings,
                    interpolants = action._interpolants,
                    rootUuid = root.uuid,
                    bindingsByRoot = this._bindingsByRootAndName,
                    bindingsByName = bindingsByRoot[ rootUuid ];
    
                if ( bindingsByName === undefined ) {
    
                    bindingsByName = {};
                    bindingsByRoot[ rootUuid ] = bindingsByName;
    
                }
    
                for ( var i = 0; i !== nTracks; ++ i ) {
    
                    var track = tracks[ i ],
                        trackName = track.name,
                        binding = bindingsByName[ trackName ];
    
                    if ( binding !== undefined ) {
    
                        bindings[ i ] = binding;
    
                    } else {
    
                        binding = bindings[ i ];
    
                        if ( binding !== undefined ) {
    
                            // existing binding, make sure the cache knows
    
                            if ( binding._cacheIndex === null ) {
    
                                ++ binding.referenceCount;
                                this._addInactiveBinding( binding, rootUuid, trackName );
    
                            }
    
                            continue;
    
                        }
    
                        var path = prototypeAction && prototypeAction.
                            _propertyBindings[ i ].binding.parsedPath;
    
                        binding = new PropertyMixer(
                            PropertyBinding.create( root, trackName, path ),
                            track.ValueTypeName, track.getValueSize() );
    
                        ++ binding.referenceCount;
                        this._addInactiveBinding( binding, rootUuid, trackName );
    
                        bindings[ i ] = binding;
    
                    }
    
                    interpolants[ i ].resultBuffer = binding.buffer;
    
                }
    
            },
    
            _activateAction: function ( action ) {
    
                if ( ! this._isActiveAction( action ) ) {
    
                    if ( action._cacheIndex === null ) {
    
                        // this action has been forgotten by the cache, but the user
                        // appears to be still using it -> rebind
    
                        var rootUuid = ( action._localRoot || this._root ).uuid,
                            clipUuid = action._clip.uuid,
                            actionsForClip = this._actionsByClip[ clipUuid ];
    
                        this._bindAction( action,
                            actionsForClip && actionsForClip.knownActions[ 0 ] );
    
                        this._addInactiveAction( action, clipUuid, rootUuid );
    
                    }
    
                    var bindings = action._propertyBindings;
    
                    // increment reference counts / sort out state
                    for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
    
                        var binding = bindings[ i ];
    
                        if ( binding.useCount ++ === 0 ) {
    
                            this._lendBinding( binding );
                            binding.saveOriginalState();
    
                        }
    
                    }
    
                    this._lendAction( action );
    
                }
    
            },
    
            _deactivateAction: function ( action ) {
    
                if ( this._isActiveAction( action ) ) {
    
                    var bindings = action._propertyBindings;
    
                    // decrement reference counts / sort out state
                    for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
    
                        var binding = bindings[ i ];
    
                        if ( -- binding.useCount === 0 ) {
    
                            binding.restoreOriginalState();
                            this._takeBackBinding( binding );
    
                        }
    
                    }
    
                    this._takeBackAction( action );
    
                }
    
            },
    
            // Memory manager
    
            _initMemoryManager: function () {
    
                this._actions = []; // 'nActiveActions' followed by inactive ones
                this._nActiveActions = 0;
    
                this._actionsByClip = {};
                // inside:
                // {
                // 	knownActions: Array< AnimationAction > - used as prototypes
                // 	actionByRoot: AnimationAction - lookup
                // }
    
    
                this._bindings = []; // 'nActiveBindings' followed by inactive ones
                this._nActiveBindings = 0;
    
                this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
    
    
                this._controlInterpolants = []; // same game as above
                this._nActiveControlInterpolants = 0;
    
                var scope = this;
    
                this.stats = {
    
                    actions: {
                        get total() {
    
                            return scope._actions.length;
    
                        },
                        get inUse() {
    
                            return scope._nActiveActions;
    
                        }
                    },
                    bindings: {
                        get total() {
    
                            return scope._bindings.length;
    
                        },
                        get inUse() {
    
                            return scope._nActiveBindings;
    
                        }
                    },
                    controlInterpolants: {
                        get total() {
    
                            return scope._controlInterpolants.length;
    
                        },
                        get inUse() {
    
                            return scope._nActiveControlInterpolants;
    
                        }
                    }
    
                };
    
            },
    
            // Memory management for AnimationAction objects
    
            _isActiveAction: function ( action ) {
    
                var index = action._cacheIndex;
                return index !== null && index < this._nActiveActions;
    
            },
    
            _addInactiveAction: function ( action, clipUuid, rootUuid ) {
    
                var actions = this._actions,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[ clipUuid ];
    
                if ( actionsForClip === undefined ) {
    
                    actionsForClip = {
    
                        knownActions: [ action ],
                        actionByRoot: {}
    
                    };
    
                    action._byClipCacheIndex = 0;
    
                    actionsByClip[ clipUuid ] = actionsForClip;
    
                } else {
    
                    var knownActions = actionsForClip.knownActions;
    
                    action._byClipCacheIndex = knownActions.length;
                    knownActions.push( action );
    
                }
    
                action._cacheIndex = actions.length;
                actions.push( action );
    
                actionsForClip.actionByRoot[ rootUuid ] = action;
    
            },
    
            _removeInactiveAction: function ( action ) {
    
                var actions = this._actions,
                    lastInactiveAction = actions[ actions.length - 1 ],
                    cacheIndex = action._cacheIndex;
    
                lastInactiveAction._cacheIndex = cacheIndex;
                actions[ cacheIndex ] = lastInactiveAction;
                actions.pop();
    
                action._cacheIndex = null;
    
    
                var clipUuid = action._clip.uuid,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[ clipUuid ],
                    knownActionsForClip = actionsForClip.knownActions,
    
                    lastKnownAction =
                        knownActionsForClip[ knownActionsForClip.length - 1 ],
    
                    byClipCacheIndex = action._byClipCacheIndex;
    
                lastKnownAction._byClipCacheIndex = byClipCacheIndex;
                knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
                knownActionsForClip.pop();
    
                action._byClipCacheIndex = null;
    
    
                var actionByRoot = actionsForClip.actionByRoot,
                    rootUuid = ( action._localRoot || this._root ).uuid;
    
                delete actionByRoot[ rootUuid ];
    
                if ( knownActionsForClip.length === 0 ) {
    
                    delete actionsByClip[ clipUuid ];
    
                }
    
                this._removeInactiveBindingsForAction( action );
    
            },
    
            _removeInactiveBindingsForAction: function ( action ) {
    
                var bindings = action._propertyBindings;
                for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
    
                    var binding = bindings[ i ];
    
                    if ( -- binding.referenceCount === 0 ) {
    
                        this._removeInactiveBinding( binding );
    
                    }
    
                }
    
            },
    
            _lendAction: function ( action ) {
    
                // [ active actions |  inactive actions  ]
                // [  active actions >| inactive actions ]
                //                 s        a
                //                  <-swap->
                //                 a        s
    
                var actions = this._actions,
                    prevIndex = action._cacheIndex,
    
                    lastActiveIndex = this._nActiveActions ++,
    
                    firstInactiveAction = actions[ lastActiveIndex ];
    
                action._cacheIndex = lastActiveIndex;
                actions[ lastActiveIndex ] = action;
    
                firstInactiveAction._cacheIndex = prevIndex;
                actions[ prevIndex ] = firstInactiveAction;
    
            },
    
            _takeBackAction: function ( action ) {
    
                // [  active actions  | inactive actions ]
                // [ active actions |< inactive actions  ]
                //        a        s
                //         <-swap->
                //        s        a
    
                var actions = this._actions,
                    prevIndex = action._cacheIndex,
    
                    firstInactiveIndex = -- this._nActiveActions,
    
                    lastActiveAction = actions[ firstInactiveIndex ];
    
                action._cacheIndex = firstInactiveIndex;
                actions[ firstInactiveIndex ] = action;
    
                lastActiveAction._cacheIndex = prevIndex;
                actions[ prevIndex ] = lastActiveAction;
    
            },
    
            // Memory management for PropertyMixer objects
    
            _addInactiveBinding: function ( binding, rootUuid, trackName ) {
    
                var bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[ rootUuid ],
    
                    bindings = this._bindings;
    
                if ( bindingByName === undefined ) {
    
                    bindingByName = {};
                    bindingsByRoot[ rootUuid ] = bindingByName;
    
                }
    
                bindingByName[ trackName ] = binding;
    
                binding._cacheIndex = bindings.length;
                bindings.push( binding );
    
            },
    
            _removeInactiveBinding: function ( binding ) {
    
                var bindings = this._bindings,
                    propBinding = binding.binding,
                    rootUuid = propBinding.rootNode.uuid,
                    trackName = propBinding.path,
                    bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[ rootUuid ],
    
                    lastInactiveBinding = bindings[ bindings.length - 1 ],
                    cacheIndex = binding._cacheIndex;
    
                lastInactiveBinding._cacheIndex = cacheIndex;
                bindings[ cacheIndex ] = lastInactiveBinding;
                bindings.pop();
    
                delete bindingByName[ trackName ];
    
                remove_empty_map: {
    
                    for ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars
    
                    delete bindingsByRoot[ rootUuid ];
    
                }
    
            },
    
            _lendBinding: function ( binding ) {
    
                var bindings = this._bindings,
                    prevIndex = binding._cacheIndex,
    
                    lastActiveIndex = this._nActiveBindings ++,
    
                    firstInactiveBinding = bindings[ lastActiveIndex ];
    
                binding._cacheIndex = lastActiveIndex;
                bindings[ lastActiveIndex ] = binding;
    
                firstInactiveBinding._cacheIndex = prevIndex;
                bindings[ prevIndex ] = firstInactiveBinding;
    
            },
    
            _takeBackBinding: function ( binding ) {
    
                var bindings = this._bindings,
                    prevIndex = binding._cacheIndex,
    
                    firstInactiveIndex = -- this._nActiveBindings,
    
                    lastActiveBinding = bindings[ firstInactiveIndex ];
    
                binding._cacheIndex = firstInactiveIndex;
                bindings[ firstInactiveIndex ] = binding;
    
                lastActiveBinding._cacheIndex = prevIndex;
                bindings[ prevIndex ] = lastActiveBinding;
    
            },
    
    
            // Memory management of Interpolants for weight and time scale
    
            _lendControlInterpolant: function () {
    
                var interpolants = this._controlInterpolants,
                    lastActiveIndex = this._nActiveControlInterpolants ++,
                    interpolant = interpolants[ lastActiveIndex ];
    
                if ( interpolant === undefined ) {
    
                    interpolant = new LinearInterpolant(
                        new Float32Array( 2 ), new Float32Array( 2 ),
                        1, this._controlInterpolantsResultBuffer );
    
                    interpolant.__cacheIndex = lastActiveIndex;
                    interpolants[ lastActiveIndex ] = interpolant;
    
                }
    
                return interpolant;
    
            },
    
            _takeBackControlInterpolant: function ( interpolant ) {
    
                var interpolants = this._controlInterpolants,
                    prevIndex = interpolant.__cacheIndex,
    
                    firstInactiveIndex = -- this._nActiveControlInterpolants,
    
                    lastActiveInterpolant = interpolants[ firstInactiveIndex ];
    
                interpolant.__cacheIndex = firstInactiveIndex;
                interpolants[ firstInactiveIndex ] = interpolant;
    
                lastActiveInterpolant.__cacheIndex = prevIndex;
                interpolants[ prevIndex ] = lastActiveInterpolant;
    
            },
    
            _controlInterpolantsResultBuffer: new Float32Array( 1 ),
    
            // return an action for a clip optionally using a custom root target
            // object (this method allocates a lot of dynamic memory in case a
            // previously unknown clip/root combination is specified)
            clipAction: function ( clip, optionalRoot ) {
    
                var root = optionalRoot || this._root,
                    rootUuid = root.uuid,
    
                    clipObject = typeof clip === 'string' ?
                        AnimationClip.findByName( root, clip ) : clip,
    
                    clipUuid = clipObject !== null ? clipObject.uuid : clip,
    
                    actionsForClip = this._actionsByClip[ clipUuid ],
                    prototypeAction = null;
    
                if ( actionsForClip !== undefined ) {
    
                    var existingAction =
                            actionsForClip.actionByRoot[ rootUuid ];
    
                    if ( existingAction !== undefined ) {
    
                        return existingAction;
    
                    }
    
                    // we know the clip, so we don't have to parse all
                    // the bindings again but can just copy
                    prototypeAction = actionsForClip.knownActions[ 0 ];
    
                    // also, take the clip from the prototype action
                    if ( clipObject === null )
                        clipObject = prototypeAction._clip;
    
                }
    
                // clip must be known when specified via string
                if ( clipObject === null ) return null;
    
                // allocate all resources required to run it
                var newAction = new AnimationAction( this, clipObject, optionalRoot );
    
                this._bindAction( newAction, prototypeAction );
    
                // and make the action known to the memory manager
                this._addInactiveAction( newAction, clipUuid, rootUuid );
    
                return newAction;
    
            },
    
            // get an existing action
            existingAction: function ( clip, optionalRoot ) {
    
                var root = optionalRoot || this._root,
                    rootUuid = root.uuid,
    
                    clipObject = typeof clip === 'string' ?
                        AnimationClip.findByName( root, clip ) : clip,
    
                    clipUuid = clipObject ? clipObject.uuid : clip,
    
                    actionsForClip = this._actionsByClip[ clipUuid ];
    
                if ( actionsForClip !== undefined ) {
    
                    return actionsForClip.actionByRoot[ rootUuid ] || null;
    
                }
    
                return null;
    
            },
    
            // deactivates all previously scheduled actions
            stopAllAction: function () {
    
                var actions = this._actions,
                    nActions = this._nActiveActions,
                    bindings = this._bindings,
                    nBindings = this._nActiveBindings;
    
                this._nActiveActions = 0;
                this._nActiveBindings = 0;
    
                for ( var i = 0; i !== nActions; ++ i ) {
    
                    actions[ i ].reset();
    
                }
    
                for ( var i = 0; i !== nBindings; ++ i ) {
    
                    bindings[ i ].useCount = 0;
    
                }
    
                return this;
    
            },
    
            // advance the time and update apply the animation
            update: function ( deltaTime ) {
    
                deltaTime *= this.timeScale;
    
                var actions = this._actions,
                    nActions = this._nActiveActions,
    
                    time = this.time += deltaTime,
                    timeDirection = Math.sign( deltaTime ),
    
                    accuIndex = this._accuIndex ^= 1;
    
                // run active actions
    
                for ( var i = 0; i !== nActions; ++ i ) {
    
                    var action = actions[ i ];
    
                    action._update( time, deltaTime, timeDirection, accuIndex );
    
                }
    
                // update scene graph
    
                var bindings = this._bindings,
                    nBindings = this._nActiveBindings;
    
                for ( var i = 0; i !== nBindings; ++ i ) {
    
                    bindings[ i ].apply( accuIndex );
    
                }
    
                return this;
    
            },
    
            // return this mixer's root target object
            getRoot: function () {
    
                return this._root;
    
            },
    
            // free all resources specific to a particular clip
            uncacheClip: function ( clip ) {
    
                var actions = this._actions,
                    clipUuid = clip.uuid,
                    actionsByClip = this._actionsByClip,
                    actionsForClip = actionsByClip[ clipUuid ];
    
                if ( actionsForClip !== undefined ) {
    
                    // note: just calling _removeInactiveAction would mess up the
                    // iteration state and also require updating the state we can
                    // just throw away
    
                    var actionsToRemove = actionsForClip.knownActions;
    
                    for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {
    
                        var action = actionsToRemove[ i ];
    
                        this._deactivateAction( action );
    
                        var cacheIndex = action._cacheIndex,
                            lastInactiveAction = actions[ actions.length - 1 ];
    
                        action._cacheIndex = null;
                        action._byClipCacheIndex = null;
    
                        lastInactiveAction._cacheIndex = cacheIndex;
                        actions[ cacheIndex ] = lastInactiveAction;
                        actions.pop();
    
                        this._removeInactiveBindingsForAction( action );
    
                    }
    
                    delete actionsByClip[ clipUuid ];
    
                }
    
            },
    
            // free all resources specific to a particular root target object
            uncacheRoot: function ( root ) {
    
                var rootUuid = root.uuid,
                    actionsByClip = this._actionsByClip;
    
                for ( var clipUuid in actionsByClip ) {
    
                    var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
                        action = actionByRoot[ rootUuid ];
    
                    if ( action !== undefined ) {
    
                        this._deactivateAction( action );
                        this._removeInactiveAction( action );
    
                    }
    
                }
    
                var bindingsByRoot = this._bindingsByRootAndName,
                    bindingByName = bindingsByRoot[ rootUuid ];
    
                if ( bindingByName !== undefined ) {
    
                    for ( var trackName in bindingByName ) {
    
                        var binding = bindingByName[ trackName ];
                        binding.restoreOriginalState();
                        this._removeInactiveBinding( binding );
    
                    }
    
                }
    
            },
    
            // remove a targeted clip from the cache
            uncacheAction: function ( clip, optionalRoot ) {
    
                var action = this.existingAction( clip, optionalRoot );
    
                if ( action !== null ) {
    
                    this._deactivateAction( action );
                    this._removeInactiveAction( action );
    
                }
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function Uniform( value ) {
    
            if ( typeof value === 'string' ) {
    
                console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
                value = arguments[ 1 ];
    
            }
    
            this.value = value;
    
        }
    
        Uniform.prototype.clone = function () {
    
            return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );
    
        };
    
        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */
    
        function InstancedBufferGeometry() {
    
            BufferGeometry.call( this );
    
            this.type = 'InstancedBufferGeometry';
            this.maxInstancedCount = undefined;
    
        }
    
        InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {
    
            constructor: InstancedBufferGeometry,
    
            isInstancedBufferGeometry: true,
    
            copy: function ( source ) {
    
                BufferGeometry.prototype.copy.call( this, source );
    
                this.maxInstancedCount = source.maxInstancedCount;
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            }
    
        } );
    
        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */
    
        function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {
    
            InterleavedBuffer.call( this, array, stride );
    
            this.meshPerAttribute = meshPerAttribute || 1;
    
        }
    
        InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {
    
            constructor: InstancedInterleavedBuffer,
    
            isInstancedInterleavedBuffer: true,
    
            copy: function ( source ) {
    
                InterleavedBuffer.prototype.copy.call( this, source );
    
                this.meshPerAttribute = source.meshPerAttribute;
    
                return this;
    
            }
    
        } );
    
        /**
         * @author benaadams / https://twitter.com/ben_a_adams
         */
    
        function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {
    
            if ( typeof ( normalized ) === 'number' ) {
    
                meshPerAttribute = normalized;
    
                normalized = false;
    
                console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );
    
            }
    
            BufferAttribute.call( this, array, itemSize, normalized );
    
            this.meshPerAttribute = meshPerAttribute || 1;
    
        }
    
        InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {
    
            constructor: InstancedBufferAttribute,
    
            isInstancedBufferAttribute: true,
    
            copy: function ( source ) {
    
                BufferAttribute.prototype.copy.call( this, source );
    
                this.meshPerAttribute = source.meshPerAttribute;
    
                return this;
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author bhouston / http://clara.io/
         * @author stephomi / http://stephaneginier.com/
         */
    
        function Raycaster( origin, direction, near, far ) {
    
            this.ray = new Ray( origin, direction );
            // direction is assumed to be normalized (for accurate distance calculations)
    
            this.near = near || 0;
            this.far = far || Infinity;
    
            this.params = {
                Mesh: {},
                Line: {},
                LOD: {},
                Points: { threshold: 1 },
                Sprite: {}
            };
    
            Object.defineProperties( this.params, {
                PointCloud: {
                    get: function () {
    
                        console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
                        return this.Points;
    
                    }
                }
            } );
    
        }
    
        function ascSort( a, b ) {
    
            return a.distance - b.distance;
    
        }
    
        function intersectObject( object, raycaster, intersects, recursive ) {
    
            if ( object.visible === false ) return;
    
            object.raycast( raycaster, intersects );
    
            if ( recursive === true ) {
    
                var children = object.children;
    
                for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                    intersectObject( children[ i ], raycaster, intersects, true );
    
                }
    
            }
    
        }
    
        Object.assign( Raycaster.prototype, {
    
            linePrecision: 1,
    
            set: function ( origin, direction ) {
    
                // direction is assumed to be normalized (for accurate distance calculations)
    
                this.ray.set( origin, direction );
    
            },
    
            setFromCamera: function ( coords, camera ) {
    
                if ( ( camera && camera.isPerspectiveCamera ) ) {
    
                    this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
                    this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
    
                } else if ( ( camera && camera.isOrthographicCamera ) ) {
    
                    this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
                    this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
    
                } else {
    
                    console.error( 'THREE.Raycaster: Unsupported camera type.' );
    
                }
    
            },
    
            intersectObject: function ( object, recursive, optionalTarget ) {
    
                var intersects = optionalTarget || [];
    
                intersectObject( object, this, intersects, recursive );
    
                intersects.sort( ascSort );
    
                return intersects;
    
            },
    
            intersectObjects: function ( objects, recursive, optionalTarget ) {
    
                var intersects = optionalTarget || [];
    
                if ( Array.isArray( objects ) === false ) {
    
                    console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
                    return intersects;
    
                }
    
                for ( var i = 0, l = objects.length; i < l; i ++ ) {
    
                    intersectObject( objects[ i ], this, intersects, recursive );
    
                }
    
                intersects.sort( ascSort );
    
                return intersects;
    
            }
    
        } );
    
        /**
         * @author bhouston / http://clara.io
         * @author WestLangley / http://github.com/WestLangley
         *
         * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
         *
         * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
         * The azimuthal angle (theta) is measured from the positive z-axiz.
         */
    
        function Spherical( radius, phi, theta ) {
    
            this.radius = ( radius !== undefined ) ? radius : 1.0;
            this.phi = ( phi !== undefined ) ? phi : 0; // polar angle
            this.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle
    
            return this;
    
        }
    
        Object.assign( Spherical.prototype, {
    
            set: function ( radius, phi, theta ) {
    
                this.radius = radius;
                this.phi = phi;
                this.theta = theta;
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( other ) {
    
                this.radius = other.radius;
                this.phi = other.phi;
                this.theta = other.theta;
    
                return this;
    
            },
    
            // restrict phi to be betwee EPS and PI-EPS
            makeSafe: function () {
    
                var EPS = 0.000001;
                this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );
    
                return this;
    
            },
    
            setFromVector3: function ( v ) {
    
                return this.setFromCartesianCoords( v.x, v.y, v.z );
    
            },
    
            setFromCartesianCoords: function ( x, y, z ) {
    
                this.radius = Math.sqrt( x * x + y * y + z * z );
    
                if ( this.radius === 0 ) {
    
                    this.theta = 0;
                    this.phi = 0;
    
                } else {
    
                    this.theta = Math.atan2( x, z );
                    this.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );
    
                }
    
                return this;
    
            }
    
        } );
    
        /**
         * @author Mugen87 / https://github.com/Mugen87
         *
         * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
         *
         */
    
        function Cylindrical( radius, theta, y ) {
    
            this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
            this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
            this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane
    
            return this;
    
        }
    
        Object.assign( Cylindrical.prototype, {
    
            set: function ( radius, theta, y ) {
    
                this.radius = radius;
                this.theta = theta;
                this.y = y;
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( other ) {
    
                this.radius = other.radius;
                this.theta = other.theta;
                this.y = other.y;
    
                return this;
    
            },
    
            setFromVector3: function ( v ) {
    
                return this.setFromCartesianCoords( v.x, v.y, v.z );
    
            },
    
            setFromCartesianCoords: function ( x, y, z ) {
    
                this.radius = Math.sqrt( x * x + z * z );
                this.theta = Math.atan2( x, z );
                this.y = y;
    
                return this;
    
            }
    
        } );
    
        /**
         * @author bhouston / http://clara.io
         */
    
        function Box2( min, max ) {
    
            this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
            this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );
    
        }
    
        Object.assign( Box2.prototype, {
    
            set: function ( min, max ) {
    
                this.min.copy( min );
                this.max.copy( max );
    
                return this;
    
            },
    
            setFromPoints: function ( points ) {
    
                this.makeEmpty();
    
                for ( var i = 0, il = points.length; i < il; i ++ ) {
    
                    this.expandByPoint( points[ i ] );
    
                }
    
                return this;
    
            },
    
            setFromCenterAndSize: function () {
    
                var v1 = new Vector2();
    
                return function setFromCenterAndSize( center, size ) {
    
                    var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
                    this.min.copy( center ).sub( halfSize );
                    this.max.copy( center ).add( halfSize );
    
                    return this;
    
                };
    
            }(),
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( box ) {
    
                this.min.copy( box.min );
                this.max.copy( box.max );
    
                return this;
    
            },
    
            makeEmpty: function () {
    
                this.min.x = this.min.y = + Infinity;
                this.max.x = this.max.y = - Infinity;
    
                return this;
    
            },
    
            isEmpty: function () {
    
                // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
    
                return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
    
            },
    
            getCenter: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Box2: .getCenter() target is now required' );
                    target = new Vector2();
    
                }
    
                return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
    
            },
    
            getSize: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Box2: .getSize() target is now required' );
                    target = new Vector2();
    
                }
    
                return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );
    
            },
    
            expandByPoint: function ( point ) {
    
                this.min.min( point );
                this.max.max( point );
    
                return this;
    
            },
    
            expandByVector: function ( vector ) {
    
                this.min.sub( vector );
                this.max.add( vector );
    
                return this;
    
            },
    
            expandByScalar: function ( scalar ) {
    
                this.min.addScalar( - scalar );
                this.max.addScalar( scalar );
    
                return this;
    
            },
    
            containsPoint: function ( point ) {
    
                return point.x < this.min.x || point.x > this.max.x ||
                    point.y < this.min.y || point.y > this.max.y ? false : true;
    
            },
    
            containsBox: function ( box ) {
    
                return this.min.x <= box.min.x && box.max.x <= this.max.x &&
                    this.min.y <= box.min.y && box.max.y <= this.max.y;
    
            },
    
            getParameter: function ( point, target ) {
    
                // This can potentially have a divide by zero if the box
                // has a size dimension of 0.
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Box2: .getParameter() target is now required' );
                    target = new Vector2();
    
                }
    
                return target.set(
                    ( point.x - this.min.x ) / ( this.max.x - this.min.x ),
                    ( point.y - this.min.y ) / ( this.max.y - this.min.y )
                );
    
            },
    
            intersectsBox: function ( box ) {
    
                // using 4 splitting planes to rule out intersections
    
                return box.max.x < this.min.x || box.min.x > this.max.x ||
                    box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
    
            },
    
            clampPoint: function ( point, target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Box2: .clampPoint() target is now required' );
                    target = new Vector2();
    
                }
    
                return target.copy( point ).clamp( this.min, this.max );
    
            },
    
            distanceToPoint: function () {
    
                var v1 = new Vector2();
    
                return function distanceToPoint( point ) {
    
                    var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
                    return clampedPoint.sub( point ).length();
    
                };
    
            }(),
    
            intersect: function ( box ) {
    
                this.min.max( box.min );
                this.max.min( box.max );
    
                return this;
    
            },
    
            union: function ( box ) {
    
                this.min.min( box.min );
                this.max.max( box.max );
    
                return this;
    
            },
    
            translate: function ( offset ) {
    
                this.min.add( offset );
                this.max.add( offset );
    
                return this;
    
            },
    
            equals: function ( box ) {
    
                return box.min.equals( this.min ) && box.max.equals( this.max );
    
            }
    
        } );
    
        /**
         * @author bhouston / http://clara.io
         */
    
        function Line3( start, end ) {
    
            this.start = ( start !== undefined ) ? start : new Vector3();
            this.end = ( end !== undefined ) ? end : new Vector3();
    
        }
    
        Object.assign( Line3.prototype, {
    
            set: function ( start, end ) {
    
                this.start.copy( start );
                this.end.copy( end );
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            },
    
            copy: function ( line ) {
    
                this.start.copy( line.start );
                this.end.copy( line.end );
    
                return this;
    
            },
    
            getCenter: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Line3: .getCenter() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
    
            },
    
            delta: function ( target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Line3: .delta() target is now required' );
                    target = new Vector3();
    
                }
    
                return target.subVectors( this.end, this.start );
    
            },
    
            distanceSq: function () {
    
                return this.start.distanceToSquared( this.end );
    
            },
    
            distance: function () {
    
                return this.start.distanceTo( this.end );
    
            },
    
            at: function ( t, target ) {
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Line3: .at() target is now required' );
                    target = new Vector3();
    
                }
    
                return this.delta( target ).multiplyScalar( t ).add( this.start );
    
            },
    
            closestPointToPointParameter: function () {
    
                var startP = new Vector3();
                var startEnd = new Vector3();
    
                return function closestPointToPointParameter( point, clampToLine ) {
    
                    startP.subVectors( point, this.start );
                    startEnd.subVectors( this.end, this.start );
    
                    var startEnd2 = startEnd.dot( startEnd );
                    var startEnd_startP = startEnd.dot( startP );
    
                    var t = startEnd_startP / startEnd2;
    
                    if ( clampToLine ) {
    
                        t = _Math.clamp( t, 0, 1 );
    
                    }
    
                    return t;
    
                };
    
            }(),
    
            closestPointToPoint: function ( point, clampToLine, target ) {
    
                var t = this.closestPointToPointParameter( point, clampToLine );
    
                if ( target === undefined ) {
    
                    console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
                    target = new Vector3();
    
                }
    
                return this.delta( target ).multiplyScalar( t ).add( this.start );
    
            },
    
            applyMatrix4: function ( matrix ) {
    
                this.start.applyMatrix4( matrix );
                this.end.applyMatrix4( matrix );
    
                return this;
    
            },
    
            equals: function ( line ) {
    
                return line.start.equals( this.start ) && line.end.equals( this.end );
    
            }
    
        } );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         */
    
        function ImmediateRenderObject( material ) {
    
            Object3D.call( this );
    
            this.material = material;
            this.render = function ( /* renderCallback */ ) {};
    
        }
    
        ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
        ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
    
        ImmediateRenderObject.prototype.isImmediateRenderObject = true;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function VertexNormalsHelper( object, size, hex, linewidth ) {
    
            this.object = object;
    
            this.size = ( size !== undefined ) ? size : 1;
    
            var color = ( hex !== undefined ) ? hex : 0xff0000;
    
            var width = ( linewidth !== undefined ) ? linewidth : 1;
    
            //
    
            var nNormals = 0;
    
            var objGeometry = this.object.geometry;
    
            if ( objGeometry && objGeometry.isGeometry ) {
    
                nNormals = objGeometry.faces.length * 3;
    
            } else if ( objGeometry && objGeometry.isBufferGeometry ) {
    
                nNormals = objGeometry.attributes.normal.count;
    
            }
    
            //
    
            var geometry = new BufferGeometry();
    
            var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );
    
            geometry.addAttribute( 'position', positions );
    
            LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
    
            //
    
            this.matrixAutoUpdate = false;
    
            this.update();
    
        }
    
        VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
        VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;
    
        VertexNormalsHelper.prototype.update = ( function () {
    
            var v1 = new Vector3();
            var v2 = new Vector3();
            var normalMatrix = new Matrix3();
    
            return function update() {
    
                var keys = [ 'a', 'b', 'c' ];
    
                this.object.updateMatrixWorld( true );
    
                normalMatrix.getNormalMatrix( this.object.matrixWorld );
    
                var matrixWorld = this.object.matrixWorld;
    
                var position = this.geometry.attributes.position;
    
                //
    
                var objGeometry = this.object.geometry;
    
                if ( objGeometry && objGeometry.isGeometry ) {
    
                    var vertices = objGeometry.vertices;
    
                    var faces = objGeometry.faces;
    
                    var idx = 0;
    
                    for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
                        var face = faces[ i ];
    
                        for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
    
                            var vertex = vertices[ face[ keys[ j ] ] ];
    
                            var normal = face.vertexNormals[ j ];
    
                            v1.copy( vertex ).applyMatrix4( matrixWorld );
    
                            v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
    
                            position.setXYZ( idx, v1.x, v1.y, v1.z );
    
                            idx = idx + 1;
    
                            position.setXYZ( idx, v2.x, v2.y, v2.z );
    
                            idx = idx + 1;
    
                        }
    
                    }
    
                } else if ( objGeometry && objGeometry.isBufferGeometry ) {
    
                    var objPos = objGeometry.attributes.position;
    
                    var objNorm = objGeometry.attributes.normal;
    
                    var idx = 0;
    
                    // for simplicity, ignore index and drawcalls, and render every normal
    
                    for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {
    
                        v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );
    
                        v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );
    
                        v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
    
                        position.setXYZ( idx, v1.x, v1.y, v1.z );
    
                        idx = idx + 1;
    
                        position.setXYZ( idx, v2.x, v2.y, v2.z );
    
                        idx = idx + 1;
    
                    }
    
                }
    
                position.needsUpdate = true;
    
            };
    
        }() );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function SpotLightHelper( light, color ) {
    
            Object3D.call( this );
    
            this.light = light;
            this.light.updateMatrixWorld();
    
            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;
    
            this.color = color;
    
            var geometry = new BufferGeometry();
    
            var positions = [
                0, 0, 0, 	0, 0, 1,
                0, 0, 0, 	1, 0, 1,
                0, 0, 0,	- 1, 0, 1,
                0, 0, 0, 	0, 1, 1,
                0, 0, 0, 	0, - 1, 1
            ];
    
            for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {
    
                var p1 = ( i / l ) * Math.PI * 2;
                var p2 = ( j / l ) * Math.PI * 2;
    
                positions.push(
                    Math.cos( p1 ), Math.sin( p1 ), 1,
                    Math.cos( p2 ), Math.sin( p2 ), 1
                );
    
            }
    
            geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
    
            var material = new LineBasicMaterial( { fog: false } );
    
            this.cone = new LineSegments( geometry, material );
            this.add( this.cone );
    
            this.update();
    
        }
    
        SpotLightHelper.prototype = Object.create( Object3D.prototype );
        SpotLightHelper.prototype.constructor = SpotLightHelper;
    
        SpotLightHelper.prototype.dispose = function () {
    
            this.cone.geometry.dispose();
            this.cone.material.dispose();
    
        };
    
        SpotLightHelper.prototype.update = function () {
    
            var vector = new Vector3();
    
            return function update() {
    
                this.light.updateMatrixWorld();
    
                var coneLength = this.light.distance ? this.light.distance : 1000;
                var coneWidth = coneLength * Math.tan( this.light.angle );
    
                this.cone.scale.set( coneWidth, coneWidth, coneLength );
    
                vector.setFromMatrixPosition( this.light.target.matrixWorld );
    
                this.cone.lookAt( vector );
    
                if ( this.color !== undefined ) {
    
                    this.cone.material.color.set( this.color );
    
                } else {
    
                    this.cone.material.color.copy( this.light.color );
    
                }
    
            };
    
        }();
    
        /**
         * @author Sean Griffin / http://twitter.com/sgrif
         * @author Michael Guerrero / http://realitymeltdown.com
         * @author mrdoob / http://mrdoob.com/
         * @author ikerr / http://verold.com
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        function getBoneList( object ) {
    
            var boneList = [];
    
            if ( object && object.isBone ) {
    
                boneList.push( object );
    
            }
    
            for ( var i = 0; i < object.children.length; i ++ ) {
    
                boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );
    
            }
    
            return boneList;
    
        }
    
        function SkeletonHelper( object ) {
    
            var bones = getBoneList( object );
    
            var geometry = new BufferGeometry();
    
            var vertices = [];
            var colors = [];
    
            var color1 = new Color( 0, 0, 1 );
            var color2 = new Color( 0, 1, 0 );
    
            for ( var i = 0; i < bones.length; i ++ ) {
    
                var bone = bones[ i ];
    
                if ( bone.parent && bone.parent.isBone ) {
    
                    vertices.push( 0, 0, 0 );
                    vertices.push( 0, 0, 0 );
                    colors.push( color1.r, color1.g, color1.b );
                    colors.push( color2.r, color2.g, color2.b );
    
                }
    
            }
    
            geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
    
            var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );
    
            LineSegments.call( this, geometry, material );
    
            this.root = object;
            this.bones = bones;
    
            this.matrix = object.matrixWorld;
            this.matrixAutoUpdate = false;
    
        }
    
        SkeletonHelper.prototype = Object.create( LineSegments.prototype );
        SkeletonHelper.prototype.constructor = SkeletonHelper;
    
        SkeletonHelper.prototype.updateMatrixWorld = function () {
    
            var vector = new Vector3();
    
            var boneMatrix = new Matrix4();
            var matrixWorldInv = new Matrix4();
    
            return function updateMatrixWorld( force ) {
    
                var bones = this.bones;
    
                var geometry = this.geometry;
                var position = geometry.getAttribute( 'position' );
    
                matrixWorldInv.getInverse( this.root.matrixWorld );
    
                for ( var i = 0, j = 0; i < bones.length; i ++ ) {
    
                    var bone = bones[ i ];
    
                    if ( bone.parent && bone.parent.isBone ) {
    
                        boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
                        vector.setFromMatrixPosition( boneMatrix );
                        position.setXYZ( j, vector.x, vector.y, vector.z );
    
                        boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
                        vector.setFromMatrixPosition( boneMatrix );
                        position.setXYZ( j + 1, vector.x, vector.y, vector.z );
    
                        j += 2;
    
                    }
    
                }
    
                geometry.getAttribute( 'position' ).needsUpdate = true;
    
                Object3D.prototype.updateMatrixWorld.call( this, force );
    
            };
    
        }();
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         */
    
        function PointLightHelper( light, sphereSize, color ) {
    
            this.light = light;
            this.light.updateMatrixWorld();
    
            this.color = color;
    
            var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
            var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
    
            Mesh.call( this, geometry, material );
    
            this.matrix = this.light.matrixWorld;
            this.matrixAutoUpdate = false;
    
            this.update();
    
    
            /*
            var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
            var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
    
            this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
            this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
    
            var d = light.distance;
    
            if ( d === 0.0 ) {
    
                this.lightDistance.visible = false;
    
            } else {
    
                this.lightDistance.scale.set( d, d, d );
    
            }
    
            this.add( this.lightDistance );
            */
    
        }
    
        PointLightHelper.prototype = Object.create( Mesh.prototype );
        PointLightHelper.prototype.constructor = PointLightHelper;
    
        PointLightHelper.prototype.dispose = function () {
    
            this.geometry.dispose();
            this.material.dispose();
    
        };
    
        PointLightHelper.prototype.update = function () {
    
            if ( this.color !== undefined ) {
    
                this.material.color.set( this.color );
    
            } else {
    
                this.material.color.copy( this.light.color );
    
            }
    
            /*
            var d = this.light.distance;
    
            if ( d === 0.0 ) {
    
                this.lightDistance.visible = false;
    
            } else {
    
                this.lightDistance.visible = true;
                this.lightDistance.scale.set( d, d, d );
    
            }
            */
    
        };
    
        /**
         * @author abelnation / http://github.com/abelnation
         * @author Mugen87 / http://github.com/Mugen87
         * @author WestLangley / http://github.com/WestLangley
         *
         *  This helper must be added as a child of the light
         */
    
        function RectAreaLightHelper( light, color ) {
    
            this.type = 'RectAreaLightHelper';
    
            this.light = light;
    
            this.color = color; // optional hardwired color for the helper
    
            var positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];
    
            var geometry = new BufferGeometry();
            geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
            geometry.computeBoundingSphere();
    
            var material = new LineBasicMaterial( { fog: false } );
    
            Line.call( this, geometry, material );
    
            //
    
            var positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];
    
            var geometry2 = new BufferGeometry();
            geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
            geometry2.computeBoundingSphere();
    
            this.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );
    
            this.update();
    
        }
    
        RectAreaLightHelper.prototype = Object.create( Line.prototype );
        RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;
    
        RectAreaLightHelper.prototype.update = function () {
    
            this.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );
    
            if ( this.color !== undefined ) {
    
                this.material.color.set( this.color );
                this.children[ 0 ].material.color.set( this.color );
    
            } else {
    
                this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
    
                // prevent hue shift
                var c = this.material.color;
                var max = Math.max( c.r, c.g, c.b );
                if ( max > 1 ) c.multiplyScalar( 1 / max );
    
                this.children[ 0 ].material.color.copy( this.material.color );
    
            }
    
        };
    
        RectAreaLightHelper.prototype.dispose = function () {
    
            this.geometry.dispose();
            this.material.dispose();
            this.children[ 0 ].geometry.dispose();
            this.children[ 0 ].material.dispose();
    
        };
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / https://github.com/Mugen87
         */
    
        function HemisphereLightHelper( light, size, color ) {
    
            Object3D.call( this );
    
            this.light = light;
            this.light.updateMatrixWorld();
    
            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;
    
            this.color = color;
    
            var geometry = new OctahedronBufferGeometry( size );
            geometry.rotateY( Math.PI * 0.5 );
    
            this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
            if ( this.color === undefined ) this.material.vertexColors = VertexColors;
    
            var position = geometry.getAttribute( 'position' );
            var colors = new Float32Array( position.count * 3 );
    
            geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );
    
            this.add( new Mesh( geometry, this.material ) );
    
            this.update();
    
        }
    
        HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
        HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;
    
        HemisphereLightHelper.prototype.dispose = function () {
    
            this.children[ 0 ].geometry.dispose();
            this.children[ 0 ].material.dispose();
    
        };
    
        HemisphereLightHelper.prototype.update = function () {
    
            var vector = new Vector3();
    
            var color1 = new Color();
            var color2 = new Color();
    
            return function update() {
    
                var mesh = this.children[ 0 ];
    
                if ( this.color !== undefined ) {
    
                    this.material.color.set( this.color );
    
                } else {
    
                    var colors = mesh.geometry.getAttribute( 'color' );
    
                    color1.copy( this.light.color );
                    color2.copy( this.light.groundColor );
    
                    for ( var i = 0, l = colors.count; i < l; i ++ ) {
    
                        var color = ( i < ( l / 2 ) ) ? color1 : color2;
    
                        colors.setXYZ( i, color.r, color.g, color.b );
    
                    }
    
                    colors.needsUpdate = true;
    
                }
    
                mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
    
            };
    
        }();
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function GridHelper( size, divisions, color1, color2 ) {
    
            size = size || 10;
            divisions = divisions || 10;
            color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
            color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
    
            var center = divisions / 2;
            var step = size / divisions;
            var halfSize = size / 2;
    
            var vertices = [], colors = [];
    
            for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {
    
                vertices.push( - halfSize, 0, k, halfSize, 0, k );
                vertices.push( k, 0, - halfSize, k, 0, halfSize );
    
                var color = i === center ? color1 : color2;
    
                color.toArray( colors, j ); j += 3;
                color.toArray( colors, j ); j += 3;
                color.toArray( colors, j ); j += 3;
                color.toArray( colors, j ); j += 3;
    
            }
    
            var geometry = new BufferGeometry();
            geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
    
            var material = new LineBasicMaterial( { vertexColors: VertexColors } );
    
            LineSegments.call( this, geometry, material );
    
        }
    
        GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {
    
            constructor: GridHelper,
    
            copy: function ( source ) {
    
                LineSegments.prototype.copy.call( this, source );
    
                this.geometry.copy( source.geometry );
                this.material.copy( source.material );
    
                return this;
    
            },
    
            clone: function () {
    
                return new this.constructor().copy( this );
    
            }
    
        } );
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / http://github.com/Mugen87
         * @author Hectate / http://www.github.com/Hectate
         */
    
        function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {
    
            radius = radius || 10;
            radials = radials || 16;
            circles = circles || 8;
            divisions = divisions || 64;
            color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
            color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
    
            var vertices = [];
            var colors = [];
    
            var x, z;
            var v, i, j, r, color;
    
            // create the radials
    
            for ( i = 0; i <= radials; i ++ ) {
    
                v = ( i / radials ) * ( Math.PI * 2 );
    
                x = Math.sin( v ) * radius;
                z = Math.cos( v ) * radius;
    
                vertices.push( 0, 0, 0 );
                vertices.push( x, 0, z );
    
                color = ( i & 1 ) ? color1 : color2;
    
                colors.push( color.r, color.g, color.b );
                colors.push( color.r, color.g, color.b );
    
            }
    
            // create the circles
    
            for ( i = 0; i <= circles; i ++ ) {
    
                color = ( i & 1 ) ? color1 : color2;
    
                r = radius - ( radius / circles * i );
    
                for ( j = 0; j < divisions; j ++ ) {
    
                    // first vertex
    
                    v = ( j / divisions ) * ( Math.PI * 2 );
    
                    x = Math.sin( v ) * r;
                    z = Math.cos( v ) * r;
    
                    vertices.push( x, 0, z );
                    colors.push( color.r, color.g, color.b );
    
                    // second vertex
    
                    v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );
    
                    x = Math.sin( v ) * r;
                    z = Math.cos( v ) * r;
    
                    vertices.push( x, 0, z );
                    colors.push( color.r, color.g, color.b );
    
                }
    
            }
    
            var geometry = new BufferGeometry();
            geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
    
            var material = new LineBasicMaterial( { vertexColors: VertexColors } );
    
            LineSegments.call( this, geometry, material );
    
        }
    
        PolarGridHelper.prototype = Object.create( LineSegments.prototype );
        PolarGridHelper.prototype.constructor = PolarGridHelper;
    
        /**
         * @author Mugen87 / http://github.com/Mugen87
         */
    
        function PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {
    
            this.audio = audio;
            this.range = range || 1;
            this.divisionsInnerAngle = divisionsInnerAngle || 16;
            this.divisionsOuterAngle = divisionsOuterAngle || 2;
    
            var geometry = new BufferGeometry();
            var divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;
            var positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );
            geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
    
            var materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );
            var materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );
    
            Line.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );
    
            this.update();
    
        }
    
        PositionalAudioHelper.prototype = Object.create( Line.prototype );
        PositionalAudioHelper.prototype.constructor = PositionalAudioHelper;
    
        PositionalAudioHelper.prototype.update = function () {
    
            var audio = this.audio;
            var range = this.range;
            var divisionsInnerAngle = this.divisionsInnerAngle;
            var divisionsOuterAngle = this.divisionsOuterAngle;
    
            var coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );
            var coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );
    
            var halfConeInnerAngle = coneInnerAngle / 2;
            var halfConeOuterAngle = coneOuterAngle / 2;
    
            var start = 0;
            var count = 0;
            var i, stride;
    
            var geometry = this.geometry;
            var positionAttribute = geometry.attributes.position;
    
            geometry.clearGroups();
    
            //
    
            function generateSegment( from, to, divisions, materialIndex ) {
    
                var step = ( to - from ) / divisions;
    
                positionAttribute.setXYZ( start, 0, 0, 0 );
                count ++;
    
                for ( i = from; i < to; i += step ) {
    
                    stride = start + count;
    
                    positionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );
                    positionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );
                    positionAttribute.setXYZ( stride + 2, 0, 0, 0 );
    
                    count += 3;
    
                }
    
                geometry.addGroup( start, count, materialIndex );
    
                start += count;
                count = 0;
    
            }
    
            //
    
            generateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );
            generateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );
            generateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );
    
            //
    
            positionAttribute.needsUpdate = true;
    
            if ( coneInnerAngle === coneOuterAngle ) this.material[ 0 ].visible = false;
    
        };
    
        PositionalAudioHelper.prototype.dispose = function () {
    
            this.geometry.dispose();
            this.material[ 0 ].dispose();
            this.material[ 1 ].dispose();
    
        };
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function FaceNormalsHelper( object, size, hex, linewidth ) {
    
            // FaceNormalsHelper only supports THREE.Geometry
    
            this.object = object;
    
            this.size = ( size !== undefined ) ? size : 1;
    
            var color = ( hex !== undefined ) ? hex : 0xffff00;
    
            var width = ( linewidth !== undefined ) ? linewidth : 1;
    
            //
    
            var nNormals = 0;
    
            var objGeometry = this.object.geometry;
    
            if ( objGeometry && objGeometry.isGeometry ) {
    
                nNormals = objGeometry.faces.length;
    
            } else {
    
                console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );
    
            }
    
            //
    
            var geometry = new BufferGeometry();
    
            var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );
    
            geometry.addAttribute( 'position', positions );
    
            LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
    
            //
    
            this.matrixAutoUpdate = false;
            this.update();
    
        }
    
        FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
        FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;
    
        FaceNormalsHelper.prototype.update = ( function () {
    
            var v1 = new Vector3();
            var v2 = new Vector3();
            var normalMatrix = new Matrix3();
    
            return function update() {
    
                this.object.updateMatrixWorld( true );
    
                normalMatrix.getNormalMatrix( this.object.matrixWorld );
    
                var matrixWorld = this.object.matrixWorld;
    
                var position = this.geometry.attributes.position;
    
                //
    
                var objGeometry = this.object.geometry;
    
                var vertices = objGeometry.vertices;
    
                var faces = objGeometry.faces;
    
                var idx = 0;
    
                for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
                    var face = faces[ i ];
    
                    var normal = face.normal;
    
                    v1.copy( vertices[ face.a ] )
                        .add( vertices[ face.b ] )
                        .add( vertices[ face.c ] )
                        .divideScalar( 3 )
                        .applyMatrix4( matrixWorld );
    
                    v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
    
                    position.setXYZ( idx, v1.x, v1.y, v1.z );
    
                    idx = idx + 1;
    
                    position.setXYZ( idx, v2.x, v2.y, v2.z );
    
                    idx = idx + 1;
    
                }
    
                position.needsUpdate = true;
    
            };
    
        }() );
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mrdoob / http://mrdoob.com/
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function DirectionalLightHelper( light, size, color ) {
    
            Object3D.call( this );
    
            this.light = light;
            this.light.updateMatrixWorld();
    
            this.matrix = light.matrixWorld;
            this.matrixAutoUpdate = false;
    
            this.color = color;
    
            if ( size === undefined ) size = 1;
    
            var geometry = new BufferGeometry();
            geometry.addAttribute( 'position', new Float32BufferAttribute( [
                - size, size, 0,
                size, size, 0,
                size, - size, 0,
                - size, - size, 0,
                - size, size, 0
            ], 3 ) );
    
            var material = new LineBasicMaterial( { fog: false } );
    
            this.lightPlane = new Line( geometry, material );
            this.add( this.lightPlane );
    
            geometry = new BufferGeometry();
            geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );
    
            this.targetLine = new Line( geometry, material );
            this.add( this.targetLine );
    
            this.update();
    
        }
    
        DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
        DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;
    
        DirectionalLightHelper.prototype.dispose = function () {
    
            this.lightPlane.geometry.dispose();
            this.lightPlane.material.dispose();
            this.targetLine.geometry.dispose();
            this.targetLine.material.dispose();
    
        };
    
        DirectionalLightHelper.prototype.update = function () {
    
            var v1 = new Vector3();
            var v2 = new Vector3();
            var v3 = new Vector3();
    
            return function update() {
    
                v1.setFromMatrixPosition( this.light.matrixWorld );
                v2.setFromMatrixPosition( this.light.target.matrixWorld );
                v3.subVectors( v2, v1 );
    
                this.lightPlane.lookAt( v2 );
    
                if ( this.color !== undefined ) {
    
                    this.lightPlane.material.color.set( this.color );
                    this.targetLine.material.color.set( this.color );
    
                } else {
    
                    this.lightPlane.material.color.copy( this.light.color );
                    this.targetLine.material.color.copy( this.light.color );
    
                }
    
                this.targetLine.lookAt( v2 );
                this.targetLine.scale.z = v3.length();
    
            };
    
        }();
    
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author Mugen87 / https://github.com/Mugen87
         *
         *	- shows frustum, line of sight and up of the camera
         *	- suitable for fast updates
         * 	- based on frustum visualization in lightgl.js shadowmap example
         *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
         */
    
        function CameraHelper( camera ) {
    
            var geometry = new BufferGeometry();
            var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );
    
            var vertices = [];
            var colors = [];
    
            var pointMap = {};
    
            // colors
    
            var colorFrustum = new Color( 0xffaa00 );
            var colorCone = new Color( 0xff0000 );
            var colorUp = new Color( 0x00aaff );
            var colorTarget = new Color( 0xffffff );
            var colorCross = new Color( 0x333333 );
    
            // near
    
            addLine( 'n1', 'n2', colorFrustum );
            addLine( 'n2', 'n4', colorFrustum );
            addLine( 'n4', 'n3', colorFrustum );
            addLine( 'n3', 'n1', colorFrustum );
    
            // far
    
            addLine( 'f1', 'f2', colorFrustum );
            addLine( 'f2', 'f4', colorFrustum );
            addLine( 'f4', 'f3', colorFrustum );
            addLine( 'f3', 'f1', colorFrustum );
    
            // sides
    
            addLine( 'n1', 'f1', colorFrustum );
            addLine( 'n2', 'f2', colorFrustum );
            addLine( 'n3', 'f3', colorFrustum );
            addLine( 'n4', 'f4', colorFrustum );
    
            // cone
    
            addLine( 'p', 'n1', colorCone );
            addLine( 'p', 'n2', colorCone );
            addLine( 'p', 'n3', colorCone );
            addLine( 'p', 'n4', colorCone );
    
            // up
    
            addLine( 'u1', 'u2', colorUp );
            addLine( 'u2', 'u3', colorUp );
            addLine( 'u3', 'u1', colorUp );
    
            // target
    
            addLine( 'c', 't', colorTarget );
            addLine( 'p', 'c', colorCross );
    
            // cross
    
            addLine( 'cn1', 'cn2', colorCross );
            addLine( 'cn3', 'cn4', colorCross );
    
            addLine( 'cf1', 'cf2', colorCross );
            addLine( 'cf3', 'cf4', colorCross );
    
            function addLine( a, b, color ) {
    
                addPoint( a, color );
                addPoint( b, color );
    
            }
    
            function addPoint( id, color ) {
    
                vertices.push( 0, 0, 0 );
                colors.push( color.r, color.g, color.b );
    
                if ( pointMap[ id ] === undefined ) {
    
                    pointMap[ id ] = [];
    
                }
    
                pointMap[ id ].push( ( vertices.length / 3 ) - 1 );
    
            }
    
            geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
    
            LineSegments.call( this, geometry, material );
    
            this.camera = camera;
            if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();
    
            this.matrix = camera.matrixWorld;
            this.matrixAutoUpdate = false;
    
            this.pointMap = pointMap;
    
            this.update();
    
        }
    
        CameraHelper.prototype = Object.create( LineSegments.prototype );
        CameraHelper.prototype.constructor = CameraHelper;
    
        CameraHelper.prototype.update = function () {
    
            var geometry, pointMap;
    
            var vector = new Vector3();
            var camera = new Camera();
    
            function setPoint( point, x, y, z ) {
    
                vector.set( x, y, z ).unproject( camera );
    
                var points = pointMap[ point ];
    
                if ( points !== undefined ) {
    
                    var position = geometry.getAttribute( 'position' );
    
                    for ( var i = 0, l = points.length; i < l; i ++ ) {
    
                        position.setXYZ( points[ i ], vector.x, vector.y, vector.z );
    
                    }
    
                }
    
            }
    
            return function update() {
    
                geometry = this.geometry;
                pointMap = this.pointMap;
    
                var w = 1, h = 1;
    
                // we need just camera projection matrix inverse
                // world matrix must be identity
    
                camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );
    
                // center / target
    
                setPoint( 'c', 0, 0, - 1 );
                setPoint( 't', 0, 0, 1 );
    
                // near
    
                setPoint( 'n1', - w, - h, - 1 );
                setPoint( 'n2', w, - h, - 1 );
                setPoint( 'n3', - w, h, - 1 );
                setPoint( 'n4', w, h, - 1 );
    
                // far
    
                setPoint( 'f1', - w, - h, 1 );
                setPoint( 'f2', w, - h, 1 );
                setPoint( 'f3', - w, h, 1 );
                setPoint( 'f4', w, h, 1 );
    
                // up
    
                setPoint( 'u1', w * 0.7, h * 1.1, - 1 );
                setPoint( 'u2', - w * 0.7, h * 1.1, - 1 );
                setPoint( 'u3', 0, h * 2, - 1 );
    
                // cross
    
                setPoint( 'cf1', - w, 0, 1 );
                setPoint( 'cf2', w, 0, 1 );
                setPoint( 'cf3', 0, - h, 1 );
                setPoint( 'cf4', 0, h, 1 );
    
                setPoint( 'cn1', - w, 0, - 1 );
                setPoint( 'cn2', w, 0, - 1 );
                setPoint( 'cn3', 0, - h, - 1 );
                setPoint( 'cn4', 0, h, - 1 );
    
                geometry.getAttribute( 'position' ).needsUpdate = true;
    
            };
    
        }();
    
        /**
         * @author mrdoob / http://mrdoob.com/
         * @author Mugen87 / http://github.com/Mugen87
         */
    
        function BoxHelper( object, color ) {
    
            this.object = object;
    
            if ( color === undefined ) color = 0xffff00;
    
            var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
            var positions = new Float32Array( 8 * 3 );
    
            var geometry = new BufferGeometry();
            geometry.setIndex( new BufferAttribute( indices, 1 ) );
            geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
    
            LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
    
            this.matrixAutoUpdate = false;
    
            this.update();
    
        }
    
        BoxHelper.prototype = Object.create( LineSegments.prototype );
        BoxHelper.prototype.constructor = BoxHelper;
    
        BoxHelper.prototype.update = ( function () {
    
            var box = new Box3();
    
            return function update( object ) {
    
                if ( object !== undefined ) {
    
                    console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );
    
                }
    
                if ( this.object !== undefined ) {
    
                    box.setFromObject( this.object );
    
                }
    
                if ( box.isEmpty() ) return;
    
                var min = box.min;
                var max = box.max;
    
                /*
                  5____4
                1/___0/|
                | 6__|_7
                2/___3/
    
                0: max.x, max.y, max.z
                1: min.x, max.y, max.z
                2: min.x, min.y, max.z
                3: max.x, min.y, max.z
                4: max.x, max.y, min.z
                5: min.x, max.y, min.z
                6: min.x, min.y, min.z
                7: max.x, min.y, min.z
                */
    
                var position = this.geometry.attributes.position;
                var array = position.array;
    
                array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
                array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
                array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
                array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
                array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
                array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
                array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
                array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
    
                position.needsUpdate = true;
    
                this.geometry.computeBoundingSphere();
    
            };
    
        } )();
    
        BoxHelper.prototype.setFromObject = function ( object ) {
    
            this.object = object;
            this.update();
    
            return this;
    
        };
    
        BoxHelper.prototype.copy = function ( source ) {
    
            LineSegments.prototype.copy.call( this, source );
    
            this.object = source.object;
    
            return this;
    
        };
    
        BoxHelper.prototype.clone = function () {
    
            return new this.constructor().copy( this );
    
        };
    
        /**
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function Box3Helper( box, hex ) {
    
            this.type = 'Box3Helper';
    
            this.box = box;
    
            var color = ( hex !== undefined ) ? hex : 0xffff00;
    
            var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
    
            var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];
    
            var geometry = new BufferGeometry();
    
            geometry.setIndex( new BufferAttribute( indices, 1 ) );
    
            geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
    
            LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
    
            this.geometry.computeBoundingSphere();
    
        }
    
        Box3Helper.prototype = Object.create( LineSegments.prototype );
        Box3Helper.prototype.constructor = Box3Helper;
    
        Box3Helper.prototype.updateMatrixWorld = function ( force ) {
    
            var box = this.box;
    
            if ( box.isEmpty() ) return;
    
            box.getCenter( this.position );
    
            box.getSize( this.scale );
    
            this.scale.multiplyScalar( 0.5 );
    
            Object3D.prototype.updateMatrixWorld.call( this, force );
    
        };
    
        /**
         * @author WestLangley / http://github.com/WestLangley
         */
    
        function PlaneHelper( plane, size, hex ) {
    
            this.type = 'PlaneHelper';
    
            this.plane = plane;
    
            this.size = ( size === undefined ) ? 1 : size;
    
            var color = ( hex !== undefined ) ? hex : 0xffff00;
    
            var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];
    
            var geometry = new BufferGeometry();
            geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
            geometry.computeBoundingSphere();
    
            Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );
    
            //
    
            var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];
    
            var geometry2 = new BufferGeometry();
            geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
            geometry2.computeBoundingSphere();
    
            this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );
    
        }
    
        PlaneHelper.prototype = Object.create( Line.prototype );
        PlaneHelper.prototype.constructor = PlaneHelper;
    
        PlaneHelper.prototype.updateMatrixWorld = function ( force ) {
    
            var scale = - this.plane.constant;
    
            if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter
    
            this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );
    
            this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here
    
            this.lookAt( this.plane.normal );
    
            Object3D.prototype.updateMatrixWorld.call( this, force );
    
        };
    
        /**
         * @author WestLangley / http://github.com/WestLangley
         * @author zz85 / http://github.com/zz85
         * @author bhouston / http://clara.io
         *
         * Creates an arrow for visualizing directions
         *
         * Parameters:
         *  dir - Vector3
         *  origin - Vector3
         *  length - Number
         *  color - color in hex value
         *  headLength - Number
         *  headWidth - Number
         */
    
        var lineGeometry, coneGeometry;
    
        function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {
    
            // dir is assumed to be normalized
    
            Object3D.call( this );
    
            if ( dir === undefined ) dir = new Vector3( 0, 0, 1 );
            if ( origin === undefined ) origin = new Vector3( 0, 0, 0 );
            if ( length === undefined ) length = 1;
            if ( color === undefined ) color = 0xffff00;
            if ( headLength === undefined ) headLength = 0.2 * length;
            if ( headWidth === undefined ) headWidth = 0.2 * headLength;
    
            if ( lineGeometry === undefined ) {
    
                lineGeometry = new BufferGeometry();
                lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );
    
                coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
                coneGeometry.translate( 0, - 0.5, 0 );
    
            }
    
            this.position.copy( origin );
    
            this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
            this.line.matrixAutoUpdate = false;
            this.add( this.line );
    
            this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
            this.cone.matrixAutoUpdate = false;
            this.add( this.cone );
    
            this.setDirection( dir );
            this.setLength( length, headLength, headWidth );
    
        }
    
        ArrowHelper.prototype = Object.create( Object3D.prototype );
        ArrowHelper.prototype.constructor = ArrowHelper;
    
        ArrowHelper.prototype.setDirection = ( function () {
    
            var axis = new Vector3();
            var radians;
    
            return function setDirection( dir ) {
    
                // dir is assumed to be normalized
    
                if ( dir.y > 0.99999 ) {
    
                    this.quaternion.set( 0, 0, 0, 1 );
    
                } else if ( dir.y < - 0.99999 ) {
    
                    this.quaternion.set( 1, 0, 0, 0 );
    
                } else {
    
                    axis.set( dir.z, 0, - dir.x ).normalize();
    
                    radians = Math.acos( dir.y );
    
                    this.quaternion.setFromAxisAngle( axis, radians );
    
                }
    
            };
    
        }() );
    
        ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {
    
            if ( headLength === undefined ) headLength = 0.2 * length;
            if ( headWidth === undefined ) headWidth = 0.2 * headLength;
    
            this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
            this.line.updateMatrix();
    
            this.cone.scale.set( headWidth, headLength, headWidth );
            this.cone.position.y = length;
            this.cone.updateMatrix();
    
        };
    
        ArrowHelper.prototype.setColor = function ( color ) {
    
            this.line.material.color.copy( color );
            this.cone.material.color.copy( color );
    
        };
    
        ArrowHelper.prototype.copy = function ( source ) {
    
            Object3D.prototype.copy.call( this, source, false );
    
            this.line.copy( source.line );
            this.cone.copy( source.cone );
    
            return this;
    
        };
    
        ArrowHelper.prototype.clone = function () {
    
            return new this.constructor().copy( this );
    
        };
    
        /**
         * @author sroucheray / http://sroucheray.org/
         * @author mrdoob / http://mrdoob.com/
         */
    
        function AxesHelper( size ) {
    
            size = size || 1;
    
            var vertices = [
                0, 0, 0,	size, 0, 0,
                0, 0, 0,	0, size, 0,
                0, 0, 0,	0, 0, size
            ];
    
            var colors = [
                1, 0, 0,	1, 0.6, 0,
                0, 1, 0,	0.6, 1, 0,
                0, 0, 1,	0, 0.6, 1
            ];
    
            var geometry = new BufferGeometry();
            geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
            geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
    
            var material = new LineBasicMaterial( { vertexColors: VertexColors } );
    
            LineSegments.call( this, geometry, material );
    
        }
    
        AxesHelper.prototype = Object.create( LineSegments.prototype );
        AxesHelper.prototype.constructor = AxesHelper;
    
        /**
         * @author mrdoob / http://mrdoob.com/
         */
    
        function Face4( a, b, c, d, normal, color, materialIndex ) {
    
            console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
            return new Face3( a, b, c, normal, color, materialIndex );
    
        }
    
        var LineStrip = 0;
    
        var LinePieces = 1;
    
        function MeshFaceMaterial( materials ) {
    
            console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
            return materials;
    
        }
    
        function MultiMaterial( materials ) {
    
            if ( materials === undefined ) materials = [];
    
            console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
            materials.isMultiMaterial = true;
            materials.materials = materials;
            materials.clone = function () {
    
                return materials.slice();
    
            };
            return materials;
    
        }
    
        function PointCloud( geometry, material ) {
    
            console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
            return new Points( geometry, material );
    
        }
    
        function Particle( material ) {
    
            console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
            return new Sprite( material );
    
        }
    
        function ParticleSystem( geometry, material ) {
    
            console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
            return new Points( geometry, material );
    
        }
    
        function PointCloudMaterial( parameters ) {
    
            console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
            return new PointsMaterial( parameters );
    
        }
    
        function ParticleBasicMaterial( parameters ) {
    
            console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
            return new PointsMaterial( parameters );
    
        }
    
        function ParticleSystemMaterial( parameters ) {
    
            console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
            return new PointsMaterial( parameters );
    
        }
    
        function Vertex( x, y, z ) {
    
            console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
            return new Vector3( x, y, z );
    
        }
    
        //
    
        function DynamicBufferAttribute( array, itemSize ) {
    
            console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
            return new BufferAttribute( array, itemSize ).setDynamic( true );
    
        }
    
        function Int8Attribute( array, itemSize ) {
    
            console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
            return new Int8BufferAttribute( array, itemSize );
    
        }
    
        function Uint8Attribute( array, itemSize ) {
    
            console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
            return new Uint8BufferAttribute( array, itemSize );
    
        }
    
        function Uint8ClampedAttribute( array, itemSize ) {
    
            console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
            return new Uint8ClampedBufferAttribute( array, itemSize );
    
        }
    
        function Int16Attribute( array, itemSize ) {
    
            console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
            return new Int16BufferAttribute( array, itemSize );
    
        }
    
        function Uint16Attribute( array, itemSize ) {
    
            console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
            return new Uint16BufferAttribute( array, itemSize );
    
        }
    
        function Int32Attribute( array, itemSize ) {
    
            console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
            return new Int32BufferAttribute( array, itemSize );
    
        }
    
        function Uint32Attribute( array, itemSize ) {
    
            console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
            return new Uint32BufferAttribute( array, itemSize );
    
        }
    
        function Float32Attribute( array, itemSize ) {
    
            console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
            return new Float32BufferAttribute( array, itemSize );
    
        }
    
        function Float64Attribute( array, itemSize ) {
    
            console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
            return new Float64BufferAttribute( array, itemSize );
    
        }
    
        //
    
        Curve.create = function ( construct, getPoint ) {
    
            console.log( 'THREE.Curve.create() has been deprecated' );
    
            construct.prototype = Object.create( Curve.prototype );
            construct.prototype.constructor = construct;
            construct.prototype.getPoint = getPoint;
    
            return construct;
    
        };
    
        //
    
        Object.assign( CurvePath.prototype, {
    
            createPointsGeometry: function ( divisions ) {
    
                console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
    
                // generate geometry from path points (for Line or Points objects)
    
                var pts = this.getPoints( divisions );
                return this.createGeometry( pts );
    
            },
    
            createSpacedPointsGeometry: function ( divisions ) {
    
                console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
    
                // generate geometry from equidistant sampling along the path
    
                var pts = this.getSpacedPoints( divisions );
                return this.createGeometry( pts );
    
            },
    
            createGeometry: function ( points ) {
    
                console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
    
                var geometry = new Geometry();
    
                for ( var i = 0, l = points.length; i < l; i ++ ) {
    
                    var point = points[ i ];
                    geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
    
                }
    
                return geometry;
    
            }
    
        } );
    
        //
    
        Object.assign( Path.prototype, {
    
            fromPoints: function ( points ) {
    
                console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
                this.setFromPoints( points );
    
            }
    
        } );
    
        //
    
        function ClosedSplineCurve3( points ) {
    
            console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );
    
            CatmullRomCurve3.call( this, points );
            this.type = 'catmullrom';
            this.closed = true;
    
        }
    
        ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
    
        //
    
        function SplineCurve3( points ) {
    
            console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );
    
            CatmullRomCurve3.call( this, points );
            this.type = 'catmullrom';
    
        }
    
        SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
    
        //
    
        function Spline( points ) {
    
            console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );
    
            CatmullRomCurve3.call( this, points );
            this.type = 'catmullrom';
    
        }
    
        Spline.prototype = Object.create( CatmullRomCurve3.prototype );
    
        Object.assign( Spline.prototype, {
    
            initFromArray: function ( /* a */ ) {
    
                console.error( 'THREE.Spline: .initFromArray() has been removed.' );
    
            },
            getControlPointsArray: function ( /* optionalTarget */ ) {
    
                console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );
    
            },
            reparametrizeByArcLength: function ( /* samplingCoef */ ) {
    
                console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );
    
            }
    
        } );
    
        //
    
        function AxisHelper( size ) {
    
            console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
            return new AxesHelper( size );
    
        }
    
        function BoundingBoxHelper( object, color ) {
    
            console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
            return new BoxHelper( object, color );
    
        }
    
        function EdgesHelper( object, hex ) {
    
            console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
            return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
    
        }
    
        GridHelper.prototype.setColors = function () {
    
            console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );
    
        };
    
        SkeletonHelper.prototype.update = function () {
    
            console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );
    
        };
    
        function WireframeHelper( object, hex ) {
    
            console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
            return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
    
        }
    
        //
    
        Object.assign( Loader.prototype, {
    
            extractUrlBase: function ( url ) {
    
                console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
                return LoaderUtils.extractUrlBase( url );
    
            }
    
        } );
    
        function XHRLoader( manager ) {
    
            console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
            return new FileLoader( manager );
    
        }
    
        function BinaryTextureLoader( manager ) {
    
            console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
            return new DataTextureLoader( manager );
    
        }
    
        Object.assign( ObjectLoader.prototype, {
    
            setTexturePath: function ( value ) {
    
                console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
                return this.setResourcePath( value );
    
            }
    
        } );
    
        //
    
        Object.assign( Box2.prototype, {
    
            center: function ( optionalTarget ) {
    
                console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
                return this.getCenter( optionalTarget );
    
            },
            empty: function () {
    
                console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
                return this.isEmpty();
    
            },
            isIntersectionBox: function ( box ) {
    
                console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
                return this.intersectsBox( box );
    
            },
            size: function ( optionalTarget ) {
    
                console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
                return this.getSize( optionalTarget );
    
            }
        } );
    
        Object.assign( Box3.prototype, {
    
            center: function ( optionalTarget ) {
    
                console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
                return this.getCenter( optionalTarget );
    
            },
            empty: function () {
    
                console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
                return this.isEmpty();
    
            },
            isIntersectionBox: function ( box ) {
    
                console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
                return this.intersectsBox( box );
    
            },
            isIntersectionSphere: function ( sphere ) {
    
                console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
                return this.intersectsSphere( sphere );
    
            },
            size: function ( optionalTarget ) {
    
                console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
                return this.getSize( optionalTarget );
    
            }
        } );
    
        Line3.prototype.center = function ( optionalTarget ) {
    
            console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
            return this.getCenter( optionalTarget );
    
        };
    
        Object.assign( _Math, {
    
            random16: function () {
    
                console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
                return Math.random();
    
            },
    
            nearestPowerOfTwo: function ( value ) {
    
                console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
                return _Math.floorPowerOfTwo( value );
    
            },
    
            nextPowerOfTwo: function ( value ) {
    
                console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
                return _Math.ceilPowerOfTwo( value );
    
            }
    
        } );
    
        Object.assign( Matrix3.prototype, {
    
            flattenToArrayOffset: function ( array, offset ) {
    
                console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
                return this.toArray( array, offset );
    
            },
            multiplyVector3: function ( vector ) {
    
                console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
                return vector.applyMatrix3( this );
    
            },
            multiplyVector3Array: function ( /* a */ ) {
    
                console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );
    
            },
            applyToBuffer: function ( buffer /*, offset, length */ ) {
    
                console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
                return this.applyToBufferAttribute( buffer );
    
            },
            applyToVector3Array: function ( /* array, offset, length */ ) {
    
                console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );
    
            }
    
        } );
    
        Object.assign( Matrix4.prototype, {
    
            extractPosition: function ( m ) {
    
                console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
                return this.copyPosition( m );
    
            },
            flattenToArrayOffset: function ( array, offset ) {
    
                console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
                return this.toArray( array, offset );
    
            },
            getPosition: function () {
    
                var v1;
    
                return function getPosition() {
    
                    if ( v1 === undefined ) v1 = new Vector3();
                    console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
                    return v1.setFromMatrixColumn( this, 3 );
    
                };
    
            }(),
            setRotationFromQuaternion: function ( q ) {
    
                console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
                return this.makeRotationFromQuaternion( q );
    
            },
            multiplyToArray: function () {
    
                console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );
    
            },
            multiplyVector3: function ( vector ) {
    
                console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
                return vector.applyMatrix4( this );
    
            },
            multiplyVector4: function ( vector ) {
    
                console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
                return vector.applyMatrix4( this );
    
            },
            multiplyVector3Array: function ( /* a */ ) {
    
                console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );
    
            },
            rotateAxis: function ( v ) {
    
                console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
                v.transformDirection( this );
    
            },
            crossVector: function ( vector ) {
    
                console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
                return vector.applyMatrix4( this );
    
            },
            translate: function () {
    
                console.error( 'THREE.Matrix4: .translate() has been removed.' );
    
            },
            rotateX: function () {
    
                console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
    
            },
            rotateY: function () {
    
                console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
    
            },
            rotateZ: function () {
    
                console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
    
            },
            rotateByAxis: function () {
    
                console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
    
            },
            applyToBuffer: function ( buffer /*, offset, length */ ) {
    
                console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
                return this.applyToBufferAttribute( buffer );
    
            },
            applyToVector3Array: function ( /* array, offset, length */ ) {
    
                console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );
    
            },
            makeFrustum: function ( left, right, bottom, top, near, far ) {
    
                console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
                return this.makePerspective( left, right, top, bottom, near, far );
    
            }
    
        } );
    
        Plane.prototype.isIntersectionLine = function ( line ) {
    
            console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
            return this.intersectsLine( line );
    
        };
    
        Quaternion.prototype.multiplyVector3 = function ( vector ) {
    
            console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
            return vector.applyQuaternion( this );
    
        };
    
        Object.assign( Ray.prototype, {
    
            isIntersectionBox: function ( box ) {
    
                console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
                return this.intersectsBox( box );
    
            },
            isIntersectionPlane: function ( plane ) {
    
                console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
                return this.intersectsPlane( plane );
    
            },
            isIntersectionSphere: function ( sphere ) {
    
                console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
                return this.intersectsSphere( sphere );
    
            }
    
        } );
    
        Object.assign( Triangle.prototype, {
    
            area: function () {
    
                console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
                return this.getArea();
    
            },
            barycoordFromPoint: function ( point, target ) {
    
                console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
                return this.getBarycoord( point, target );
    
            },
            midpoint: function ( target ) {
    
                console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
                return this.getMidpoint( target );
    
            },
            normal: function ( target ) {
    
                console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
                return this.getNormal( target );
    
            },
            plane: function ( target ) {
    
                console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
                return this.getPlane( target );
    
            }
    
        } );
    
        Object.assign( Triangle, {
    
            barycoordFromPoint: function ( point, a, b, c, target ) {
    
                console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
                return Triangle.getBarycoord( point, a, b, c, target );
    
            },
            normal: function ( a, b, c, target ) {
    
                console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
                return Triangle.getNormal( a, b, c, target );
    
            }
    
        } );
    
        Object.assign( Shape.prototype, {
    
            extractAllPoints: function ( divisions ) {
    
                console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
                return this.extractPoints( divisions );
    
            },
            extrude: function ( options ) {
    
                console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
                return new ExtrudeGeometry( this, options );
    
            },
            makeGeometry: function ( options ) {
    
                console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
                return new ShapeGeometry( this, options );
    
            }
    
        } );
    
        Object.assign( Vector2.prototype, {
    
            fromAttribute: function ( attribute, index, offset ) {
    
                console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
                return this.fromBufferAttribute( attribute, index, offset );
    
            },
            distanceToManhattan: function ( v ) {
    
                console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
                return this.manhattanDistanceTo( v );
    
            },
            lengthManhattan: function () {
    
                console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
                return this.manhattanLength();
    
            }
    
        } );
    
        Object.assign( Vector3.prototype, {
    
            setEulerFromRotationMatrix: function () {
    
                console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
    
            },
            setEulerFromQuaternion: function () {
    
                console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
    
            },
            getPositionFromMatrix: function ( m ) {
    
                console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
                return this.setFromMatrixPosition( m );
    
            },
            getScaleFromMatrix: function ( m ) {
    
                console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
                return this.setFromMatrixScale( m );
    
            },
            getColumnFromMatrix: function ( index, matrix ) {
    
                console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
                return this.setFromMatrixColumn( matrix, index );
    
            },
            applyProjection: function ( m ) {
    
                console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
                return this.applyMatrix4( m );
    
            },
            fromAttribute: function ( attribute, index, offset ) {
    
                console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
                return this.fromBufferAttribute( attribute, index, offset );
    
            },
            distanceToManhattan: function ( v ) {
    
                console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
                return this.manhattanDistanceTo( v );
    
            },
            lengthManhattan: function () {
    
                console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
                return this.manhattanLength();
    
            }
    
        } );
    
        Object.assign( Vector4.prototype, {
    
            fromAttribute: function ( attribute, index, offset ) {
    
                console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
                return this.fromBufferAttribute( attribute, index, offset );
    
            },
            lengthManhattan: function () {
    
                console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
                return this.manhattanLength();
    
            }
    
        } );
    
        //
    
        Object.assign( Geometry.prototype, {
    
            computeTangents: function () {
    
                console.error( 'THREE.Geometry: .computeTangents() has been removed.' );
    
            },
            computeLineDistances: function () {
    
                console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );
    
            }
    
        } );
    
        Object.assign( Object3D.prototype, {
    
            getChildByName: function ( name ) {
    
                console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
                return this.getObjectByName( name );
    
            },
            renderDepth: function () {
    
                console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
    
            },
            translate: function ( distance, axis ) {
    
                console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
                return this.translateOnAxis( axis, distance );
    
            },
            getWorldRotation: function () {
    
                console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );
    
            }
    
        } );
    
        Object.defineProperties( Object3D.prototype, {
    
            eulerOrder: {
                get: function () {
    
                    console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
                    return this.rotation.order;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
                    this.rotation.order = value;
    
                }
            },
            useQuaternion: {
                get: function () {
    
                    console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
    
                },
                set: function () {
    
                    console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
    
                }
            }
    
        } );
    
        Object.defineProperties( LOD.prototype, {
    
            objects: {
                get: function () {
    
                    console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
                    return this.levels;
    
                }
            }
    
        } );
    
        Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {
    
            get: function () {
    
                console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
    
            },
            set: function () {
    
                console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
    
            }
    
        } );
    
        SkinnedMesh.prototype.initBones = function () {
    
            console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );
    
        };
    
        Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {
    
            get: function () {
    
                console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
                return this.arcLengthDivisions;
    
            },
            set: function ( value ) {
    
                console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
                this.arcLengthDivisions = value;
    
            }
    
        } );
    
        //
    
        PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {
    
            console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
                    "Use .setFocalLength and .filmGauge for a photographic setup." );
    
            if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
            this.setFocalLength( focalLength );
    
        };
    
        //
    
        Object.defineProperties( Light.prototype, {
            onlyShadow: {
                set: function () {
    
                    console.warn( 'THREE.Light: .onlyShadow has been removed.' );
    
                }
            },
            shadowCameraFov: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
                    this.shadow.camera.fov = value;
    
                }
            },
            shadowCameraLeft: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
                    this.shadow.camera.left = value;
    
                }
            },
            shadowCameraRight: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
                    this.shadow.camera.right = value;
    
                }
            },
            shadowCameraTop: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
                    this.shadow.camera.top = value;
    
                }
            },
            shadowCameraBottom: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
                    this.shadow.camera.bottom = value;
    
                }
            },
            shadowCameraNear: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
                    this.shadow.camera.near = value;
    
                }
            },
            shadowCameraFar: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
                    this.shadow.camera.far = value;
    
                }
            },
            shadowCameraVisible: {
                set: function () {
    
                    console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
    
                }
            },
            shadowBias: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
                    this.shadow.bias = value;
    
                }
            },
            shadowDarkness: {
                set: function () {
    
                    console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
    
                }
            },
            shadowMapWidth: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
                    this.shadow.mapSize.width = value;
    
                }
            },
            shadowMapHeight: {
                set: function ( value ) {
    
                    console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
                    this.shadow.mapSize.height = value;
    
                }
            }
        } );
    
        //
    
        Object.defineProperties( BufferAttribute.prototype, {
    
            length: {
                get: function () {
    
                    console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
                    return this.array.length;
    
                }
            },
            copyIndicesArray: function ( /* indices */ ) {
    
                console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );
    
            }
    
        } );
    
        Object.assign( BufferGeometry.prototype, {
    
            addIndex: function ( index ) {
    
                console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
                this.setIndex( index );
    
            },
            addDrawCall: function ( start, count, indexOffset ) {
    
                if ( indexOffset !== undefined ) {
    
                    console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
    
                }
                console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
                this.addGroup( start, count );
    
            },
            clearDrawCalls: function () {
    
                console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
                this.clearGroups();
    
            },
            computeTangents: function () {
    
                console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
    
            },
            computeOffsets: function () {
    
                console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
    
            }
    
        } );
    
        Object.defineProperties( BufferGeometry.prototype, {
    
            drawcalls: {
                get: function () {
    
                    console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
                    return this.groups;
    
                }
            },
            offsets: {
                get: function () {
    
                    console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
                    return this.groups;
    
                }
            }
    
        } );
    
        //
    
        Object.assign( ExtrudeBufferGeometry.prototype, {
    
            getArrays: function () {
    
                console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );
    
            },
    
            addShapeList: function () {
    
                console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );
    
            },
    
            addShape: function () {
    
                console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );
    
            }
    
        } );
    
        //
    
        Object.defineProperties( Uniform.prototype, {
    
            dynamic: {
                set: function () {
    
                    console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
    
                }
            },
            onUpdate: {
                value: function () {
    
                    console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
                    return this;
    
                }
            }
    
        } );
    
        //
    
        Object.defineProperties( Material.prototype, {
    
            wrapAround: {
                get: function () {
    
                    console.warn( 'THREE.Material: .wrapAround has been removed.' );
    
                },
                set: function () {
    
                    console.warn( 'THREE.Material: .wrapAround has been removed.' );
    
                }
            },
    
            overdraw: {
                get: function () {
    
                    console.warn( 'THREE.Material: .overdraw has been removed.' );
    
                },
                set: function () {
    
                    console.warn( 'THREE.Material: .overdraw has been removed.' );
    
                }
            },
    
            wrapRGB: {
                get: function () {
    
                    console.warn( 'THREE.Material: .wrapRGB has been removed.' );
                    return new Color();
    
                }
            },
    
            shading: {
                get: function () {
    
                    console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
                    this.flatShading = ( value === FlatShading );
    
                }
            }
    
        } );
    
        Object.defineProperties( MeshPhongMaterial.prototype, {
    
            metal: {
                get: function () {
    
                    console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
                    return false;
    
                },
                set: function () {
    
                    console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
    
                }
            }
    
        } );
    
        Object.defineProperties( ShaderMaterial.prototype, {
    
            derivatives: {
                get: function () {
    
                    console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
                    return this.extensions.derivatives;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
                    this.extensions.derivatives = value;
    
                }
            }
    
        } );
    
        //
    
        Object.assign( WebGLRenderer.prototype, {
    
            clearTarget: function ( renderTarget, color, depth, stencil ) {
    
                console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
                this.setRenderTarget( renderTarget );
                this.clear( color, depth, stencil );
    
            },
            animate: function ( callback ) {
    
                console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
                this.setAnimationLoop( callback );
    
            },
            getCurrentRenderTarget: function () {
    
                console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
                return this.getRenderTarget();
    
            },
            getMaxAnisotropy: function () {
    
                console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
                return this.capabilities.getMaxAnisotropy();
    
            },
            getPrecision: function () {
    
                console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
                return this.capabilities.precision;
    
            },
            resetGLState: function () {
    
                console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
                return this.state.reset();
    
            },
            supportsFloatTextures: function () {
    
                console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
                return this.extensions.get( 'OES_texture_float' );
    
            },
            supportsHalfFloatTextures: function () {
    
                console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
                return this.extensions.get( 'OES_texture_half_float' );
    
            },
            supportsStandardDerivatives: function () {
    
                console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
                return this.extensions.get( 'OES_standard_derivatives' );
    
            },
            supportsCompressedTextureS3TC: function () {
    
                console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
                return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
    
            },
            supportsCompressedTexturePVRTC: function () {
    
                console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
                return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
    
            },
            supportsBlendMinMax: function () {
    
                console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
                return this.extensions.get( 'EXT_blend_minmax' );
    
            },
            supportsVertexTextures: function () {
    
                console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
                return this.capabilities.vertexTextures;
    
            },
            supportsInstancedArrays: function () {
    
                console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
                return this.extensions.get( 'ANGLE_instanced_arrays' );
    
            },
            enableScissorTest: function ( boolean ) {
    
                console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
                this.setScissorTest( boolean );
    
            },
            initMaterial: function () {
    
                console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
    
            },
            addPrePlugin: function () {
    
                console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
    
            },
            addPostPlugin: function () {
    
                console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
    
            },
            updateShadowMap: function () {
    
                console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
    
            },
            setFaceCulling: function () {
    
                console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );
    
            },
            allocTextureUnit: function () {
    
                console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );
    
            },
            setTexture: function () {
    
                console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );
    
            },
            setTexture2D: function () {
    
                console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );
    
            },
            setTextureCube: function () {
    
                console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );
    
            }
    
        } );
    
        Object.defineProperties( WebGLRenderer.prototype, {
    
            shadowMapEnabled: {
                get: function () {
    
                    return this.shadowMap.enabled;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
                    this.shadowMap.enabled = value;
    
                }
            },
            shadowMapType: {
                get: function () {
    
                    return this.shadowMap.type;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
                    this.shadowMap.type = value;
    
                }
            },
            shadowMapCullFace: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
                    return undefined;
    
                },
                set: function ( /* value */ ) {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
    
                }
            }
        } );
    
        Object.defineProperties( WebGLShadowMap.prototype, {
    
            cullFace: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
                    return undefined;
    
                },
                set: function ( /* cullFace */ ) {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
    
                }
            },
            renderReverseSided: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
                    return undefined;
    
                },
                set: function () {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
    
                }
            },
            renderSingleSided: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
                    return undefined;
    
                },
                set: function () {
    
                    console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
    
                }
            }
    
        } );
    
        //
    
        Object.defineProperties( WebGLRenderTargetCube.prototype, {
    
            activeCubeFace: {
                set: function ( /* value */ ) {
    
                    console.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );
    
                }
            },
            activeMipMapLevel: {
                set: function ( /* value */ ) {
    
                    console.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );
    
                }
            }
    
        } );
    
        //
    
        Object.defineProperties( WebGLRenderTarget.prototype, {
    
            wrapS: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
                    return this.texture.wrapS;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
                    this.texture.wrapS = value;
    
                }
            },
            wrapT: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
                    return this.texture.wrapT;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
                    this.texture.wrapT = value;
    
                }
            },
            magFilter: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
                    return this.texture.magFilter;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
                    this.texture.magFilter = value;
    
                }
            },
            minFilter: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
                    return this.texture.minFilter;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
                    this.texture.minFilter = value;
    
                }
            },
            anisotropy: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
                    return this.texture.anisotropy;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
                    this.texture.anisotropy = value;
    
                }
            },
            offset: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
                    return this.texture.offset;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
                    this.texture.offset = value;
    
                }
            },
            repeat: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
                    return this.texture.repeat;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
                    this.texture.repeat = value;
    
                }
            },
            format: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
                    return this.texture.format;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
                    this.texture.format = value;
    
                }
            },
            type: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
                    return this.texture.type;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
                    this.texture.type = value;
    
                }
            },
            generateMipmaps: {
                get: function () {
    
                    console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
                    return this.texture.generateMipmaps;
    
                },
                set: function ( value ) {
    
                    console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
                    this.texture.generateMipmaps = value;
    
                }
            }
    
        } );
    
        //
    
        Object.defineProperties( WebVRManager.prototype, {
    
            standing: {
                set: function ( /* value */ ) {
    
                    console.warn( 'THREE.WebVRManager: .standing has been removed.' );
    
                }
            },
            userHeight: {
                set: function ( /* value */ ) {
    
                    console.warn( 'THREE.WebVRManager: .userHeight has been removed.' );
    
                }
            }
    
        } );
    
        //
    
        Audio.prototype.load = function ( file ) {
    
            console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
            var scope = this;
            var audioLoader = new AudioLoader();
            audioLoader.load( file, function ( buffer ) {
    
                scope.setBuffer( buffer );
    
            } );
            return this;
    
        };
    
        AudioAnalyser.prototype.getData = function () {
    
            console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
            return this.getFrequencyData();
    
        };
    
        //
    
        CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {
    
            console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
            return this.update( renderer, scene );
    
        };
    
        //
    
        var GeometryUtils = {
    
            merge: function ( geometry1, geometry2, materialIndexOffset ) {
    
                console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
                var matrix;
    
                if ( geometry2.isMesh ) {
    
                    geometry2.matrixAutoUpdate && geometry2.updateMatrix();
    
                    matrix = geometry2.matrix;
                    geometry2 = geometry2.geometry;
    
                }
    
                geometry1.merge( geometry2, matrix, materialIndexOffset );
    
            },
    
            center: function ( geometry ) {
    
                console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
                return geometry.center();
    
            }
    
        };
    
        ImageUtils.crossOrigin = undefined;
    
        ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {
    
            console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );
    
            var loader = new TextureLoader();
            loader.setCrossOrigin( this.crossOrigin );
    
            var texture = loader.load( url, onLoad, undefined, onError );
    
            if ( mapping ) texture.mapping = mapping;
    
            return texture;
    
        };
    
        ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {
    
            console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );
    
            var loader = new CubeTextureLoader();
            loader.setCrossOrigin( this.crossOrigin );
    
            var texture = loader.load( urls, onLoad, undefined, onError );
    
            if ( mapping ) texture.mapping = mapping;
    
            return texture;
    
        };
    
        ImageUtils.loadCompressedTexture = function () {
    
            console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );
    
        };
    
        ImageUtils.loadCompressedTextureCube = function () {
    
            console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );
    
        };
    
        //
    
        function Projector() {
    
            console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );
    
            this.projectVector = function ( vector, camera ) {
    
                console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
                vector.project( camera );
    
            };
    
            this.unprojectVector = function ( vector, camera ) {
    
                console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
                vector.unproject( camera );
    
            };
    
            this.pickingRay = function () {
    
                console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );
    
            };
    
        }
    
        //
    
        function CanvasRenderer() {
    
            console.error( 'THREE.CanvasRenderer has been removed' );
    
        }
    
        //
    
        function JSONLoader() {
    
            console.error( 'THREE.JSONLoader has been removed.' );
    
        }
    
        //
    
        var SceneUtils = {
    
            createMultiMaterialObject: function ( /* geometry, materials */ ) {
    
                console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );
    
            },
    
            detach: function ( /* child, parent, scene */ ) {
    
                console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );
    
            },
    
            attach: function ( /* child, scene, parent */ ) {
    
                console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );
    
            }
    
        };
    
        //
    
        function LensFlare() {
    
            console.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );
    
        }
    
        exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;
        exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
        exports.WebGLRenderTarget = WebGLRenderTarget;
        exports.WebGLRenderer = WebGLRenderer;
        exports.ShaderLib = ShaderLib;
        exports.UniformsLib = UniformsLib;
        exports.UniformsUtils = UniformsUtils;
        exports.ShaderChunk = ShaderChunk;
        exports.FogExp2 = FogExp2;
        exports.Fog = Fog;
        exports.Scene = Scene;
        exports.Sprite = Sprite;
        exports.LOD = LOD;
        exports.SkinnedMesh = SkinnedMesh;
        exports.Skeleton = Skeleton;
        exports.Bone = Bone;
        exports.Mesh = Mesh;
        exports.LineSegments = LineSegments;
        exports.LineLoop = LineLoop;
        exports.Line = Line;
        exports.Points = Points;
        exports.Group = Group;
        exports.VideoTexture = VideoTexture;
        exports.DataTexture = DataTexture;
        exports.DataTexture2DArray = DataTexture2DArray;
        exports.DataTexture3D = DataTexture3D;
        exports.CompressedTexture = CompressedTexture;
        exports.CubeTexture = CubeTexture;
        exports.CanvasTexture = CanvasTexture;
        exports.DepthTexture = DepthTexture;
        exports.Texture = Texture;
        exports.AnimationLoader = AnimationLoader;
        exports.CompressedTextureLoader = CompressedTextureLoader;
        exports.DataTextureLoader = DataTextureLoader;
        exports.CubeTextureLoader = CubeTextureLoader;
        exports.TextureLoader = TextureLoader;
        exports.ObjectLoader = ObjectLoader;
        exports.MaterialLoader = MaterialLoader;
        exports.BufferGeometryLoader = BufferGeometryLoader;
        exports.DefaultLoadingManager = DefaultLoadingManager;
        exports.LoadingManager = LoadingManager;
        exports.ImageLoader = ImageLoader;
        exports.ImageBitmapLoader = ImageBitmapLoader;
        exports.FontLoader = FontLoader;
        exports.FileLoader = FileLoader;
        exports.Loader = Loader;
        exports.LoaderUtils = LoaderUtils;
        exports.Cache = Cache;
        exports.AudioLoader = AudioLoader;
        exports.SpotLightShadow = SpotLightShadow;
        exports.SpotLight = SpotLight;
        exports.PointLight = PointLight;
        exports.RectAreaLight = RectAreaLight;
        exports.HemisphereLight = HemisphereLight;
        exports.DirectionalLightShadow = DirectionalLightShadow;
        exports.DirectionalLight = DirectionalLight;
        exports.AmbientLight = AmbientLight;
        exports.LightShadow = LightShadow;
        exports.Light = Light;
        exports.StereoCamera = StereoCamera;
        exports.PerspectiveCamera = PerspectiveCamera;
        exports.OrthographicCamera = OrthographicCamera;
        exports.CubeCamera = CubeCamera;
        exports.ArrayCamera = ArrayCamera;
        exports.Camera = Camera;
        exports.AudioListener = AudioListener;
        exports.PositionalAudio = PositionalAudio;
        exports.AudioContext = AudioContext;
        exports.AudioAnalyser = AudioAnalyser;
        exports.Audio = Audio;
        exports.VectorKeyframeTrack = VectorKeyframeTrack;
        exports.StringKeyframeTrack = StringKeyframeTrack;
        exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
        exports.NumberKeyframeTrack = NumberKeyframeTrack;
        exports.ColorKeyframeTrack = ColorKeyframeTrack;
        exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
        exports.PropertyMixer = PropertyMixer;
        exports.PropertyBinding = PropertyBinding;
        exports.KeyframeTrack = KeyframeTrack;
        exports.AnimationUtils = AnimationUtils;
        exports.AnimationObjectGroup = AnimationObjectGroup;
        exports.AnimationMixer = AnimationMixer;
        exports.AnimationClip = AnimationClip;
        exports.Uniform = Uniform;
        exports.InstancedBufferGeometry = InstancedBufferGeometry;
        exports.BufferGeometry = BufferGeometry;
        exports.Geometry = Geometry;
        exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
        exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
        exports.InterleavedBuffer = InterleavedBuffer;
        exports.InstancedBufferAttribute = InstancedBufferAttribute;
        exports.Face3 = Face3;
        exports.Object3D = Object3D;
        exports.Raycaster = Raycaster;
        exports.Layers = Layers;
        exports.EventDispatcher = EventDispatcher;
        exports.Clock = Clock;
        exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
        exports.LinearInterpolant = LinearInterpolant;
        exports.DiscreteInterpolant = DiscreteInterpolant;
        exports.CubicInterpolant = CubicInterpolant;
        exports.Interpolant = Interpolant;
        exports.Triangle = Triangle;
        exports.Math = _Math;
        exports.Spherical = Spherical;
        exports.Cylindrical = Cylindrical;
        exports.Plane = Plane;
        exports.Frustum = Frustum;
        exports.Sphere = Sphere;
        exports.Ray = Ray;
        exports.Matrix4 = Matrix4;
        exports.Matrix3 = Matrix3;
        exports.Box3 = Box3;
        exports.Box2 = Box2;
        exports.Line3 = Line3;
        exports.Euler = Euler;
        exports.Vector4 = Vector4;
        exports.Vector3 = Vector3;
        exports.Vector2 = Vector2;
        exports.Quaternion = Quaternion;
        exports.Color = Color;
        exports.ImmediateRenderObject = ImmediateRenderObject;
        exports.VertexNormalsHelper = VertexNormalsHelper;
        exports.SpotLightHelper = SpotLightHelper;
        exports.SkeletonHelper = SkeletonHelper;
        exports.PointLightHelper = PointLightHelper;
        exports.RectAreaLightHelper = RectAreaLightHelper;
        exports.HemisphereLightHelper = HemisphereLightHelper;
        exports.GridHelper = GridHelper;
        exports.PolarGridHelper = PolarGridHelper;
        exports.PositionalAudioHelper = PositionalAudioHelper;
        exports.FaceNormalsHelper = FaceNormalsHelper;
        exports.DirectionalLightHelper = DirectionalLightHelper;
        exports.CameraHelper = CameraHelper;
        exports.BoxHelper = BoxHelper;
        exports.Box3Helper = Box3Helper;
        exports.PlaneHelper = PlaneHelper;
        exports.ArrowHelper = ArrowHelper;
        exports.AxesHelper = AxesHelper;
        exports.Shape = Shape;
        exports.Path = Path;
        exports.ShapePath = ShapePath;
        exports.Font = Font;
        exports.CurvePath = CurvePath;
        exports.Curve = Curve;
        exports.ImageUtils = ImageUtils;
        exports.ShapeUtils = ShapeUtils;
        exports.WebGLUtils = WebGLUtils;
        exports.WireframeGeometry = WireframeGeometry;
        exports.ParametricGeometry = ParametricGeometry;
        exports.ParametricBufferGeometry = ParametricBufferGeometry;
        exports.TetrahedronGeometry = TetrahedronGeometry;
        exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
        exports.OctahedronGeometry = OctahedronGeometry;
        exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
        exports.IcosahedronGeometry = IcosahedronGeometry;
        exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
        exports.DodecahedronGeometry = DodecahedronGeometry;
        exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
        exports.PolyhedronGeometry = PolyhedronGeometry;
        exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
        exports.TubeGeometry = TubeGeometry;
        exports.TubeBufferGeometry = TubeBufferGeometry;
        exports.TorusKnotGeometry = TorusKnotGeometry;
        exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
        exports.TorusGeometry = TorusGeometry;
        exports.TorusBufferGeometry = TorusBufferGeometry;
        exports.TextGeometry = TextGeometry;
        exports.TextBufferGeometry = TextBufferGeometry;
        exports.SphereGeometry = SphereGeometry;
        exports.SphereBufferGeometry = SphereBufferGeometry;
        exports.RingGeometry = RingGeometry;
        exports.RingBufferGeometry = RingBufferGeometry;
        exports.PlaneGeometry = PlaneGeometry;
        exports.PlaneBufferGeometry = PlaneBufferGeometry;
        exports.LatheGeometry = LatheGeometry;
        exports.LatheBufferGeometry = LatheBufferGeometry;
        exports.ShapeGeometry = ShapeGeometry;
        exports.ShapeBufferGeometry = ShapeBufferGeometry;
        exports.ExtrudeGeometry = ExtrudeGeometry;
        exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
        exports.EdgesGeometry = EdgesGeometry;
        exports.ConeGeometry = ConeGeometry;
        exports.ConeBufferGeometry = ConeBufferGeometry;
        exports.CylinderGeometry = CylinderGeometry;
        exports.CylinderBufferGeometry = CylinderBufferGeometry;
        exports.CircleGeometry = CircleGeometry;
        exports.CircleBufferGeometry = CircleBufferGeometry;
        exports.BoxGeometry = BoxGeometry;
        exports.CubeGeometry = BoxGeometry;
        exports.BoxBufferGeometry = BoxBufferGeometry;
        exports.ShadowMaterial = ShadowMaterial;
        exports.SpriteMaterial = SpriteMaterial;
        exports.RawShaderMaterial = RawShaderMaterial;
        exports.ShaderMaterial = ShaderMaterial;
        exports.PointsMaterial = PointsMaterial;
        exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
        exports.MeshStandardMaterial = MeshStandardMaterial;
        exports.MeshPhongMaterial = MeshPhongMaterial;
        exports.MeshToonMaterial = MeshToonMaterial;
        exports.MeshNormalMaterial = MeshNormalMaterial;
        exports.MeshLambertMaterial = MeshLambertMaterial;
        exports.MeshDepthMaterial = MeshDepthMaterial;
        exports.MeshDistanceMaterial = MeshDistanceMaterial;
        exports.MeshBasicMaterial = MeshBasicMaterial;
        exports.MeshMatcapMaterial = MeshMatcapMaterial;
        exports.LineDashedMaterial = LineDashedMaterial;
        exports.LineBasicMaterial = LineBasicMaterial;
        exports.Material = Material;
        exports.Float64BufferAttribute = Float64BufferAttribute;
        exports.Float32BufferAttribute = Float32BufferAttribute;
        exports.Uint32BufferAttribute = Uint32BufferAttribute;
        exports.Int32BufferAttribute = Int32BufferAttribute;
        exports.Uint16BufferAttribute = Uint16BufferAttribute;
        exports.Int16BufferAttribute = Int16BufferAttribute;
        exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
        exports.Uint8BufferAttribute = Uint8BufferAttribute;
        exports.Int8BufferAttribute = Int8BufferAttribute;
        exports.BufferAttribute = BufferAttribute;
        exports.ArcCurve = ArcCurve;
        exports.CatmullRomCurve3 = CatmullRomCurve3;
        exports.CubicBezierCurve = CubicBezierCurve;
        exports.CubicBezierCurve3 = CubicBezierCurve3;
        exports.EllipseCurve = EllipseCurve;
        exports.LineCurve = LineCurve;
        exports.LineCurve3 = LineCurve3;
        exports.QuadraticBezierCurve = QuadraticBezierCurve;
        exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
        exports.SplineCurve = SplineCurve;
        exports.REVISION = REVISION;
        exports.MOUSE = MOUSE;
        exports.CullFaceNone = CullFaceNone;
        exports.CullFaceBack = CullFaceBack;
        exports.CullFaceFront = CullFaceFront;
        exports.CullFaceFrontBack = CullFaceFrontBack;
        exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
        exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
        exports.BasicShadowMap = BasicShadowMap;
        exports.PCFShadowMap = PCFShadowMap;
        exports.PCFSoftShadowMap = PCFSoftShadowMap;
        exports.FrontSide = FrontSide;
        exports.BackSide = BackSide;
        exports.DoubleSide = DoubleSide;
        exports.FlatShading = FlatShading;
        exports.SmoothShading = SmoothShading;
        exports.NoColors = NoColors;
        exports.FaceColors = FaceColors;
        exports.VertexColors = VertexColors;
        exports.NoBlending = NoBlending;
        exports.NormalBlending = NormalBlending;
        exports.AdditiveBlending = AdditiveBlending;
        exports.SubtractiveBlending = SubtractiveBlending;
        exports.MultiplyBlending = MultiplyBlending;
        exports.CustomBlending = CustomBlending;
        exports.AddEquation = AddEquation;
        exports.SubtractEquation = SubtractEquation;
        exports.ReverseSubtractEquation = ReverseSubtractEquation;
        exports.MinEquation = MinEquation;
        exports.MaxEquation = MaxEquation;
        exports.ZeroFactor = ZeroFactor;
        exports.OneFactor = OneFactor;
        exports.SrcColorFactor = SrcColorFactor;
        exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
        exports.SrcAlphaFactor = SrcAlphaFactor;
        exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
        exports.DstAlphaFactor = DstAlphaFactor;
        exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
        exports.DstColorFactor = DstColorFactor;
        exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
        exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
        exports.NeverDepth = NeverDepth;
        exports.AlwaysDepth = AlwaysDepth;
        exports.LessDepth = LessDepth;
        exports.LessEqualDepth = LessEqualDepth;
        exports.EqualDepth = EqualDepth;
        exports.GreaterEqualDepth = GreaterEqualDepth;
        exports.GreaterDepth = GreaterDepth;
        exports.NotEqualDepth = NotEqualDepth;
        exports.MultiplyOperation = MultiplyOperation;
        exports.MixOperation = MixOperation;
        exports.AddOperation = AddOperation;
        exports.NoToneMapping = NoToneMapping;
        exports.LinearToneMapping = LinearToneMapping;
        exports.ReinhardToneMapping = ReinhardToneMapping;
        exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
        exports.CineonToneMapping = CineonToneMapping;
        exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
        exports.UVMapping = UVMapping;
        exports.CubeReflectionMapping = CubeReflectionMapping;
        exports.CubeRefractionMapping = CubeRefractionMapping;
        exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
        exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
        exports.SphericalReflectionMapping = SphericalReflectionMapping;
        exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
        exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
        exports.RepeatWrapping = RepeatWrapping;
        exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
        exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
        exports.NearestFilter = NearestFilter;
        exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
        exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
        exports.LinearFilter = LinearFilter;
        exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
        exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
        exports.UnsignedByteType = UnsignedByteType;
        exports.ByteType = ByteType;
        exports.ShortType = ShortType;
        exports.UnsignedShortType = UnsignedShortType;
        exports.IntType = IntType;
        exports.UnsignedIntType = UnsignedIntType;
        exports.FloatType = FloatType;
        exports.HalfFloatType = HalfFloatType;
        exports.UnsignedShort4444Type = UnsignedShort4444Type;
        exports.UnsignedShort5551Type = UnsignedShort5551Type;
        exports.UnsignedShort565Type = UnsignedShort565Type;
        exports.UnsignedInt248Type = UnsignedInt248Type;
        exports.AlphaFormat = AlphaFormat;
        exports.RGBFormat = RGBFormat;
        exports.RGBAFormat = RGBAFormat;
        exports.LuminanceFormat = LuminanceFormat;
        exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
        exports.RGBEFormat = RGBEFormat;
        exports.DepthFormat = DepthFormat;
        exports.DepthStencilFormat = DepthStencilFormat;
        exports.RedFormat = RedFormat;
        exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
        exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
        exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
        exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
        exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
        exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
        exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
        exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
        exports.RGB_ETC1_Format = RGB_ETC1_Format;
        exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
        exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
        exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
        exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
        exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
        exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
        exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
        exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
        exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
        exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
        exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
        exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
        exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
        exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
        exports.LoopOnce = LoopOnce;
        exports.LoopRepeat = LoopRepeat;
        exports.LoopPingPong = LoopPingPong;
        exports.InterpolateDiscrete = InterpolateDiscrete;
        exports.InterpolateLinear = InterpolateLinear;
        exports.InterpolateSmooth = InterpolateSmooth;
        exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
        exports.ZeroSlopeEnding = ZeroSlopeEnding;
        exports.WrapAroundEnding = WrapAroundEnding;
        exports.TrianglesDrawMode = TrianglesDrawMode;
        exports.TriangleStripDrawMode = TriangleStripDrawMode;
        exports.TriangleFanDrawMode = TriangleFanDrawMode;
        exports.LinearEncoding = LinearEncoding;
        exports.sRGBEncoding = sRGBEncoding;
        exports.GammaEncoding = GammaEncoding;
        exports.RGBEEncoding = RGBEEncoding;
        exports.LogLuvEncoding = LogLuvEncoding;
        exports.RGBM7Encoding = RGBM7Encoding;
        exports.RGBM16Encoding = RGBM16Encoding;
        exports.RGBDEncoding = RGBDEncoding;
        exports.BasicDepthPacking = BasicDepthPacking;
        exports.RGBADepthPacking = RGBADepthPacking;
        exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
        exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
        exports.Face4 = Face4;
        exports.LineStrip = LineStrip;
        exports.LinePieces = LinePieces;
        exports.MeshFaceMaterial = MeshFaceMaterial;
        exports.MultiMaterial = MultiMaterial;
        exports.PointCloud = PointCloud;
        exports.Particle = Particle;
        exports.ParticleSystem = ParticleSystem;
        exports.PointCloudMaterial = PointCloudMaterial;
        exports.ParticleBasicMaterial = ParticleBasicMaterial;
        exports.ParticleSystemMaterial = ParticleSystemMaterial;
        exports.Vertex = Vertex;
        exports.DynamicBufferAttribute = DynamicBufferAttribute;
        exports.Int8Attribute = Int8Attribute;
        exports.Uint8Attribute = Uint8Attribute;
        exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
        exports.Int16Attribute = Int16Attribute;
        exports.Uint16Attribute = Uint16Attribute;
        exports.Int32Attribute = Int32Attribute;
        exports.Uint32Attribute = Uint32Attribute;
        exports.Float32Attribute = Float32Attribute;
        exports.Float64Attribute = Float64Attribute;
        exports.ClosedSplineCurve3 = ClosedSplineCurve3;
        exports.SplineCurve3 = SplineCurve3;
        exports.Spline = Spline;
        exports.AxisHelper = AxisHelper;
        exports.BoundingBoxHelper = BoundingBoxHelper;
        exports.EdgesHelper = EdgesHelper;
        exports.WireframeHelper = WireframeHelper;
        exports.XHRLoader = XHRLoader;
        exports.BinaryTextureLoader = BinaryTextureLoader;
        exports.GeometryUtils = GeometryUtils;
        exports.Projector = Projector;
        exports.CanvasRenderer = CanvasRenderer;
        exports.JSONLoader = JSONLoader;
        exports.SceneUtils = SceneUtils;
        exports.LensFlare = LensFlare;
    
        Object.defineProperty(exports, '__esModule', { value: true });
    
    }));
    
    },{}],40:[function(require,module,exports){
    'use strict'
    
    var parseUnit = require('parse-unit')
    
    module.exports = toPX
    
    var PIXELS_PER_INCH = getSizeBrutal('in', document.body) // 96
    
    
    function getPropertyInPX(element, prop) {
      var parts = parseUnit(getComputedStyle(element).getPropertyValue(prop))
      return parts[0] * toPX(parts[1], element)
    }
    
    //This brutal hack is needed
    function getSizeBrutal(unit, element) {
      var testDIV = document.createElement('div')
      testDIV.style['height'] = '128' + unit
      element.appendChild(testDIV)
      var size = getPropertyInPX(testDIV, 'height') / 128
      element.removeChild(testDIV)
      return size
    }
    
    function toPX(str, element) {
      if (!str) return null
    
      element = element || document.body
      str = (str + '' || 'px').trim().toLowerCase()
      if(element === window || element === document) {
        element = document.body
      }
    
      switch(str) {
        case '%':  //Ambiguous, not sure if we should use width or height
          return element.clientHeight / 100.0
        case 'ch':
        case 'ex':
          return getSizeBrutal(str, element)
        case 'em':
          return getPropertyInPX(element, 'font-size')
        case 'rem':
          return getPropertyInPX(document.body, 'font-size')
        case 'vw':
          return window.innerWidth/100
        case 'vh':
          return window.innerHeight/100
        case 'vmin':
          return Math.min(window.innerWidth, window.innerHeight) / 100
        case 'vmax':
          return Math.max(window.innerWidth, window.innerHeight) / 100
        case 'in':
          return PIXELS_PER_INCH
        case 'cm':
          return PIXELS_PER_INCH / 2.54
        case 'mm':
          return PIXELS_PER_INCH / 25.4
        case 'pt':
          return PIXELS_PER_INCH / 72
        case 'pc':
          return PIXELS_PER_INCH / 6
        case 'px':
          return 1
      }
    
      // detect number of units
      var parts = parseUnit(str)
      if (!isNaN(parts[0]) && parts[1]) {
        var px = toPX(parts[1], element)
        return typeof px === 'number' ? parts[0] * px : null
      }
    
      return null
    }
    
    },{"parse-unit":30}],41:[function(require,module,exports){
    var getDistance = require('gl-vec2/distance')
    var EventEmitter = require('events').EventEmitter
    var dprop = require('dprop')
    var eventOffset = require('mouse-event-offset')
    
    module.exports = touchPinch
    function touchPinch (target) {
      target = target || window
    
      var emitter = new EventEmitter()
      var fingers = [ null, null ]
      var activeCount = 0
    
      var lastDistance = 0
      var ended = false
      var enabled = false
    
      // some read-only values
      Object.defineProperties(emitter, {
        pinching: dprop(function () {
          return activeCount === 2
        }),
    
        fingers: dprop(function () {
          return fingers
        })
      })
    
      enable()
      emitter.enable = enable
      emitter.disable = disable
      emitter.indexOfTouch = indexOfTouch
      return emitter
    
      function indexOfTouch (touch) {
        var id = touch.identifier
        for (var i = 0; i < fingers.length; i++) {
          if (fingers[i] &&
            fingers[i].touch &&
            fingers[i].touch.identifier === id) {
            return i
          }
        }
        return -1
      }
    
      function enable () {
        if (enabled) return
        enabled = true
        target.addEventListener('touchstart', onTouchStart, false)
        target.addEventListener('touchmove', onTouchMove, false)
        target.addEventListener('touchend', onTouchRemoved, false)
        target.addEventListener('touchcancel', onTouchRemoved, false)
      }
    
      function disable () {
        if (!enabled) return
        enabled = false
        activeCount = 0
        fingers[0] = null
        fingers[1] = null
        lastDistance = 0
        ended = false
        target.removeEventListener('touchstart', onTouchStart, false)
        target.removeEventListener('touchmove', onTouchMove, false)
        target.removeEventListener('touchend', onTouchRemoved, false)
        target.removeEventListener('touchcancel', onTouchRemoved, false)
      }
    
      function onTouchStart (ev) {
        for (var i = 0; i < ev.changedTouches.length; i++) {
          var newTouch = ev.changedTouches[i]
          var id = newTouch.identifier
          var idx = indexOfTouch(id)
    
          if (idx === -1 && activeCount < 2) {
            var first = activeCount === 0
    
            // newest and previous finger (previous may be undefined)
            var newIndex = fingers[0] ? 1 : 0
            var oldIndex = fingers[0] ? 0 : 1
            var newFinger = new Finger()
    
            // add to stack
            fingers[newIndex] = newFinger
            activeCount++
    
            // update touch event & position
            newFinger.touch = newTouch
            eventOffset(newTouch, target, newFinger.position)
    
            var oldTouch = fingers[oldIndex] ? fingers[oldIndex].touch : undefined
            emitter.emit('place', newTouch, oldTouch)
    
            if (!first) {
              var initialDistance = computeDistance()
              ended = false
              emitter.emit('start', initialDistance)
              lastDistance = initialDistance
            }
          }
        }
      }
    
      function onTouchMove (ev) {
        var changed = false
        for (var i = 0; i < ev.changedTouches.length; i++) {
          var movedTouch = ev.changedTouches[i]
          var idx = indexOfTouch(movedTouch)
          if (idx !== -1) {
            changed = true
            fingers[idx].touch = movedTouch // avoid caching touches
            eventOffset(movedTouch, target, fingers[idx].position)
          }
        }
    
        if (activeCount === 2 && changed) {
          var currentDistance = computeDistance()
          emitter.emit('change', currentDistance, lastDistance)
          lastDistance = currentDistance
        }
      }
    
      function onTouchRemoved (ev) {
        for (var i = 0; i < ev.changedTouches.length; i++) {
          var removed = ev.changedTouches[i]
          var idx = indexOfTouch(removed)
    
          if (idx !== -1) {
            fingers[idx] = null
            activeCount--
            var otherIdx = idx === 0 ? 1 : 0
            var otherTouch = fingers[otherIdx] ? fingers[otherIdx].touch : undefined
            emitter.emit('lift', removed, otherTouch)
          }
        }
    
        if (!ended && activeCount !== 2) {
          ended = true
          emitter.emit('end')
        }
      }
    
      function computeDistance () {
        if (activeCount < 2) return 0
        return getDistance(fingers[0].position, fingers[1].position)
      }
    }
    
    function Finger () {
      this.position = [0, 0]
      this.touch = null
    }
    
    },{"dprop":7,"events":9,"gl-vec2/distance":13,"mouse-event-offset":25}],42:[function(require,module,exports){
    module.exports = unindex
    
    function unindex(positions, cells, out) {
      if (positions.positions && positions.cells) {
        out = cells
        cells = positions.cells
        positions = positions.positions
      }
    
      var dims = positions.length ? positions[0].length : 0
      var points = cells.length ? cells[0].length : 0
    
      out = out || new Float32Array(cells.length * points * dims)
    
      if (points === 3 && dims === 2) {
        for (var i = 0, n = 0, l = cells.length; i < l; i += 1) {
          var cell = cells[i]
          out[n++] = positions[cell[0]][0]
          out[n++] = positions[cell[0]][1]
          out[n++] = positions[cell[1]][0]
          out[n++] = positions[cell[1]][1]
          out[n++] = positions[cell[2]][0]
          out[n++] = positions[cell[2]][1]
        }
      } else
      if (points === 3 && dims === 3) {
        for (var i = 0, n = 0, l = cells.length; i < l; i += 1) {
          var cell = cells[i]
          out[n++] = positions[cell[0]][0]
          out[n++] = positions[cell[0]][1]
          out[n++] = positions[cell[0]][2]
          out[n++] = positions[cell[1]][0]
          out[n++] = positions[cell[1]][1]
          out[n++] = positions[cell[1]][2]
          out[n++] = positions[cell[2]][0]
          out[n++] = positions[cell[2]][1]
          out[n++] = positions[cell[2]][2]
        }
      } else {
        for (var i = 0, n = 0, l = cells.length; i < l; i += 1) {
          var cell = cells[i]
          for (var c = 0; c < cell.length; c++) {
            var C = cell[c]
            for (var k = 0; k < dims; k++) {
              out[n++] = positions[C][k]
            }
          }
        }
      }
    
      return out
    }
    
    },{}]},{},[3])
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,